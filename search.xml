<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Zookeeper的选举机制"><a href="#1-Zookeeper的选举机制" class="headerlink" title="1.Zookeeper的选举机制"></a>1.Zookeeper的选举机制</h2><p>（1）半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</p><p>（2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</p><p>（3）以一个简单的例子来说明整个选举的过程。</p><p>​假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么。</p><p><img src="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/1661691467670.png" alt="1661691467670"></p><p>（1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；</p><p>（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</p><p>（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</p><p>（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；</p><p>（5）服务器5启动，同4一样当小弟。</p><h2 id="2-监听器原理"><a href="#2-监听器原理" class="headerlink" title="2.监听器原理"></a>2.监听器原理</h2><p><img src="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/1661691749227.png" alt="1661691749227"></p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> 选举 </tag>
            
            <tag> 监听机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录</title>
      <link href="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>免密登录原理：</p><p><img src="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/1661657310766.png" alt="1661657310766"></p><ol><li><p>生成公钥和私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>把公钥拷贝到需要免密登录的机器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop102</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop103</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop104</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>known_hosts</th><th>记录ssh访问过计算机的公钥(public   key)</th></tr></thead><tbody><tr><td>id_rsa</td><td>生成的私钥</td></tr><tr><td>id_rsa.pub</td><td>生成的公钥</td></tr><tr><td>authorized_keys</td><td>存放授权过的无密登录服务器公钥</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 离线数仓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH免密登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备一台模板机</title>
      <link href="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E6%A8%A1%E6%9D%BF%E6%9C%BA/"/>
      <url>/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E6%A8%A1%E6%9D%BF%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>本博客用于记录如何准备一台模板虚拟机</p><ol><li><p><strong>安装Linux系统</strong></p><p>其实安装Linux虚拟机还是比较简单的，但是有几个细节总是容易忘记，因此记录一下。</p><p>主要记不住的点在于手动分磁盘</p><ol><li>添加分区&#x2F;boot ,引导分区，建议1GB，修改设备类型为标准分区，文件系统为ext4</li><li>添加分区swap，这部分其实就是把一部分磁盘当作内存的备用空间，当内存不够用的时候，把这部分空间作为内存空间来使用，这部分空间可以设置为2GB，设备类型是标准分区，文件系统是swap</li><li>最后一个分区就是&#x2F; ，把剩余的磁盘全部分配，设备类型选择标准分区，文件系统是ext4</li></ol><p>其它部分就大致按照默认选项来就可以</p></li><li><p><strong>安装必要的环境，为安装Hadoop做准备</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# yum install -y epel-release</span><br><span class="line">[root@hadoop100 ~]# yum install -y psmisc nc net-tools rsync vim lrzsz ntp libzstd openssl-static tree iotop git</span><br></pre></td></tr></table></figure></li><li><p><strong>修改静态IP，教程在之前博客有讲到过</strong></p></li><li><p><strong>关闭防火墙，关闭防火墙开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# systemctl stop firewalld</span><br><span class="line">[root@hadoop100 ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p><strong>创建新用户，并修改此用户密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# useradd atguigu</span><br><span class="line">[root@hadoop100 ~]# passwd atguigu</span><br></pre></td></tr></table></figure></li><li><p><strong>配置该用户具有root权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# vim /etc/sudoers</span><br></pre></td></tr></table></figure><p> 修改&#x2F;etc&#x2F;sudoers文件，找到下面一行（91行），在root下面添加一行，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">atguigu   ALL=(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure></li><li><p><strong>在&#x2F;opt目录下创建文件夹，并修改所属主和所属组</strong></p><p>（1）在&#x2F;opt目录下创建module、software文件夹</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# mkdir /opt/module</span><br><span class="line">[root@hadoop100 ~]# mkdir /opt/software</span><br></pre></td></tr></table></figure><p>   （2）修改module、software文件夹的所有者和所属组均为atguigu用户 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# chown atguigu:atguigu /opt/module </span><br><span class="line">[root@hadoop100 ~]# chown atguigu:atguigu /opt/software</span><br></pre></td></tr></table></figure><p>   （3）查看module、software文件夹的所有者和所属组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# cd /opt/</span><br><span class="line">[root@hadoop100 opt]# ll</span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月  28 17:18 module</span><br><span class="line">drwxr-xr-x. 2 root    root    4096 9月   7 2017 rh</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月  28 17:18 software</span><br></pre></td></tr></table></figure><ol start="8"><li><strong>卸载虚拟机自带的open JDK</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</span><br></pre></td></tr></table></figure><p>模板机子创建好了之后，我们就可以直接克隆虚拟机，克隆后只需要改静态IP以及主机名就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 离线数仓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离线数仓 </tag>
            
            <tag> 手动分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop各种概念介绍</title>
      <link href="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Hadoop的优势是什么？"><a href="#1-Hadoop的优势是什么？" class="headerlink" title="1.Hadoop的优势是什么？"></a>1.Hadoop的优势是什么？</h2><ol><li>高可靠性：Hadoop底层会维度多个数据副本，即使Hadoop某个存储出现故障，也不会导致数据的丢失</li><li>高扩展性：在集群之间分配任务数据，可以十分方便的扩展数以千计的节点</li><li>高效性：在MR的思想下，Hadoop处理问题的策略是并行的，可以加快任务处理的速度</li><li>高容错性：能够自动把失败的任务重新分配</li></ol><h2 id="2-Hadoop1版本和Hadoop2版本的区别？"><a href="#2-Hadoop1版本和Hadoop2版本的区别？" class="headerlink" title="2.Hadoop1版本和Hadoop2版本的区别？"></a>2.Hadoop1版本和Hadoop2版本的区别？</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661652672746.png" alt="1661652672746"></p><p>在Hadoop1版本的时候，计算和资源调度都是由MR来实现，耦合性太高，在Hadoop2版本增加了Yarn资源调度模块，MR仅仅负责计算</p><h2 id="3-HDFS架构简述？"><a href="#3-HDFS架构简述？" class="headerlink" title="3.HDFS架构简述？"></a>3.HDFS架构简述？</h2><ol><li>NameNode：存储文件的元数据信息，如文件名，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表，还有每个文件所在的块列表和块所在的DateNode等等</li><li>DataNode: 在本地文件系统存储文件快数据，以及块数据的校验和</li><li>Secondary NameNode：每隔一段时间就会对NameNode元数据进行备份，但是是冷备份，治标不治本。</li></ol><h2 id="4-Yarn架构简述？"><a href="#4-Yarn架构简述？" class="headerlink" title="4.Yarn架构简述？"></a>4.Yarn架构简述？</h2><ol><li>ResourceManager: 处理客户端请求、监控NodeManager、启动或者监控ApplicationMaster、资源的分配与调度</li><li>NodeManager: 管理单个节点上的资源、处理来自ResourceManager的命令、处理来自ApplicationMaster的命令</li><li>ApplicationMaster：负责数据的切分、为应用程序申请资源并分配给内部的任务、任务的监控与容错</li><li>Container：他是YARN的资源抽象，封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等等</li></ol><h2 id="5-为什么HDFS文件块设置为128MB？"><a href="#5-为什么HDFS文件块设置为128MB？" class="headerlink" title="5.为什么HDFS文件块设置为128MB？"></a>5.为什么HDFS文件块设置为128MB？</h2><p><a href="https://so.csdn.net/so/search?q=HDFS&spm=1001.2101.3001.7020">HDFS</a>中的文件在物理上是分块存储（<code>Block</code>），块的大小可以通过配置参数(<code>dfs.blocksize</code>）来规定，默认大小在Hadoop2.x版本中是128M，老版本中是64M。</p><p>默认为128M的原因，基于最佳传输损耗理论！</p><p>不论对磁盘的文件进行读还是写，都需要先进行寻址！</p><p>最佳传输损耗理论：在一次传输中，寻址时间占用总传输时间的1%时，本次传输的损耗最小，为最佳性价比传输！<br>目前硬件的发展条件，普通磁盘写的速率大概为100M&#x2F;S, 寻址时间一般为10ms!</p><p><code>10ms / 1% = 1s</code><br><code>1s * 100M/S=100M</code></p><p>块在传输时，<code>每64K还需要校验一次</code>，因此块大小，必须为<code>2的n次方</code>，最接近100M的就是128M！</p><p><strong>为什么块的大小不能设置太小，也不能设置太大？</strong></p><ol><li><p>如果块设置过大，</p><p> 一方面，从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；</p><p> 另一方面，mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。</p></li><li><p>如果块设置过小，</p><p>一方面存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；</p><p>另一方面文件块过小，寻址时间增大，导致程序一直在找block的开始位置。</p></li></ol><p>因而，块适当设置大一些，减少寻址时间，那么传输一个由多个块组成的文件的时间主要取决于磁盘的传输速率。</p><h2 id="6-HDFS的写流程"><a href="#6-HDFS的写流程" class="headerlink" title="6.HDFS的写流程"></a>6.HDFS的写流程</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661661770326.png" alt="1661661770326"></p><ol><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</li><li>NameNode返回是否可以上传。</li><li>客户端请求第一个 Block上传到哪几个DataNode服务器上。</li><li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li><li>dn1、dn2、dn3逐级应答客户端。</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li></ol><h3 id="6-1-节点距离计算？"><a href="#6-1-节点距离计算？" class="headerlink" title="6.1 节点距离计算？"></a>6.1 节点距离计算？</h3><p>在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据。那么这个最近距离怎么计算呢？</p><p>节点距离：两个节点到达最近的共同祖先的距离总和。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661661934358.png" alt="1661661934358"></p><h3 id="6-2Hadoop副本节点选择策略"><a href="#6-2Hadoop副本节点选择策略" class="headerlink" title="6.2Hadoop副本节点选择策略"></a>6.2Hadoop副本节点选择策略</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661662094057.png" alt="1661662094057"></p><h2 id="7-HDFS读数据流程"><a href="#7-HDFS读数据流程" class="headerlink" title="7.HDFS读数据流程"></a>7.HDFS读数据流程</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661662132533.png" alt="1661662132533"></p><ol><li>客户端通过DistributedFileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li></ol><h2 id="8-NameNode和SecondaryNameNode"><a href="#8-NameNode和SecondaryNameNode" class="headerlink" title="8.NameNode和SecondaryNameNode"></a>8.NameNode和SecondaryNameNode</h2><h3 id="8-1-NN和2NN的工作机制"><a href="#8-1-NN和2NN的工作机制" class="headerlink" title="8.1 NN和2NN的工作机制"></a>8.1 NN和2NN的工作机制</h3><p>​思考：NameNode中的元数据存储在哪里？</p><p>​首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。</p><p>​这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</p><p>​但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，专门用于FsImage和Edits的合并。</p><hr><p><strong>NameNode工作机制</strong></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661669014177.png" alt="1661669014177"></p><p><strong>第一阶段：NameNode启动</strong></p><ol><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</li><li>客户端对元数据进行增删改的请求。</li><li>NameNode记录操作日志，更新滚动日志。</li><li>NameNode在内存中对元数据进行增删改。</li></ol><p><strong>第二阶段：SecondaryNameNode</strong></p><ol><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果。</li><li>Secondary NameNode请求执行CheckPoint。</li><li>NameNode滚动正在写的Edits日志。</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode。</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</li><li>生成新的镜像文件fsimage.chkpoint。</li><li>拷贝fsimage.chkpoint到NameNode。</li><li>NameNode将fsimage.chkpoint重新命名成fsimage。</li></ol><p><strong>NN和2NN的工作机制详解：</strong></p><p>Fsimage：NameNode内存中元数据序列化后形成的文件。</p><p>Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</p><p>​NameNode启动时，先滚动Edits并生成一个空的edits.inprogress，然后加载Edits和Fsimage到内存中，此时NameNode内存就持有最新的元数据信息。Client开始对NameNode发送元数据的增删改的请求，这些请求的操作首先会被记录到edits.inprogress中（查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息），如果此时NameNode挂掉，重启后会从Edits中读取元数据的信息。然后，NameNode会在内存中执行元数据的增删改的操作。</p><p>​由于Edits中记录的操作会越来越多，Edits文件会越来越大，导致NameNode在启动加载Edits时会很慢，所以需要对Edits和Fsimage进行合并（所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage）。SecondaryNameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。</p><p>​SecondaryNameNode首先会询问NameNode是否需要CheckPoint（触发CheckPoint需要满足两个条件中的任意一个，定时时间到和Edits中数据写满了）。直接带回NameNode是否检查结果。SecondaryNameNode执行CheckPoint操作，首先会让NameNode滚动Edits并生成一个空的edits.inprogress，滚动Edits的目的是给Edits打个标记，以后所有新的操作都写入edits.inprogress，其他未合并的Edits和Fsimage会拷贝到SecondaryNameNode的本地，然后将拷贝的Edits和Fsimage加载到内存中进行合并，生成fsimage.chkpoint，然后将fsimage.chkpoint拷贝给NameNode，重命名为Fsimage后替换掉原来的Fsimage。NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在Fsimage中。</p><h3 id="8-2CheckPoint时间设置"><a href="#8-2CheckPoint时间设置" class="headerlink" title="8.2CheckPoint时间设置"></a>8.2CheckPoint时间设置</h3><ol><li>通常情况下，SecondaryNameNode每隔一小时执行一次。</li><li>一分钟检查一次操作次数，当操作次数达到1百万时，SecondaryNameNode执行一次。</li></ol><h3 id="8-3集群的安全模式"><a href="#8-3集群的安全模式" class="headerlink" title="8.3集群的安全模式"></a>8.3集群的安全模式</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661670551060.png" alt="1661670551060"></p><h2 id="9-DataNode"><a href="#9-DataNode" class="headerlink" title="9.DataNode"></a>9.DataNode</h2><h3 id="9-1DataNode工作机制"><a href="#9-1DataNode工作机制" class="headerlink" title="9.1DataNode工作机制"></a>9.1DataNode工作机制</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661670644724.png" alt="1661670644724"></p><ol><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳。</li><li>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。</li><li>集群运行中可以安全加入和退出一些机器。</li></ol><h3 id="9-2DataNode检测数据完整性"><a href="#9-2DataNode检测数据完整性" class="headerlink" title="9.2DataNode检测数据完整性"></a>9.2DataNode检测数据完整性</h3><p>（1）当DataNode读取Block的时候，它会计算CheckSum。</p><p>（2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</p><p>（3）Client读取其他DataNode上的Block。</p><p>（4）常见的校验算法 crc（32），md5（128），sha1（160）</p><p>（5）DataNode在其文件创建后周期验证CheckSum。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661671111412.png" alt="1661671111412"></p><h3 id="9-3DataNode掉线死亡时间的设置"><a href="#9-3DataNode掉线死亡时间的设置" class="headerlink" title="9.3DataNode掉线死亡时间的设置"></a>9.3DataNode掉线死亡时间的设置</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661671219667.png" alt="1661671219667"></p><p>​需要注意的是hdfs-site.xml 配置文件中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.heartbeat.recheck-interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;300000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.heartbeat.interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="10-描述一下手写MR程序的大概流程和规范？"><a href="#10-描述一下手写MR程序的大概流程和规范？" class="headerlink" title="10.描述一下手写MR程序的大概流程和规范？"></a>10.描述一下手写MR程序的大概流程和规范？</h2><p>​首先，从MapReduce程序的结构划分可以分为三部分，第一是 程序的执行入口通常简称为驱动类，驱动类主要编写MR作业的提交流程以及自定义的一些配置项。第二是 Map阶段的核心类需要自定并且继承Hadoop提供的Mapper类，重写Mapper类中的map方法，在map方法中遍写自己的业务逻辑代码将数据处理后利用context 上下文对象的写出落盘。第三是 Reduce阶段的核心类同时也需要继承Hadoop提供的Reducer类，并重写reduce 方法，在reduce方法中编写自己的业务逻辑代码，处理完数据后也是通过context上下文对象将数据写出，这也就是最终的结果文件。</p><h2 id="11-如何实现Hadoop中的序列化，以及和Java序列化的区别"><a href="#11-如何实现Hadoop中的序列化，以及和Java序列化的区别" class="headerlink" title="11.如何实现Hadoop中的序列化，以及和Java序列化的区别"></a>11.如何实现Hadoop中的序列化，以及和Java序列化的区别</h2><p>​首先序列化是把内存中的Java对象转化成二进制字节码，反序列化是将二进制字节码转化成Java对象，通常我们在对Java对象进行磁盘持久化写入或者将Java对象作为数据进行网络传输的时候需要进行序列化，相反如果要将J数据从磁盘读出并转化成Java对象需要进行反序列化。实现Hadoop中的序列化需要让JavaBean对象实现Writable接口，并重写write() 方法和readFields()方法，其中write()方法是序列化方法，readFields()方法是反序列化方法。</p><p>​Hadoop序列化和Java序列化的区别在于，Java序列化更重量级，Java序列化的后的结果不仅仅生成二进制字节码文件，同时还会针对当前Java对象生成对应的检验信息以及集成体系结构，这样的话 无形中我们需要维护更多的数据，但是Hadoop序列化不会产生除了Java对象内部属性外的任何信息，整体内容更加简洁紧凑，读写速度相应也会提升很多，这也符合了大数据的处理背景。</p><h2 id="12-描述一下MR程序的执行逻辑"><a href="#12-描述一下MR程序的执行逻辑" class="headerlink" title="12.描述一下MR程序的执行逻辑"></a>12.描述一下MR程序的执行逻辑</h2><p>​简单的描述，MR程序执行先从InputFormat类说起，由InputFormat负责数据读入，并在内部实现切片，每一个切片的数据对应生成一个MapTask任务，MapTask中按照文件的行逐行数据进行处理，每一行数据会调用一次我们自定义的Mapper类的map方法，map方法内部实现具体的业务逻辑，处理完数据会通过context对象将数据写出到磁盘（此处会经历Shuffle过程），接下来ReduceTask会开始执行，首先ReduceTask会将MapTask处理完的数据结果拷贝过来，每一组相同key的values会会调用一次我们自定的Reducer类的reduce方法，当数据处理完成后，会通过context对象将数据结果写出到磁盘上。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675103915.png" alt="1661675103915"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675627909.png" alt="1661675627909"></p><p>上面的流程是整个MapReduce最全工作流程，但是Shuffle过程只是从第7步开始到第16步结束，具体Shuffle过程详解，如下：</p><p>（1）MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中</p><p>（2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</p><p>（3）多个溢出文件会被合并成大的溢出文件</p><p>（4）在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</p><p>（5）ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据</p><p>（6）ReduceTask会抓取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）</p><p>（7）合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</p><p><strong>注意：</strong></p><p>（1）Shuffle中的缓冲区大小会影响到MapReduce程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度就越快。</p><p>（2）缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb默认100M</p><h2 id="13-描述一下切片逻辑"><a href="#13-描述一下切片逻辑" class="headerlink" title="13.描述一下切片逻辑"></a>13.描述一下切片逻辑</h2><p>​MR中的切片是发生在数据读入的阶段中，所以我们要关注InputFormat的实现，通过追溯源码，在InputFormat这个抽象类中有一个getSplits(),这个方法就是我们实现切片的具体逻辑。首先我们先关注两个变量，分别是 minSize 和 maxSize，通过对源码的跟踪默认情况 minSize &#x3D; 1，maxSize &#x3D; Long.MAX_VALUE，源码中声明了一个集合List<InputSplit> splits &#x3D; new ArrayList<InputSplit>();，用于装载将来的切片对象并返回。接下来我们根据提交的job信息获取到当前要进行切片的文件详情，首先判断点前文件是否可以进行切分，这一步主要考虑到一些不支持切分的压缩文件时不能进行切片操作，否则就破坏了数据的完整性，如果当前文件可以切片的话，那么接下来就要计算切片的大小，计算切片大小一共需要三个因子，分别是minSize 、maxSize 、blocksize ，最后通过Math.max(minSize, Math.min(maxSize, blockSize)); 计算逻辑获取到切片大小，默认情况切片大小和数据库块大小一致，如果我们想改变切片大小可以通过修改一下两个配置参数实现 mapreduce.input.fileinputformat.split.minsize mapreduce.input.fileinputformat.split.maxsize，</p><p>如果把切片大小调大改mapreduce.input.fileinputformat.split.minsize<br>如果把切片大小调小改mapreduce.input.fileinputformat.split.maxsize。</p><p>​当我们可以获取到切片大小后就可以继续往下执行，在最终完成切片之前还有一个关键判断，就是判断剩余文件是否要继续进行切片，如果剩余文件&#x2F;切片大小&gt;1.1 那就继续切片，否则就不会再进行切片，这个规则考虑的情况就就是让将来的切片尽可能资源使用均衡，不至于很小的文件内容也开启一个MapTask。到此整个切片规则就表述完毕了！</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661674494603.png" alt="1661674494603"></p><h2 id="14-CombineTextInputFormat切片机制"><a href="#14-CombineTextInputFormat切片机制" class="headerlink" title="14.CombineTextInputFormat切片机制"></a>14.CombineTextInputFormat切片机制</h2><p>​框架默认的TextInputFormat切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。</p><p>​CombineTextInputFormat用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask处理。</p><p>​CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);&#x2F;&#x2F; 4m</p><p>​注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661674832817.png" alt="1661674832817"></p><p>​将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</p><p>​例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。</p><h2 id="15-MR中的shuffle机制"><a href="#15-MR中的shuffle机制" class="headerlink" title="15.MR中的shuffle机制"></a>15.MR中的shuffle机制</h2><h3 id="15-1概述"><a href="#15-1概述" class="headerlink" title="15.1概述"></a>15.1概述</h3><p>​Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675886296.png" alt="1661675886296"></p><h3 id="15-2Partion分区"><a href="#15-2Partion分区" class="headerlink" title="15.2Partion分区"></a>15.2Partion分区</h3><p>默认的分区是根据key的hashcode对于ReduceTask的数量取余得到的，用户没办法指定key在哪一个分区</p><p><strong>自定义Partition步骤：</strong></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676742763.png" alt="1661676742763"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676800867.png" alt="1661676800867"></p><h3 id="15-3WritableComparable排序"><a href="#15-3WritableComparable排序" class="headerlink" title="15.3WritableComparable排序"></a>15.3WritableComparable排序</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676891089.png" alt="1661676891089"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676953729.png" alt="1661676953729"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676989320.png" alt="1661676989320"></p><p><strong>自定义排序WritableComparable原理分析</strong></p><p>bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序。</p><h3 id="15-3Combiner"><a href="#15-3Combiner" class="headerlink" title="15.3Combiner"></a>15.3Combiner</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677337910.png" alt="1661677337910"></p><h2 id="16-MapTask的工作机制"><a href="#16-MapTask的工作机制" class="headerlink" title="16.MapTask的工作机制"></a>16.MapTask的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677599289.png" alt="1661677599289"></p><p>​（1）Read阶段：MapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key&#x2F;value。</p><p>​       （2）Map阶段：该节点主要是将解析出的key&#x2F;value交给用户编写map()函数处理，并产生一系列新的key&#x2F;value。</p><p>​       （3）Collect收集阶段：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key&#x2F;value分区（调用Partitioner），并写入一个环形内存缓冲区中。</p><p>​       （4）Spill阶段：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p><p>​       溢写阶段详情：</p><p>​       步骤1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序。</p><p>​       步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output&#x2F;spillN.out（N表示当前溢写次数）中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>​       步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output&#x2F;spillN.out.index中。</p><p>​       （5）Merge阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p><p>​       当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output&#x2F;file.out中，同时生成相应的索引文件output&#x2F;file.out.index。</p><p>​       在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并mapreduce.task.io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。</p><p>​       让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</p><h2 id="17-ReduceTask的工作机制"><a href="#17-ReduceTask的工作机制" class="headerlink" title="17.ReduceTask的工作机制"></a>17.ReduceTask的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677648908.png" alt="1661677648908"></p><p>​       （1）Copy阶段：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</p><p>​       （2）Merge阶段：在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。</p><p>​       （3）Sort阶段：按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可。</p><p>​       （4）Reduce阶段：reduce()函数将计算结果写到HDFS上。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677707796.png" alt="1661677707796"></p><h2 id="18-Map-Join-和Reduce-Join"><a href="#18-Map-Join-和Reduce-Join" class="headerlink" title="18.Map Join 和Reduce Join"></a>18.Map Join 和Reduce Join</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661678941793.png" alt="1661678941793"></p><p>​Map Join适用于一张表十分小、一张表很大的场景。</p><h2 id="19-Yarn的工作机制"><a href="#19-Yarn的工作机制" class="headerlink" title="19.Yarn的工作机制"></a>19.Yarn的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679074675.png" alt="1661679074675"></p><p>​（1）MR程序提交到客户端所在的节点。</p><p>​       （2）YarnRunner向ResourceManager申请一个Application。</p><p>​       （3）RM将该应用程序的资源路径返回给YarnRunner。</p><p>​       （4）该程序将运行所需资源提交到HDFS上。</p><p>​       （5）程序资源提交完毕后，申请运行mrAppMaster。</p><p>​       （6）RM将用户的请求初始化成一个Task。</p><p>​       （7）其中一个NodeManager领取到Task任务。</p><p>​       （8）该NodeManager创建容器Container，并产生MRAppmaster。</p><p>​       （9）Container从HDFS上拷贝资源到本地。</p><p>​       （10）MRAppmaster向RM 申请运行MapTask资源。</p><p>​       （11）RM将运行MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器。</p><p>​       （12）MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</p><p>​（13）MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</p><p>​       （14）ReduceTask向MapTask获取相应分区的数据。</p><p>​       （15）程序运行完毕后，MR会向RM申请注销自己。</p><hr><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679214814.png" alt="1661679214814"></p><p>作业提交全过程详解</p><p>（1）作业提交</p><p>第1步：Client调用job.waitForCompletion方法，向整个集群提交MapReduce作业。</p><p>第2步：Client向RM申请一个作业id。</p><p>第3步：RM给Client返回该job资源的提交路径和作业id。</p><p>第4步：Client提交jar包、切片信息和配置文件到指定的资源提交路径。</p><p>第5步：Client提交完资源后，向RM申请运行MrAppMaster。</p><p>（2）作业初始化</p><p>第6步：当RM收到Client的请求后，将该job添加到容量调度器中。</p><p>第7步：某一个空闲的NM领取到该Job。</p><p>第8步：该NM创建Container，并产生MRAppmaster。</p><p>第9步：下载Client提交的资源到本地。</p><p>（3）任务分配</p><p>第10步：MrAppMaster向RM申请运行多个MapTask任务资源。</p><p>第11步：RM将运行MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器。</p><p>（4）任务运行</p><p>第12步：MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</p><p>第13步：MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</p><p>第14步：ReduceTask向MapTask获取相应分区的数据。</p><p>第15步：程序运行完毕后，MR会向RM申请注销自己。</p><p>（5）进度和状态更新</p><p>YARN中的任务将其进度和状态(包括counter)返回给应用管理器, 客户端每秒(通过mapreduce.client.progressmonitor.pollinterval设置)向应用管理器请求进度更新, 展示给用户。</p><p>（6）作业完成</p><p>除了向应用管理器请求作业进度外, 客户端每5秒都会通过调用waitForCompletion()来检查作业是否完成。时间间隔可以通过mapreduce.client.completion.pollinterval来设置。作业完成之后, 应用管理器和Container会清理工作状态。作业的信息会被作业历史服务器存储以备之后用户核查。</p><h2 id="20-Hadoop中的作业调度器"><a href="#20-Hadoop中的作业调度器" class="headerlink" title="20.Hadoop中的作业调度器"></a>20.Hadoop中的作业调度器</h2><p>​目前，Hadoop作业调度器主要有三种：FIFO、Capacity Scheduler和Fair Scheduler。Hadoop3.1.3默认的资源调度器是Capacity Scheduler。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679354061.png" alt="1661679354061"></p><p>​Hadoop最初设计目的是支持大数据批处理作业，如日志挖掘、Web索引等作业，</p><p>​为此，Hadoop仅提供了一个非常简单的调度机制：FIFO，即先来先服务，在该调度机制下，所有作业被统一提交到一个队列中，Hadoop按照提交顺序依次运行这些作业。</p><p>​但随着Hadoop的普及，单个Hadoop集群的用户量越来越大，不同用户提交的应用程序往往具有不同的服务质量要求，典型的应用有以下几种：</p><p>​批处理作业：这种作业往往耗时较长，对时间完成一般没有严格要求，如数据挖掘、机器学习等方面的应用程序。</p><p>​交互式作业：这种作业期望能及时返回结果，如SQL查询（Hive）等。</p><p>​生产性作业：这种作业要求有一定量的资源保证，如统计值计算、垃圾数据分析等。</p><p>​此外，这些应用程序对硬件资源需求量也是不同的，如过滤、统计类作业一般为CPU密集型作业，而数据挖掘、机器学习作业一般为I&#x2F;O密集型作业。因此，简单的FIFO调度策略不仅不能满足多样化需求，也不能充分利用硬件资源。</p><hr><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679393543.png" alt="1661679393543"></p><p>​Capacity Scheduler Capacity Scheduler 是Yahoo开发的多用户调度器，它以队列为单位划分资源，每个队列可设定一定比例的资源最低保证和使用上限，同时，每个用户也可设定一定的资源使用上限以防止资源滥用。而当一个队列的资源有剩余时，可暂时将剩余资源共享给其他队列。</p><p>​总之，Capacity Scheduler 主要有以下几个特点：</p><p>​①容量保证。管理员可为每个队列设置资源最低保证和资源使用上限，而所有提交到该队列的应用程序共享这些资源。</p><p>​②灵活性，如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用程序提交，则其他队列借调的资源会归还给该队列。这种资源灵活分配的方式可明显提高资源利用率。</p><p>​③多重租赁。支持多用户共享集群和多应用程序同时运行。为防止单个应用程序、用户或者队列独占集群中的资源，管理员可为之增加多重约束（比如单个应用程序同时运行的任务数等）。</p><p>​④安全保证。每个队列有严格的ACL列表规定它的访问用户，每个用户可指定哪些用户允许查看自己应用程序的运行状态或者控制应用程序（比如杀死应用程序）。此外，管理员可指定队列管理员和集群系统管理员。</p><p>​⑤动态更新配置文件。管理员可根据需要动态修改各种配置参数，以实现在线集群管理。</p><h2 id="21-Hadoop的数据压缩"><a href="#21-Hadoop的数据压缩" class="headerlink" title="21.Hadoop的数据压缩"></a>21.Hadoop的数据压缩</h2><h3 id="21-1概述"><a href="#21-1概述" class="headerlink" title="21.1概述"></a>21.1概述</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686071085.png" alt="1661686071085"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686077793.png" alt="1661686077793"></p><h3 id="21-2MR支持的压缩编码"><a href="#21-2MR支持的压缩编码" class="headerlink" title="21.2MR支持的压缩编码"></a>21.2MR支持的压缩编码</h3><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>是，直接使用</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p>为了支持多种压缩&#x2F;解压缩算法，Hadoop引入了编码&#x2F;解码器，如下表所示。</p><table><thead><tr><th>压缩格式</th><th>对应的编码&#x2F;解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较</p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB&#x2F;s</td><td>58MB&#x2F;s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB&#x2F;s</td><td>9.5MB&#x2F;s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB&#x2F;s</td><td>74.6MB&#x2F;s</td></tr></tbody></table><h3 id="21-3压缩方式的选择"><a href="#21-3压缩方式的选择" class="headerlink" title="21.3压缩方式的选择"></a>21.3压缩方式的选择</h3><h4 id="21-3-1Gzip压缩"><a href="#21-3-1Gzip压缩" class="headerlink" title="21.3.1Gzip压缩"></a>21.3.1Gzip压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686251985.png" alt="1661686251985"></p><h4 id="21-3-2Bzip2压缩"><a href="#21-3-2Bzip2压缩" class="headerlink" title="21.3.2Bzip2压缩"></a>21.3.2Bzip2压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686270207.png" alt="1661686270207"></p><h4 id="21-3-3Lzo压缩"><a href="#21-3-3Lzo压缩" class="headerlink" title="21.3.3Lzo压缩"></a>21.3.3Lzo压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686290319.png" alt="1661686290319"></p><h4 id="21-3-4-Snappy压缩"><a href="#21-3-4-Snappy压缩" class="headerlink" title="21.3.4 Snappy压缩"></a>21.3.4 Snappy压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686312779.png" alt="1661686312779"></p><h3 id="21-4压缩位置选择"><a href="#21-4压缩位置选择" class="headerlink" title="21.4压缩位置选择"></a>21.4压缩位置选择</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686358694.png" alt="1661686358694"></p><h3 id="21-5压缩参数配置"><a href="#21-5压缩参数配置" class="headerlink" title="21.5压缩参数配置"></a>21.5压缩参数配置</h3><p>​要在Hadoop中启用压缩，可以配置如下参数：</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686428791.png" alt="1661686428791"></p><h2 id="22-Hadoop企业优化"><a href="#22-Hadoop企业优化" class="headerlink" title="22.Hadoop企业优化"></a>22.Hadoop企业优化</h2><h3 id="22-1MapReduce跑的慢的原因"><a href="#22-1MapReduce跑的慢的原因" class="headerlink" title="22.1MapReduce跑的慢的原因"></a>22.1MapReduce跑的慢的原因</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686500161.png" alt="1661686500161"></p><h3 id="22-2MapReduce优化方法"><a href="#22-2MapReduce优化方法" class="headerlink" title="22.2MapReduce优化方法"></a>22.2MapReduce优化方法</h3><p>​MapReduce优化方法主要从六个方面考虑：数据输入、Map阶段、Reduce阶段、IO传输、数据倾斜问题和常用的调优参数。</p><h4 id="22-2-1数据输入"><a href="#22-2-1数据输入" class="headerlink" title="22.2.1数据输入"></a>22.2.1数据输入</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686594807.png" alt="1661686594807"></p><h4 id="22-2-2Map阶段"><a href="#22-2-2Map阶段" class="headerlink" title="22.2.2Map阶段"></a>22.2.2Map阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686606515.png" alt="1661686606515"></p><h4 id="22-2-3-Reduce阶段"><a href="#22-2-3-Reduce阶段" class="headerlink" title="22.2.3 Reduce阶段"></a>22.2.3 Reduce阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686621134.png" alt="1661686621134"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686630210.png" alt="1661686630210"></p><h4 id="22-2-4IO阶段"><a href="#22-2-4IO阶段" class="headerlink" title="22.2.4IO阶段"></a>22.2.4IO阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686637490.png" alt="1661686637490"></p><h4 id="22-2-5数据倾斜问题"><a href="#22-2-5数据倾斜问题" class="headerlink" title="22.2.5数据倾斜问题"></a>22.2.5数据倾斜问题</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686653447.png" alt="1661686653447"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686661689.png" alt="1661686661689"></p><h3 id="22-3常用的调优参数"><a href="#22-3常用的调优参数" class="headerlink" title="22.3常用的调优参数"></a>22.3常用的调优参数</h3><p>（1）以下参数是在用户自己的MR应用程序中配置就可以生效（mapred-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.memory.mb</td><td>一个MapTask可使用的资源上限（单位:MB），默认为1024。如果MapTask实际使用的资源量超过该值，则会被强制杀死。</td></tr><tr><td>mapreduce.reduce.memory.mb</td><td>一个ReduceTask可使用的资源上限（单位:MB），默认为1024。如果ReduceTask实际使用的资源量超过该值，则会被强制杀死。</td></tr><tr><td>mapreduce.map.cpu.vcores</td><td>每个MapTask可使用的最多cpu core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.cpu.vcores</td><td>每个ReduceTask可使用的最多cpu   core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.shuffle.parallelcopies</td><td>每个Reduce去Map中取数据的并行数。默认值是5</td></tr><tr><td>mapreduce.reduce.shuffle.merge.percent</td><td>Buffer中的数据达到多少比例开始写入磁盘。默认值0.66</td></tr><tr><td>mapreduce.reduce.shuffle.input.buffer.percent</td><td>Buffer大小占Reduce可用内存的比例。默认值0.7</td></tr><tr><td>mapreduce.reduce.input.buffer.percent</td><td>指定多少比例的内存用来存放Buffer中的数据，默认值是0.0</td></tr></tbody></table><p>（2）应该在YARN启动之前就配置在服务器的配置文件中才能生效（yarn-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>yarn.scheduler.minimum-allocation-mb</td><td>给应用程序Container分配的最小内存，默认值：1024</td></tr><tr><td>yarn.scheduler.maximum-allocation-mb</td><td>给应用程序Container分配的最大内存，默认值：8192</td></tr><tr><td>yarn.scheduler.minimum-allocation-vcores</td><td>每个Container申请的最小CPU核数，默认值：1</td></tr><tr><td>yarn.scheduler.maximum-allocation-vcores</td><td>每个Container申请的最大CPU核数，默认值：32</td></tr><tr><td>yarn.nodemanager.resource.memory-mb</td><td>给Containers分配的最大物理内存，默认值：8192</td></tr></tbody></table><p>（3）Shuffle性能优化的关键参数，应在YARN启动之前就配置好（mapred-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.task.io.sort.mb</td><td>Shuffle的环形缓冲区大小，默认100m</td></tr><tr><td>mapreduce.map.sort.spill.percent</td><td>环形缓冲区溢出的阈值，默认80%</td></tr></tbody></table><p>容错相关配置</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.maxattempts</td><td>每个Map Task最大重试次数，一旦重试次数超过该值，则认为Map Task运行失败，默认值：4。</td></tr><tr><td>mapreduce.reduce.maxattempts</td><td>每个Reduce Task最大重试次数，一旦重试次数超过该值，则认为Map Task运行失败，默认值：4。</td></tr><tr><td>mapreduce.task.timeout</td><td>Task超时时间，经常需要设置的一个参数，该参数表达的意思为：如果一个Task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该Task处于Block状态，可能是卡住了，也许永远会卡住，为了防止因为用户程序永远Block住不退出，则强制设置了一个该超时时间（单位毫秒），默认是600000（10分钟）。如果你的程序对每条输入数据的处理时间过长（比如会访问数据库，通过网络拉取数据等），建议将该参数调大，该参数过小常出现的错误提示是：“AttemptID:attempt_14267829456721_123456_m_000224_0 Timed out after   300 secsContainer killed by the ApplicationMaster.”。</td></tr></tbody></table><h3 id="22-4Hadoop小文件优化方法"><a href="#22-4Hadoop小文件优化方法" class="headerlink" title="22.4Hadoop小文件优化方法"></a>22.4Hadoop小文件优化方法</h3><h4 id="22-4-1Hadoop小文件弊端"><a href="#22-4-1Hadoop小文件弊端" class="headerlink" title="22.4.1Hadoop小文件弊端"></a>22.4.1Hadoop小文件弊端</h4><p>​HDFS上每个文件都要在NameNode上创建对应的元数据，这个元数据的大小约为150byte，这样当小文件比较多的时候，就会产生很多的元数据文件，一方面会大量占用NameNode的内存空间，另一方面就是元数据文件过多，使得寻址索引速度变慢。</p><p>​小文件过多，在进行MR计算时，会生成过多切片，需要启动过多的MapTask。每个MapTask处理的数据量小，导致MapTask的处理时间比启动时间还小，白白消耗资源。</p><h4 id="22-4-2Hadoop小文件解决方法"><a href="#22-4-2Hadoop小文件解决方法" class="headerlink" title="22.4.2Hadoop小文件解决方法"></a>22.4.2Hadoop小文件解决方法</h4><ol><li><pre><code>  小文件优化的方向：</code></pre></li></ol><p>（1）在数据采集的时候，就将小文件或小批数据合成大文件再上传HDFS。</p><p>（2）在业务处理之前，在HDFS上使用MapReduce程序对小文件进行合并。</p><p>（3）在MapReduce处理时，可采用CombineTextInputFormat提高效率。</p><p>（4）开启uber模式，实现jvm重用</p><ol start="2"><li><pre><code>  Hadoop Archive</code></pre></li></ol><p>是一个高效的将小文件放入HDFS块中的文件存档工具，能够将多个小文件打包成一个HAR文件，从而达到减少NameNode的内存使用</p><ol start="3"><li><pre><code>  SequenceFile</code></pre></li></ol><p>SequenceFile是由一系列的二进制k&#x2F;v组成，如果为key为文件名，value为文件内容，可将大批小文件合并成一个大文件</p><ol start="4"><li><pre><code>  CombineTextInputFormat</code></pre></li></ol><p>CombineTextInputFormat用于将多个小文件在切片过程中生成一个单独的切片或者少量的切片。 </p><ol start="5"><li><pre><code>  开启uber模式，实现jvm重用。默认情况下，每个Task任务都需要启动一个jvm来运行，如果Task任务计算的数据量很小，我们可以让同一个Job的多个Task运行在一个Jvm中，不必为每个Task都开启一个Jvm.</code></pre></li></ol><p>开启uber模式，在mapred-site.xml中添加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  开启uber模式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.enable&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的mapTask数量，可向下修改  --&gt; </span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxmaps&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;9&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的reduce数量，可向下修改 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxreduces&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的输入数据量，默认使用dfs.blocksize 的值，可向下修改 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxbytes&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="23-Hadoop3-x的新特性"><a href="#23-Hadoop3-x的新特性" class="headerlink" title="23.Hadoop3.x的新特性"></a>23.Hadoop3.x的新特性</h2><h3 id="23-1多NN的HA架构"><a href="#23-1多NN的HA架构" class="headerlink" title="23.1多NN的HA架构"></a>23.1多NN的HA架构</h3><p>​ HDFS NameNode高可用性的初始实现为单个活动NameNode和单个备用NameNode，将edits复制到三个JournalNode。该体系结构能够容忍系统中一个NN或一个JN的故障。</p><p>​但是，某些部署需要更高程度的容错能力。Hadoop3.x允许用户运行多个备用NameNode。例如，通过配置三个NameNode和五个JournalNode，群集能够容忍两个节点而不是一个节点的故障。</p><h3 id="23-2纠删码"><a href="#23-2纠删码" class="headerlink" title="23.2纠删码"></a>23.2纠删码</h3><pre><code> HDFS中的默认3副本方案在存储空间和其他资源（例如，网络带宽）中具有200％的开销。但是，对于I / O活动相对较低暖和冷数据集，在正常操作期间很少访问其他块副本，但仍会消耗与第一个副本相同的资源量。</code></pre><p>​ 纠删码（Erasure Coding）能够在不到50% 的数据冗余情况下提供和3副本相同的容错能力，因此，使用纠删码作为副本机制的改进是自然而然的。</p><p>​查看集群支持的纠删码策略：hdfs ec -listPolicies</p><h2 id="24-Hadoop-HA高可用"><a href="#24-Hadoop-HA高可用" class="headerlink" title="24.Hadoop HA高可用"></a>24.Hadoop HA高可用</h2><h3 id="24-1概述"><a href="#24-1概述" class="headerlink" title="24.1概述"></a>24.1概述</h3><p>（1）所谓HA（High Availablity），即高可用（7*24小时不中断服务）。</p><p>（2）实现高可用最关键的策略是消除单点故障。HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA。</p><p>（3）Hadoop2.0之前，在HDFS集群中NameNode存在单点故障（SPOF）。</p><p>（4）NameNode主要在以下两个方面影响HDFS集群</p><p>​Ø  NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启</p><p>​Ø  NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</p><p>​</p><p>​HDFS HA功能通过配置Active&#x2F;Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</p><h3 id="24-2工作原理"><a href="#24-2工作原理" class="headerlink" title="24.2工作原理"></a>24.2工作原理</h3><p>1）元数据管理方式需要改变</p><p>​内存中各自保存一份元数据；</p><p>​Edits日志只有Active状态的NameNode节点可以做写操作；</p><p>​所有的NameNode都可以读取Edits；</p><p>​共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）；</p><p>2）需要一个状态管理功能模块</p><p>​实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</p><p>3）必须保证两个NameNode之间能够ssh无密码登录</p><p>4）隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务</p><h3 id="24-3HDFS-HA自动故障转移工作机制"><a href="#24-3HDFS-HA自动故障转移工作机制" class="headerlink" title="24.3HDFS-HA自动故障转移工作机制"></a>24.3HDFS-HA自动故障转移工作机制</h3><p>自动故障转移为HDFS部署增加了两个新组件：ZooKeeper和ZKFailoverController（ZKFC）进程，如图3-20所示。ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。HA的自动故障转移依赖于ZooKeeper的以下功能：</p><p><strong>1．故障检测</strong></p><p>集群中的每个NameNode在ZooKeeper中维护了一个会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。</p><p><strong>2．现役NameNode选择</strong></p><p>ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode。</p><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><p><strong>1）健康监测</strong></p><p>ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</p><p><strong>2）ZooKeeper会话管理</strong></p><p>当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。</p><p><strong>3）基于ZooKeeper的选择</strong></p><p>如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661687659347.png" alt="1661687659347"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MR </tag>
            
            <tag> HDFS </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell的一些基本用法</title>
      <link href="/2022/08/27/shell/shell/"/>
      <url>/2022/08/27/shell/shell/</url>
      
        <content type="html"><![CDATA[<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><h3 id="1-1基本规则"><a href="#1-1基本规则" class="headerlink" title="1.1基本规则"></a>1.1基本规则</h3><p>（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p><p>（2）等号两侧不能有空格</p><p>（3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。</p><p>（4）变量的值如果有空格，需要使用双引号或单引号括起来。</p><h3 id="1-2特殊变量"><a href="#1-2特殊变量" class="headerlink" title="1.2特殊变量"></a>1.2特殊变量</h3><h4 id="1-2-1-n"><a href="#1-2-1-n" class="headerlink" title="1.2.1$n"></a>1.2.1$n</h4><p>$n   （功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch parameter.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class="line">./parameter.sh  cls   xz</span><br></pre></td></tr></table></figure><h4 id="1-2-2"><a href="#1-2-2" class="headerlink" title="1.2.2 $#"></a>1.2.2 $#</h4><p>$#      （功能描述：获取所有输入参数个数，常用于循环）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line">echo $#</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class="line">parameter.sh cls xz </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="1-2-3-、"><a href="#1-2-3-、" class="headerlink" title="1.2.3 $* 、$@"></a>1.2.3 $* 、$@</h4><p>$*   （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p>$@  （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p><p> *<em>注意：如果想让$<em>和$@ 体现区别必须用双引号括起来才生效</em></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line">echo $#</span><br><span class="line">echo $*</span><br><span class="line">echo $@</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3</span><br><span class="line">parameter.sh  1   2</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>$*和$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数。</p><p>当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数。</p><h4 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2.4 $?"></a>1.2.4 $?</h4><p>$？  （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ ./helloworld.sh </span><br><span class="line">hello world</span><br><span class="line">[atguigu@hadoop101 datas]$ echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="2-条件判断"><a href="#2-条件判断" class="headerlink" title="2.条件判断"></a>2.条件判断</h2><p>（1）两个整数之间比较</p><p>&#x3D;&#x3D; 字符串比较</p><p>-lt 小于（less than）                  -le 小于等于（less equal）</p><p>-eq 等于（equal）                     -gt 大于（greater than）</p><p>-ge 大于等于（greater equal）   -ne 不等于（Not equal）</p><p>（2）按照文件权限进行判断</p><p>-r 有读的权限（read）              -w 有写的权限（write）</p><p>-x 有执行的权限（execute）</p><p>（3）按照文件类型进行判断</p><p>-f 文件存在并且是一个常规的文件（file）</p><p>-e 文件存在（existence）          -d 文件存在并是一个目录（directory）</p><h2 id="3-流程判断"><a href="#3-流程判断" class="headerlink" title="3.流程判断"></a>3.流程判断</h2><h3 id="3-1if判断"><a href="#3-1if判断" class="headerlink" title="3.1if判断"></a>3.1if判断</h3><p>输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch if.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim if.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $1 -eq &quot;1&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;banzhang zhen shuai&quot;</span><br><span class="line">elif [ $1 -eq &quot;2&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;cls zhen mei&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 if.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ ./if.sh 1</span><br><span class="line">banzhang zhen shuai</span><br></pre></td></tr></table></figure><h3 id="3-2-case语句"><a href="#3-2-case语句" class="headerlink" title="3.2 case语句"></a>3.2 case语句</h3><p>输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出renyao。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch case.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim case.sh</span><br><span class="line"></span><br><span class="line">!/bin/bash</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;banzhang&quot;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;cls&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">        echo &quot;renyao&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 case.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ ./case.sh 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="3-3-for循环"><a href="#3-3-for循环" class="headerlink" title="3.3 for循环"></a>3.3 for循环</h3><p>从1加到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!bin/bash</span></span><br><span class="line"></span><br><span class="line">s=0</span><br><span class="line">for((i=0;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">s=$[$s+$i]</span><br><span class="line">done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch for2.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim for2.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印数字</span></span><br><span class="line"></span><br><span class="line">for i in $*</span><br><span class="line">    do</span><br><span class="line">      echo &quot;ban zhang love $i &quot;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 for2.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ bash for2.sh cls xz bd</span><br><span class="line">ban zhang love cls</span><br><span class="line">ban zhang love xz</span><br><span class="line">ban zhang love bd</span><br></pre></td></tr></table></figure><h3 id="3-4-while循环"><a href="#3-4-while循环" class="headerlink" title="3.4 while循环"></a>3.4 while循环</h3><p>从1加到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch while.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim while.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">s=0</span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">        s=$[$s+$i]</span><br><span class="line">        i=$[$i+1]</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $s</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 while.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ ./while.sh </span><br><span class="line">5050</span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1-basename"><a href="#4-1-basename" class="headerlink" title="4.1 basename"></a>4.1 basename</h3><p>该函数的作用就是用来获取某一个路径下文件的名字，其实就是把最后一个&#x2F;字符后的字符串显示出来。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt </span><br><span class="line">banzhang.txt</span><br><span class="line">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt</span><br><span class="line">banzhang</span><br></pre></td></tr></table></figure><h3 id="4-2-dirname"><a href="#4-2-dirname" class="headerlink" title="4.2 dirname"></a>4.2 dirname</h3><p>  dirname 文件绝对路径       （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt </span><br><span class="line">/home/atguigu</span><br></pre></td></tr></table></figure><h2 id="5-shell工具"><a href="#5-shell工具" class="headerlink" title="5.shell工具"></a>5.shell工具</h2><h3 id="5-1-cut"><a href="#5-1-cut" class="headerlink" title="5.1 cut"></a>5.1 cut</h3><p>​cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><p>cut [选项参数]  filename</p><p>说明：默认分隔符是制表符</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>列号，提取第几列</td></tr><tr><td>-d</td><td>分隔符，按照指定分隔符分割列</td></tr><tr><td>-c</td><td>指定具体的字符</td></tr></tbody></table><p>（1）数据准备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch cut.txt</span><br><span class="line">[atguigu@hadoop101 datas]$ vim cut.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo  wo</span><br><span class="line">lai  lai</span><br><span class="line">le  le</span><br></pre></td></tr></table></figure><p>（2）切割cut.txt第一列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cut -d &quot; &quot; -f 1 cut.txt </span><br><span class="line">dong</span><br><span class="line">guan</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br></pre></td></tr></table></figure><p>（3）切割cut.txt第二、三列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cut -d &quot; &quot; -f 2,3 cut.txt </span><br><span class="line">shen</span><br><span class="line">zhen</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br></pre></td></tr></table></figure><p>（4）在cut.txt文件中切割出guan</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cat cut.txt | grep &quot;guan&quot; | cut -d &quot; &quot; -f 1</span><br><span class="line"></span><br><span class="line">guan</span><br></pre></td></tr></table></figure><p>（5）选取系统PATH变量值，第2个“：”开始后的所有路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ echo $PATH</span><br><span class="line">/usr/lib64/qt3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br><span class="line">[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 2-</span><br><span class="line">/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br></pre></td></tr></table></figure><h3 id="5-2-awk"><a href="#5-2-awk" class="headerlink" title="5.2 awk"></a>5.2 awk</h3><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><p>awk [选项参数] ‘pattern1{action1}  pattern2{action2}…’ filename</p><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>action：在找到匹配内容时所执行的一系列命令</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件折分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><p>（1）数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ sudo cp /etc/passwd ./</span><br></pre></td></tr></table></figure><p>（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $7&#125;&#x27; passwd </span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>（3）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd </span><br><span class="line"></span><br><span class="line">root,/bin/bash</span><br></pre></td></tr></table></figure><p>注意：只有匹配了pattern的行才会执行action</p><p>（4）只显示&#x2F;etc&#x2F;passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加”dahaige，&#x2F;bin&#x2F;zuishuai”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class="line">user, shell</span><br><span class="line">root,/bin/bash</span><br><span class="line">bin,/sbin/nologin</span><br><span class="line">atguigu,/bin/bash</span><br><span class="line">dahaige,/bin/zuishuai</span><br></pre></td></tr></table></figure><p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p><p>（5）将passwd文件中的用户id增加数值1并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -v i=1 -F: &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读的记录数（行数）</td></tr><tr><td>NF</td><td>浏览记录的域的个数（切割后，列的个数）</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;&#123;print &quot;filename:&quot;  FILENAME &quot;, linenumber:&quot; NR  &quot;,columns:&quot; NF&#125;&#x27; passwd </span><br><span class="line">filename:passwd, linenumber:1,columns:7</span><br><span class="line">filename:passwd, linenumber:2,columns:7</span><br><span class="line">filename:passwd, linenumber:3,columns:7</span><br></pre></td></tr></table></figure><p>查询cut.txt中空行所在的行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk &#x27;/^$/&#123;print NR&#125;&#x27; cut.txt </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="5-3-sort"><a href="#5-3-sort" class="headerlink" title="5.3 sort"></a>5.3 sort</h3><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p>（1）数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ touch sort.sh</span><br><span class="line">[atguigu@hadoop102 datas]$ vim sort.sh </span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">xz:50:2.3</span><br><span class="line">cls:10:3.5</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><p>（2）按照“：”分割后的第三列倒序排序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh </span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">cls:10:3.5</span><br><span class="line">xz:50:2.3</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><h2 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6.正则表达式"></a>6.正则表达式</h2><p><strong>^</strong></p><p>该字符匹配一行的开头，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep ^a</span><br></pre></td></tr></table></figure><p>会匹配所以以a开头的行</p><p><strong>$</strong></p><p>该字符匹配一行的结束，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep t$</span><br></pre></td></tr></table></figure><p>会匹配出所有以t结尾的行</p><p><strong>^$同时出现代表匹配空行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | grep -v &quot;^$&quot;  //这句话表示过滤test.txt文件内容中的所有空格并输出其他内容</span><br></pre></td></tr></table></figure><p><strong>.</strong></p><p>该字符匹配一个任意的字符，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep r..t</span><br></pre></td></tr></table></figure><p>会匹配包含rabt,rbbt,rxdt,root等的所有行</p><p><strong>*</strong></p><p>* 不单独使用，他和左边第一个字符连用，表示匹配上一个字符0次或多次，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep ro*t</span><br></pre></td></tr></table></figure><p>会匹配rt, rot, root, rooot, roooot等所有行</p><p>.*代表任意字符串</p><p><strong>[]</strong></p><p>[ ] 表示匹配某个范围内的一个字符，例如</p><p>[6,8]——匹配6或者8</p><p>[a-z]——匹配一个a-z之间的字符</p><p>[a-z]*—–匹配任意字母字符串</p><p>[a-c, e-f]-匹配a-c或者e-f之间的任意字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep r[a,b,c]*t</span><br></pre></td></tr></table></figure><p>会匹配rat, rbt, rabt, rbact等等所有行</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
            <tag> awk </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-帮助指令"><a href="#1-帮助指令" class="headerlink" title="1.帮助指令"></a>1.帮助指令</h2><h3 id="1-1-man-获得帮助信息"><a href="#1-1-man-获得帮助信息" class="headerlink" title="1.1 man 获得帮助信息"></a>1.1 man 获得帮助信息</h3><p><strong>基本用法</strong></p><p>man [命令或者配置文件]</p><p><strong>显示说明</strong></p><table><thead><tr><th>信息</th><th>功能</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的深入讨论</td></tr><tr><td>EXAMPLES</td><td>怎样使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题（通常是手册页）</td></tr></tbody></table><p><strong>实例操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="1-2-help获得shell内置命令的帮助信息"><a href="#1-2-help获得shell内置命令的帮助信息" class="headerlink" title="1.2 help获得shell内置命令的帮助信息"></a>1.2 help获得shell内置命令的帮助信息</h3><p><strong>基本语法</strong></p><p>help  命令</p><h3 id="1-3-常用快捷键"><a href="#1-3-常用快捷键" class="headerlink" title="1.3 常用快捷键"></a>1.3 常用快捷键</h3><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏；彻底清屏是：reset</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr><tr><td>ctrl +alt</td><td>linux和Windows之间切换</td></tr></tbody></table><h2 id="2-文件目录类"><a href="#2-文件目录类" class="headerlink" title="2.文件目录类"></a>2.文件目录类</h2><p>自己熟悉的一些指令就不再整理，记录一些自己没有掌握的指令</p><h3 id="2-1more-文件内容分屏查看器"><a href="#2-1more-文件内容分屏查看器" class="headerlink" title="2.1more 文件内容分屏查看器"></a>2.1more 文件内容分屏查看器</h3><p>​more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明。</p><p><strong>基本用法</strong></p><p>more 要查看的文件</p><p><strong>操作说明</strong></p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>&#x3D;</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h3 id="2-2-less-分屏显示文件内容"><a href="#2-2-less-分屏显示文件内容" class="headerlink" title="2.2 less 分屏显示文件内容"></a>2.2 less 分屏显示文件内容</h3><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p><strong>基本用法</strong></p><p>less 要查看的文件</p><p><strong>操作用法</strong></p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻动一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>&#x2F;字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr><tr><td>q</td><td>离开 less 这个程序；</td></tr></tbody></table><h3 id="2-3-gt-输出重定向和-gt-gt-追加"><a href="#2-3-gt-输出重定向和-gt-gt-追加" class="headerlink" title="2.3 &gt; 输出重定向和 &gt;&gt; 追加"></a>2.3 &gt; 输出重定向和 &gt;&gt; 追加</h3><p><strong>基本语法:</strong></p><ol><li>ls -l &gt; 文件   （功能描述：把查询出来的列表内容写入到文件中去，覆盖写）</li><li>ls -al  &gt;&gt; 文件   （功能描述：把查询出来的列表内容写入到文件中去，追加写）</li><li>cat 文件1 &gt; 文件2     （功能描述：将文件1的内容覆盖到文件2）</li></ol><h3 id="2-4-history-查看以及执行过的历史命令"><a href="#2-4-history-查看以及执行过的历史命令" class="headerlink" title="2.4 history 查看以及执行过的历史命令"></a>2.4 history 查看以及执行过的历史命令</h3><p><strong>基本语法</strong>:</p><p>history</p><h2 id="3-时间日期类"><a href="#3-时间日期类" class="headerlink" title="3.时间日期类"></a>3.时间日期类</h2><h3 id="3-1date显示当前时间"><a href="#3-1date显示当前时间" class="headerlink" title="3.1date显示当前时间"></a>3.1date显示当前时间</h3><p><strong>基本用法：</strong></p><ul><li>date                                                       （功能描述：显示当前时间）</li><li>date +%Y                                               （功能描述：显示当前年份）</li><li>date +%m                                              （功能描述：显示当前月份）</li><li>date +%d                                               （功能描述：显示当前是哪一天）</li><li>date “+%Y-%m-%d %H:%M:%S”         （功能描述：显示年月日时分秒）</li></ul><h3 id="3-2date显示非当前时间"><a href="#3-2date显示非当前时间" class="headerlink" title="3.2date显示非当前时间"></a>3.2date显示非当前时间</h3><p><strong>基本用法：</strong></p><ul><li>date -d ‘1 days ago’               （功能描述：显示前一天时间）</li><li>date -d ‘-1 days ago’               （功能描述：显示后一天时间）</li></ul><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661590484981.png" alt="1661590484981"></p><h3 id="3-3date设置系统时间"><a href="#3-3date设置系统时间" class="headerlink" title="3.3date设置系统时间"></a>3.3date设置系统时间</h3><p><strong>基本用法：</strong> </p><p>date -s 字符串时间</p><h3 id="3-4-cal查看日历"><a href="#3-4-cal查看日历" class="headerlink" title="3.4 cal查看日历"></a>3.4 cal查看日历</h3><p>基本用法：</p><ul><li>cal</li><li>cal   时间</li></ul><h2 id="4-用户管理命令"><a href="#4-用户管理命令" class="headerlink" title="4.用户管理命令"></a>4.用户管理命令</h2><h3 id="4-1-useradd添加新用户"><a href="#4-1-useradd添加新用户" class="headerlink" title="4.1 useradd添加新用户"></a>4.1 useradd添加新用户</h3><p><strong>基本用法：</strong></p><ul><li>useradd 用户名                   （功能描述：添加新用户）</li><li>useradd -g 组名 用户名      （功能描述：添加新用户到某个组）</li></ul><h3 id="4-2-passwd设置用户密码"><a href="#4-2-passwd设置用户密码" class="headerlink" title="4.2 passwd设置用户密码"></a>4.2 passwd设置用户密码</h3><p><strong>基本用法：</strong></p><p>​passwd 用户名     （功能描述：设置用户密码）</p><h3 id="4-3-su-切换用户"><a href="#4-3-su-切换用户" class="headerlink" title="4.3 su 切换用户"></a>4.3 su 切换用户</h3><p><strong>基本用法</strong></p><ul><li>su 用户名称   （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量）</li><li>su - 用户名称       （功能描述：切换到用户并获得该用户的环境变量及执行权限）</li></ul><h3 id="4-4userdel删除用户"><a href="#4-4userdel删除用户" class="headerlink" title="4.4userdel删除用户"></a>4.4userdel删除用户</h3><p><strong>基本用法</strong></p><ul><li>userdel  用户名         （功能描述：删除用户但保存用户主目录）</li><li>userdel -r 用户名       （功能描述：用户和用户主目录，都删除）</li></ul><h3 id="4-5-who-查看登录用户信息"><a href="#4-5-who-查看登录用户信息" class="headerlink" title="4.5 who 查看登录用户信息"></a>4.5 who 查看登录用户信息</h3><p><strong>基本用法</strong></p><ul><li>whoami                （功能描述：显示自身用户名称）</li><li>who am i             （功能描述：显示登录用户的用户名以及登陆时间）</li></ul><h3 id="4-6-sudo-设置普通用户具有root权限"><a href="#4-6-sudo-设置普通用户具有root权限" class="headerlink" title="4.6 sudo 设置普通用户具有root权限"></a>4.6 sudo 设置普通用户具有root权限</h3><p>（1）修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;sudoers 文件，找到下面一行(91行)，在root下面添加一行，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root       ALL=(ALL)     ALL</span><br><span class="line">用户名   ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>或者配置成采用sudo命令时，不需要输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root       ALL=(ALL)     ALL</span><br><span class="line">用户名   ALL=(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>修改完毕，现在可以用此用户登录，然后用命令 sudo ，即可获得root权限进行</p><h2 id="5-用户组管理命令"><a href="#5-用户组管理命令" class="headerlink" title="5.用户组管理命令"></a>5.用户组管理命令</h2><p>​每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，</p><p>​如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>​用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><h3 id="5-1groupdel删除组"><a href="#5-1groupdel删除组" class="headerlink" title="5.1groupdel删除组"></a>5.1groupdel删除组</h3><p><strong>基本用法</strong></p><p>​groupdel 组名</p><h3 id="5-2-groupadd增加组"><a href="#5-2-groupadd增加组" class="headerlink" title="5.2 groupadd增加组"></a>5.2 groupadd增加组</h3><p><strong>基本用法</strong></p><p>​groupadd组名</p><h3 id="5-3-groupmod-修改组"><a href="#5-3-groupmod-修改组" class="headerlink" title="5.3 groupmod 修改组"></a>5.3 groupmod 修改组</h3><p><strong>基本用法：</strong></p><p>​groupmod -n 新组名 老组名</p><h2 id="6-文件权限类"><a href="#6-文件权限类" class="headerlink" title="6.文件权限类"></a>6.文件权限类</h2><h3 id="6-1文件属性"><a href="#6-1文件属性" class="headerlink" title="6.1文件属性"></a>6.1文件属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在Linux中我们可以使用ll或者ls -l命令来显示一个文件的属性以及文件所属的用户和组。</p><p><strong>从左到右的10个字符表示，如下所示</strong></p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661591332772.png" alt="1661591332772"></p><p>（1）0首位表示类型</p><p>​在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>​<strong>- 代表文件</strong></p><p>​ <strong>d 代表目录</strong></p><p>​ <strong>l 链接文档(link file)；</strong></p><p>（2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p><p>（3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p><p>（4）第7-9位确定其他用户拥有该文件的权限 —Other</p><p><strong>rxw作用文件和目录的不同解释</strong></p><p>（1）作用到文件：</p><p>​[ r ]代表可读(read): 可以读取，查看</p><p>​[ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</p><p>​[ x ]代表可执行(execute):可以被系统执行</p><p>（2）作用到目录：</p><p>​[ r ]代表可读(read): 可以读取，ls查看目录内容</p><p>​[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>​[ x ]代表可执行(execute):可以进入该目录</p><h3 id="6-2chmod改变权限"><a href="#6-2chmod改变权限" class="headerlink" title="6.2chmod改变权限"></a>6.2chmod改变权限</h3><p>有两种改变权限的方式</p><p><strong>第一种:</strong></p><p>​chown  [{ugoa}{+-&#x3D;}{rwx}] 文件或目录</p><p>​u 就是当前用户 g是当前用户组  o是其它用户 a是所有</p><p>​使用案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x houge.txt</span><br></pre></td></tr></table></figure><p><strong>第二种（较为常用）：</strong></p><p>​例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 777 a.txt</span><br></pre></td></tr></table></figure><p>​r&#x3D;4 w&#x3D;2 x&#x3D;1        rwx&#x3D;4+2+1&#x3D;7</p><p>​上述这个777代表用户组 用户 其它用户对于该文件都有读、写、执行权限</p><h3 id="6-3-chown改变所有者"><a href="#6-3-chown改变所有者" class="headerlink" title="6.3 chown改变所有者"></a>6.3 chown改变所有者</h3><p><strong>基本用法：</strong></p><p>​chown [选项] [最终用户] [文件或目录]            （功能描述：改变文件或者目录的所有者）</p><p><strong>选项说明：</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><h3 id="6-4-chgrp改变用户所属组"><a href="#6-4-chgrp改变用户所属组" class="headerlink" title="6.4 chgrp改变用户所属组"></a>6.4 chgrp改变用户所属组</h3><p><strong>基本用法：</strong></p><p>​chgrp [最终用户组] [文件或目录]      （功能描述：改变文件或者目录的所属组）</p><h2 id="7-搜索查找类"><a href="#7-搜索查找类" class="headerlink" title="7.搜索查找类"></a>7.搜索查找类</h2><h3 id="7-1find查找问而建或目录"><a href="#7-1find查找问而建或目录" class="headerlink" title="7.1find查找问而建或目录"></a>7.1find查找问而建或目录</h3><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p><p><strong>基本用法</strong></p><p>​find [搜索范围] [选项]</p><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件,单位为:    <strong>b</strong> —— 块（512字节）   <strong>c</strong> —— 字节   <strong>w</strong> —— 字（2字节）   <strong>k</strong> —— 千字节   <strong>M</strong> —— 兆字节   <strong>G</strong> —— 吉字节</td></tr></tbody></table><p><strong>案例实操</strong></p><p>按文件大小：在&#x2F;home目录下查找大于200m的文件（+n 大于  -n小于   n等于）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -size +204800</span><br></pre></td></tr></table></figure><h3 id="7-2-grep-过滤查找以及“-”管道符"><a href="#7-2-grep-过滤查找以及“-”管道符" class="headerlink" title="7.2 grep 过滤查找以及“|”管道符"></a>7.2 grep 过滤查找以及“|”管道符</h3><p>​管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p><p><strong>基本语法</strong></p><p>​grep 选项 查找内容 源文件</p><h2 id="8-压缩和解压类"><a href="#8-压缩和解压类" class="headerlink" title="8.压缩和解压类"></a>8.压缩和解压类</h2><h3 id="8-1gzip-x2F-gunzip压缩"><a href="#8-1gzip-x2F-gunzip压缩" class="headerlink" title="8.1gzip&#x2F;gunzip压缩"></a>8.1gzip&#x2F;gunzip压缩</h3><p><strong>基本用法</strong></p><ul><li>gzip 文件             （功能描述：压缩文件，只能将文件压缩为*.gz文件）</li><li>gunzip 文件.gz     （功能描述：解压缩文件命令）</li></ul><p><strong>详细说明</strong></p><p>（1）只能压缩文件不能压缩目录</p><p>（2）不保留原来的文件</p><p>（3）同时多个文件会产生多个压缩包</p><h3 id="8-2-zip-x2F-unzip压缩"><a href="#8-2-zip-x2F-unzip压缩" class="headerlink" title="8.2 zip&#x2F;unzip压缩"></a>8.2 zip&#x2F;unzip压缩</h3><p><strong>基本用法</strong></p><ul><li>zip  [选项] XXX.zip  将要压缩的内容           （功能描述：压缩文件和目录的命令）</li><li>unzip [选项] XXX.zip                                      （功能描述：解压缩文件）</li></ul><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip选项</th><th>功能</th></tr></thead><tbody><tr><td>-d&lt;目录&gt;</td><td>指定解压后文件的存放目录</td></tr></tbody></table><h3 id="8-3-tar打包"><a href="#8-3-tar打包" class="headerlink" title="8.3 tar打包"></a>8.3 tar打包</h3><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p><strong>案例实操</strong></p><p>（1）压缩多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 opt]# tar -zcvf houma.tar.gz houge.txt bailongma.txt </span><br><span class="line">houge.txt</span><br><span class="line">bailongma.txt</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houma.tar.gz houge.txt bailongma.txt </span><br></pre></td></tr></table></figure><p>（2）压缩目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zcvf xiyou.tar.gz xiyou/</span><br><span class="line">xiyou/</span><br><span class="line">xiyou/mingjie/</span><br><span class="line">xiyou/dssz/</span><br><span class="line">xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure><p>（3）解压到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf xiyou.tar.gz -C /opt</span><br><span class="line">[root@hadoop101 ~]# ll /opt/</span><br></pre></td></tr></table></figure><h2 id="9-磁盘分区类"><a href="#9-磁盘分区类" class="headerlink" title="9.磁盘分区类"></a>9.磁盘分区类</h2><h3 id="9-1df-查看磁盘空间使用情况"><a href="#9-1df-查看磁盘空间使用情况" class="headerlink" title="9.1df 查看磁盘空间使用情况"></a>9.1df 查看磁盘空间使用情况</h3><p><strong>常用指令</strong></p><p>df -h</p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661594172359.png" alt="1661594172359"></p><h3 id="9-2fdisk查看分区"><a href="#9-2fdisk查看分区" class="headerlink" title="9.2fdisk查看分区"></a>9.2fdisk查看分区</h3><p>fdisk -l                  （功能描述：查看磁盘分区详情）</p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661594255981.png" alt="1661594255981"></p><h3 id="9-3-mount-x2F-umount-挂载-x2F-卸载"><a href="#9-3-mount-x2F-umount-挂载-x2F-卸载" class="headerlink" title="9.3 mount&#x2F;umount 挂载&#x2F;卸载"></a>9.3 mount&#x2F;umount 挂载&#x2F;卸载</h3><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。</p><p>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p><h2 id="10-进程线程类"><a href="#10-进程线程类" class="headerlink" title="10.进程线程类"></a>10.进程线程类</h2><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><h3 id="10-1-ps查看当前系统进程状态"><a href="#10-1-ps查看当前系统进程状态" class="headerlink" title="10.1 ps查看当前系统进程状态"></a>10.1 ps查看当前系统进程状态</h3><p>基本指令</p><ul><li>ps -aux | grep xxx          （功能描述：查看系统中所有进程）</li><li>ps -ef | grep xxx           （功能描述：可以查看子父进程之间的关系）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>选择所有进程</td></tr><tr><td>-u</td><td>显示所有用户的所有进程</td></tr><tr><td>-x</td><td>显示没有终端的进程</td></tr></tbody></table><h3 id="10-2-kill终止进程"><a href="#10-2-kill终止进程" class="headerlink" title="10.2 kill终止进程"></a>10.2 kill终止进程</h3><ul><li>kill  [选项] 进程号            （功能描述：通过进程号杀死进程）</li><li>killall 进程名称                  （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table><h3 id="10-3-pstree-查看进程树"><a href="#10-3-pstree-查看进程树" class="headerlink" title="10.3 pstree 查看进程树"></a>10.3 pstree 查看进程树</h3><p>pstree [选项]</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>显示进程的PID</td></tr><tr><td>-u</td><td>显示进程的所属用户</td></tr></tbody></table><h3 id="10-4-top查看系统健康状态"><a href="#10-4-top查看系统健康状态" class="headerlink" title="10.4 top查看系统健康状态"></a>10.4 top查看系统健康状态</h3><p>top [选项]</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令：</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程。</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态。</td></tr></tbody></table><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 atguigu]# top -d 1</span><br><span class="line">[root@hadoop101 atguigu]# top -i</span><br><span class="line">[root@hadoop101 atguigu]# top -p 2575</span><br></pre></td></tr></table></figure><p>执行上述命令后，可以按P、M、N对查询出的进程结果进行排序。</p><h3 id="10-5-netstat-显示网络统计信息和端口占用情况"><a href="#10-5-netstat-显示网络统计信息和端口占用情况" class="headerlink" title="10.5 netstat 显示网络统计信息和端口占用情况"></a>10.5 netstat 显示网络统计信息和端口占用情况</h3><ul><li>netstat -anp | grep 进程号     （功能描述：查看该进程网络信息）</li><li>netstat –nlp | grep 端口号     （功能描述：查看网络端口号占用情况）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出有在listen（监听）的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><h2 id="11-RPM"><a href="#11-RPM" class="headerlink" title="11.RPM"></a>11.RPM</h2><h3 id="11-1RPM概述"><a href="#11-1RPM概述" class="headerlink" title="11.1RPM概述"></a>11.1RPM概述</h3><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe</p><p> 是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</p><p>RPM包的名称格式</p><p>Apache-1.3.23-11.i386.rpm</p><p>-        “apache” 软件名称</p><p>-        “1.3.23-11”软件的版本号，主版本和此版本</p><p>-        “i386”是软件所运行的硬件平台，Intel 32位处理器的统称</p><p>-        “rpm”文件扩展名，代表RPM包</p><h3 id="11-2RPM查询命令（rpm-qa）"><a href="#11-2RPM查询命令（rpm-qa）" class="headerlink" title="11.2RPM查询命令（rpm -qa）"></a>11.2RPM查询命令（rpm -qa）</h3><p>rpm -qa                        （功能描述：查询所安装的所有rpm软件包）</p><p>由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包</p><h3 id="11-3RPM卸载命令（rpm-e）"><a href="#11-3RPM卸载命令（rpm-e）" class="headerlink" title="11.3RPM卸载命令（rpm -e）"></a>11.3RPM卸载命令（rpm -e）</h3><p>（1）rpm -e RPM软件包   </p><p>（2） rpm -e –nodeps 软件包  </p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table><h3 id="11-4RPM安装命令（rpm-ivh）"><a href="#11-4RPM安装命令（rpm-ivh）" class="headerlink" title="11.4RPM安装命令（rpm -ivh）"></a>11.4RPM安装命令（rpm -ivh）</h3><p>rpm -ivh RPM包全名</p><table><thead><tr><th>-i</th><th>-i&#x3D;install，安装</th></tr></thead><tbody><tr><td>-v</td><td>-v&#x3D;verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h&#x3D;hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置以及系统管理操作</title>
      <link href="/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-修改静态IP地址"><a href="#1-修改静态IP地址" class="headerlink" title="1.修改静态IP地址"></a>1.修改静态IP地址</h2><p>查看IP配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/1661588159742.png" alt="1661588159742"></p><p>修改完配置文件之后执行service network restart 重启网络然后就修改成功</p><h2 id="2-修改主机名称"><a href="#2-修改主机名称" class="headerlink" title="2.修改主机名称"></a>2.修改主机名称</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><p>修改完成之后需要重启电脑才能生效</p><h2 id="3-修改hosts映射文件"><a href="#3-修改hosts映射文件" class="headerlink" title="3.修改hosts映射文件"></a>3.修改hosts映射文件</h2><h3 id="3-1修改Linux的映射文件"><a href="#3-1修改Linux的映射文件" class="headerlink" title="3.1修改Linux的映射文件"></a>3.1修改Linux的映射文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加如下内容即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.100 hadoop100</span><br><span class="line">192.168.2.101 hadoop101</span><br><span class="line">192.168.2.102 hadoop102</span><br><span class="line">192.168.2.103 hadoop103</span><br><span class="line">192.168.2.104 hadoop104</span><br><span class="line">192.168.2.105 hadoop105</span><br></pre></td></tr></table></figure><h3 id="3-2修改Windows的主机映射文件"><a href="#3-2修改Windows的主机映射文件" class="headerlink" title="3.2修改Windows的主机映射文件"></a>3.2修改Windows的主机映射文件</h3><p>（1）进入C:\Windows\System32\drivers\etc路径</p><p>（2）拷贝hosts文件到桌面</p><p>（3）打开桌面hosts文件并添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.100 hadoop100</span><br><span class="line">192.168.2.101 hadoop101</span><br><span class="line">192.168.2.102 hadoop102</span><br><span class="line">192.168.2.103 hadoop103</span><br><span class="line">192.168.2.104 hadoop104</span><br><span class="line">192.168.2.105 hadoop105</span><br></pre></td></tr></table></figure><p>（4）将桌面hosts文件覆盖C:\Windows\System32\drivers\etc路径hosts文件</p><h2 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4.关闭防火墙"></a>4.关闭防火墙</h2><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start|stop|restart|status  服务名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable service_name  （功能描述：关掉指定服务的自动启动）</span><br><span class="line">systemctl enable service_name   （功能描述：开启指定服务的自动启动）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 静态IP </tag>
            
            <tag> 修改windos主机映射 </tag>
            
            <tag> 关闭防火墙 </tag>
            
            <tag> systemctl指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-VIM编辑器是什么"><a href="#1-VIM编辑器是什么" class="headerlink" title="1.VIM编辑器是什么"></a>1.VIM编辑器是什么</h2><p>VI是Unix操作系统和类Unix操作系统中最通用的文本编辑器。</p><p>VIM编辑器是从VI发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。VIM与VI编辑器完全兼容。</p><h2 id="2-VIM编辑器的三种模式的切换"><a href="#2-VIM编辑器的三种模式的切换" class="headerlink" title="2.VIM编辑器的三种模式的切换"></a>2.VIM编辑器的三种模式的切换</h2><p><img src="/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/1661585762482.png" alt="1661585762482"></p><p>主要包括三种模式：一般模式、编辑模式、命令模式</p><p>一般模式就是进入一个文件的状态，然后我们可以按i、a、o进入编辑模式，在编辑模式下可以操作文件内容，然后使用ESC进入一般模式，一般模式下使用：可以进入命令模式，在命令模式下我们可以对文件进行保存更改等</p><h2 id="3-一般模式下常用命令"><a href="#3-一般模式下常用命令" class="headerlink" title="3.一般模式下常用命令"></a>3.一般模式下常用命令</h2><p>以vi打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，<br>你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数据。</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td>p</td><td>箭头移动到目的行粘贴</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td>x</td><td>剪切一个字母，相当于del</td></tr><tr><td>X</td><td>剪切一个字母，相当于Backspace</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>shift+6（^）</td><td>移动到行头</td></tr><tr><td>shift+4 （$）</td><td>移动到行尾</td></tr><tr><td>1+shift+g</td><td>移动到页头，数字</td></tr><tr><td>shift+g</td><td>移动到页尾</td></tr><tr><td>数字+shift+g</td><td>移动到目标行</td></tr></tbody></table><h2 id="4-编辑模式"><a href="#4-编辑模式" class="headerlink" title="4.编辑模式"></a>4.编辑模式</h2><p>在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要等到你按下『i, I, o, O, a, A』等任何一个字母之后才会进入编辑模式。</p><p>注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。</p><h2 id="5-指令模式"><a href="#5-指令模式" class="headerlink" title="5.指令模式"></a>5.指令模式</h2><p>在一般模式当中，输入『 : &#x2F; ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。</p><p>在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>&#x2F;要查找的词</td><td>n 查找下一个，N 往上查找</td></tr><tr><td>:noh</td><td>取消高亮显示</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>:%s&#x2F;old&#x2F;new&#x2F;g</td><td>替换内容   &#x2F;g就是把找到的老的字符全部匹配成新的字符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VIM </tag>
            
            <tag> VI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>在Linux中万物皆是文件</p><p>其目录结构如下图所示：</p><p><img src="/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/1661584969351.png" alt="1661584969351"></p><p>其目录结构简介如下：</p><ul><li><p>&#x2F;bin</p><p>是Binary的缩写，这个目录下存放着最经常使用的命令</p></li><li><p>&#x2F;sbin</p><p>s 就是Super User的意思，这里存放的是系统管理员所使用的系统管理程序</p></li><li><p>&#x2F;home</p><p>存放普通用户的主目录，在Linux中每一个用户都有自己的一个目录，一般这个目录名就是此用户的账号名字</p></li><li><p>&#x2F;root</p><p>该目录就是系统管理员，也称为超级权限者的用户主目录</p></li><li><p>&#x2F;etc</p><p>所有的系统管理所需要的配置文件和子目录</p></li><li><p>&#x2F;usr</p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files文件夹</p></li><li><p>&#x2F;boot</p><p>这里存放的是启动Linux的一些核心文件，包括一些连接文件以及镜像文件，自己的安装不要放在此目录下</p></li><li><p>&#x2F;mnt</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载到&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里面的内容了</p></li><li><p>&#x2F;opt</p><p>这是给主机额外安装软件所摆放的目录，比如你安装一个MySQL数据库就可以放到这个目录下。这个目录是一些大型软件的安装目录，或者是一些服务程序的安装目录 。</p></li><li><p>&#x2F;var</p><p>这个目录存放着不断扩充的东西，我们习惯把那些经常被修改的目录放到这个目录下面，包括各种文件日志</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux中的文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接池</title>
      <link href="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库连接池"><a href="#1-数据库连接池" class="headerlink" title="1.数据库连接池"></a>1.数据库连接池</h2><h3 id="1-1数据库连接池的必要性"><a href="#1-1数据库连接池的必要性" class="headerlink" title="1.1数据库连接池的必要性"></a>1.1数据库连接池的必要性</h3><p>不使用数据库连接池存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证IP地址，用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>.若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li>对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而<strong>未能关闭</strong>，将会导致<strong>数据库系统中的内存泄漏</strong>，最终将导致重启数据库。</li><li>这种开发不能控制被创建的<strong>连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接<strong>过多</strong>，也可能导致<strong>内存泄漏，服务器崩溃</strong>。</li></ul><p>为解决传统开发中的数据库连接问题，可以采用<strong>数据库连接池技术（<strong><strong>connection pool</strong></strong>）</strong>。</p><p>​    <strong>数据库连接池的基本思想</strong>就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。数据库连接池负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572039707.png" alt="1661572039707"></p><p>数据库连接池技术的优点：</p><ul><li><p><strong>资源重用：</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p></li><li><p><strong>更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p></li><li><p><strong>新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p></li><li><p><strong>统一的连接管理，避免数据库连接泄露</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="1-2Druid数据源"><a href="#1-2Druid数据源" class="headerlink" title="1.2Druid数据源"></a>1.2Druid数据源</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，据说是目前最好的连接池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDruid</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">         <span class="comment">//测试获取超过最大连接数的连接数量（连接关闭、未关闭的情况）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2.ThreadLocal"></a>2.ThreadLocal</h2><p>JDK 1.2的版本中就提供java.lang.ThreadLocal，为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。</p><p>ThreadLocal用于保存某个线程共享变量，原因是在Java中，每一个线程对象中都有一个ThreadLocalMap&lt;ThreadLocal, Object&gt;，其key就是一个ThreadLocal，而Object即为该线程的共享变量。而这个map是通过ThreadLocal的set和get方法操作的。对于同一个static ThreadLocal，不同线程只能从中get，set，remove自己的变量，而不会影响其他线程的变量。</p><p>1、ThreadLocal.get: 获取ThreadLocal中当前线程共享变量的值。</p><p>2、ThreadLocal.set: 设置ThreadLocal中当前线程共享变量的值。</p><p>3、ThreadLocal.remove: 移除ThreadLocal中当前线程共享变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 从当前线程中获取数字</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (num == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//随机产生一个</span></span><br><span class="line">num = rand.nextInt(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 将数字与当前线程绑定</span></span><br><span class="line">threadLocal.set(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeNumber</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取当前线程中的数字</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (num != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 将数字从当前线程中移除</span></span><br><span class="line">threadLocal.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadLocal</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyRunnable</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;B--&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Tools.getNumber());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">Tools.removeNumber();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">remove后</span><br><span class="line">a:<span class="number">9</span></span><br><span class="line">remove后</span><br><span class="line">B--:<span class="number">40</span></span><br><span class="line">a:<span class="number">9</span></span><br><span class="line">B--:<span class="number">40</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现ThreadLocal用于保存每一个线程共享变量，只要不删除remove，那么该值在该线程的生命周期中一直存在。</p><p>最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等。</p><h2 id="3-封装JDBCTools"><a href="#3-封装JDBCTools" class="headerlink" title="3.封装JDBCTools"></a>3.封装JDBCTools</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取连接或释放连接的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTools</span> &#123;</span><br><span class="line"><span class="comment">// 1、数据源,即连接池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、ThreadLocal对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1、读取druip.properties文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、连接连接池</span></span><br><span class="line">dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创 建 线 程 池</span></span><br><span class="line">threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 从当前线程中获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (connection == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 从连接池中获取一个连接</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = dataSource.getConnection();</span><br><span class="line"><span class="comment">// 将连接与当前线程绑定</span></span><br><span class="line">threadLocal.set(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放连接的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">releaseConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取当前线程中的连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line"><span class="comment">// 将已经关闭的连接从当前线程中移除</span></span><br><span class="line">threadLocal.remove();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-封装VasicDAOImpl"><a href="#4-封装VasicDAOImpl" class="headerlink" title="4.封装VasicDAOImpl"></a>4.封装VasicDAOImpl</h2><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息</p><p>作用：为了实现功能的模块化，更有利于代码的维护和升级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAOImpl</span> &#123;</span><br><span class="line"><span class="comment">//适用于insert,update,delete语句</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql,Object... args)</span> &#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line"><span class="comment">//2、创建PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、设置？的值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;<span class="comment">//数组的下标从0开始</span></span><br><span class="line">pst.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//？的序号从1开始</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、执行更新sql</span></span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//5、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">JdbcUtils.free();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T可能代表Department，Employee等各种Javabean的对象</span></span><br><span class="line"><span class="comment">//clazz是决定你查询的结果是Department，Employee类型中的那个对象</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ArrayList&lt;T&gt; <span class="title function_">getBeanList</span><span class="params">(Class&lt;T&gt; clazz, String sql,Object... args)</span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、设置？的值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;<span class="comment">//数组的下标从0开始</span></span><br><span class="line">pst.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//？的序号从1开始</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结果集的元数据对象，该对象有对结果集的数据进行描述的相关信息</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsm</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//(1)获取结果集的列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> rsm.getColumnCount();</span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"><span class="comment">//5、把ResultSet结果集中的数据封装到一个一个JavaBean对象中，并且存到list中</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//循环一次，代表一行，一行就是一个JavaBean对象</span></span><br><span class="line"><span class="comment">//(2)创建一个JavaBean的对象</span></span><br><span class="line"><span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有几列，就代表有几个属性</span></span><br><span class="line"><span class="comment">//为obj的每一个属性赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"><span class="comment">//通过反射设置属性的值</span></span><br><span class="line"><span class="comment">//(3)从结果集的元数据对象中获取第几列的字段名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsm.getColumnLabel(i+<span class="number">1</span>);<span class="comment">//mysql的序号从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)获取属性对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnName);<span class="comment">//根据字段名称，获取属性对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(5)设置属性可以被访问</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(6)设置属性的值</span></span><br><span class="line">field.set(obj, rs.getObject(i+<span class="number">1</span>));<span class="comment">//从结果集中获取第i+1的值，赋值给该属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7、返回结果</span></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">JdbcUtils.free();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; type,String sql, Object... params)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getBeanList(type,sql,params).get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Employee的增删改查"><a href="#5-Employee的增删改查" class="headerlink" title="5.Employee的增删改查"></a>5.Employee的增删改查</h2><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572607708.png" alt="1661572607708"></p><p>通过给列取别名的方式，来告知数据库的列名与其对应实体的属性名</p><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572638458.png" alt="1661572638458"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//查询对象</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//查询集合</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_t values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_t set username=? where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setInt(<span class="number">2</span>, user.getId());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">user.setId(id);</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">list.add(user);</span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_t values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_t set username=? where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setInt(<span class="number">2</span>, user.getId());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">user.setId(id);</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">list.add(user);</span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployeeDAOImpl</span> &#123;</span><br><span class="line"><span class="type">EmployeeDAOImpl</span> <span class="variable">ed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeDAOImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"> List&lt;Employee&gt; all = ed.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span> (Employee employee : all) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库连接池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JDBC </tag>
            
            <tag> Durid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/08/27/JDBC/learingJDBC/"/>
      <url>/2022/08/27/JDBC/learingJDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1什么是JDBC"><a href="#1-1什么是JDBC" class="headerlink" title="1.1什么是JDBC"></a>1.1什么是JDBC</h3><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统（DBMS）、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源</p><p>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</p><p>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p><p>如果没有JDBC，那么Java程序访问数据库时是这样的：</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661565904830.png" alt="1661565904830"></p><p>那么有了JDBC之后</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661566276625.png" alt="1661566276625"></p><p><strong>结论：</strong></p><p>JDBC是SUN公司（Oracle公司甲骨文）提供一套用于数据库操作的接口API，Java程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p><h2 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="2.获取数据库连接"></a>2.获取数据库连接</h2><h3 id="2-1引入JDBC驱动"><a href="#2-1引入JDBC驱动" class="headerlink" title="2.1引入JDBC驱动"></a>2.1引入JDBC驱动</h3><p>有两种方式，一种就是从网络上下载jar包，然后把jar包添加到项目的类路径下，这种方法不推荐使用</p><p>另外一种就是使用Maven统一管理</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661566446813.png" alt="1661566446813"></p><h3 id="2-2-加载并注册驱动"><a href="#2-2-加载并注册驱动" class="headerlink" title="2.2 加载并注册驱动"></a>2.2 加载并注册驱动</h3><p><strong>1.Class.forName（）</strong></p><p>这种方式其实就是通过反射来加载与注册驱动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.自动注册</strong></p><p>即不需要我们自己写代码，帮我们自动实现，不过这个有版本的要求，但目前我们使用的大部分都已经支持</p><h3 id="2-3获取数据库连接"><a href="#2-3获取数据库连接" class="headerlink" title="2.3获取数据库连接"></a>2.3获取数据库连接</h3><p>可以通过 DriverManager 类建立到数据库的连接Connection：</p><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><p>jdbc:&lt;子协议&gt;:&lt;子名称&gt;</p><ul><li>协议：JDBC URL中的协议总是jdbc </li><li>子协议：子协议用于标识一个数据库驱动程序，就比如mysql</li><li>子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息</li></ul><p> <img src="/2022/08/27/JDBC/learingJDBC/1661566791612.png" alt="1661566791612"></p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://192.168.213.102:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure><h3 id="2-4-操作或访问数据库"><a href="#2-4-操作或访问数据库" class="headerlink" title="2.4 操作或访问数据库"></a>2.4 操作或访问数据库</h3><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。</p><p>其实一个数据库连接就是一个Socket连接。</p><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，然后可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p>对于statement一般使用两个函数，一个是executeUpdate、一个是executeQuery，第一个函数用来执行更新操作，结果返回一个数字，如果这个数字大于0，那么代表执行成功，一旦数字不大于0，那么代表执行失败，第二个函数用于执行查询操作，返回值类型是ResultSet对象。</p><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商实现</p><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过ResultSet 对象的next() 方法移动到下一行</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line">    <span class="comment">//取这一行的单元格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(id+<span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-释放资源"><a href="#2-5-释放资源" class="headerlink" title="2.5 释放资源"></a>2.5 释放资源</h3><p>Connection、Statement、ResultSet都是应用程序和数据库服务器的连接资源，使用后一定要关闭，可以在finally中关闭</p><h3 id="2-6-增删改查代码示例"><a href="#2-6-增删改查代码示例" class="headerlink" title="2.6 增删改查代码示例"></a>2.6 增删改查代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 网络编程：tcp</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 服务器端：</span></span><br><span class="line"><span class="comment"> * 1、ServerSocket server = new ServerSocket(3306);</span></span><br><span class="line"><span class="comment"> * 2、Socket socket = server.accept();</span></span><br><span class="line"><span class="comment"> * 3、InputStream input = socket.getInputStream();//接收sql，客户端传过来的</span></span><br><span class="line"><span class="comment"> * 4、在服务器执行sql</span></span><br><span class="line"><span class="comment"> * 5、把结果给客户端</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 客户端：</span></span><br><span class="line"><span class="comment"> * 1、Socket socket = new Socket(服务器的IP地址，3306);</span></span><br><span class="line"><span class="comment"> * 2、传sql</span></span><br><span class="line"><span class="comment"> * 3、OutputStream out = socket.getOutputStream();</span></span><br><span class="line"><span class="comment"> * 4、out.write(sql);</span></span><br><span class="line"><span class="comment"> * 5、接收结果</span></span><br><span class="line"><span class="comment"> * 6、断开连接  out.close();socket.close();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStatement</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">             <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(&#x27;财务部&#x27;,&#x27;负责发钱工作&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE t_department SET description = &#x27;负责发工资、社保、公积金工作&#x27; WHERE dname =&#x27;财务部&#x27;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM t_department WHERE did =6&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_department&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line"><span class="comment">//取这一行的单元格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(id+<span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect2</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT did,dname FROM t_department&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line"><span class="comment">//取这一行的单元格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;did&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">System.out.println(id+<span class="string">&quot;\t&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-PreparedStatement"><a href="#3-PreparedStatement" class="headerlink" title="3.PreparedStatement"></a>3.PreparedStatement</h2><h3 id="3-1Statement的不足"><a href="#3-1Statement的不足" class="headerlink" title="3.1Statement的不足"></a>3.1Statement的不足</h3><h4 id="3-1-1-SQL拼接问题"><a href="#3-1-1-SQL拼接问题" class="headerlink" title="3.1.1 SQL拼接问题"></a>3.1.1 SQL拼接问题</h4><p>简单来说就是当sql语句拼接的时候设计字符串的拼接操作，操作十分繁琐</p><p><strong>下面使用一个登录的场景来说明这个弊端</strong></p><p>引用自<a href="https://blog.csdn.net/pison007/article/details/113485127">(69条消息) Statement操作sql语句的弊端_pison007的博客-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">get</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//获取基本的配置信息</span></span><br><span class="line">InputStream input=StatementCase.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">Properties pro=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(input);</span><br><span class="line">String url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">String user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">String password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String driverClass=pro.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载驱动类</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection con=DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">Statement statement=con.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(sql);</span><br><span class="line">User login_user=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">String username=rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password1=rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">login_user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">login_user.setUsername(username);</span><br><span class="line">login_user.setPassword(password1); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> login_user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用户输入用户名和密码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;用户名:&quot;</span>);</span><br><span class="line">String user=scanner.next();</span><br><span class="line">System.out.print(<span class="string">&quot;密码:&quot;</span>);</span><br><span class="line">String password=scanner.next();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">&quot;select username,password from userinfo where  username=&#x27;&quot;</span>+user+<span class="string">&quot;&#x27; and password= &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">User result=get(sql);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="literal">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前为止看起来都一切良好，这个时候问题来了，我必须把变量名user,password放进我的sql语句中去。也就是这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from userinfo where  username=<span class="string">&#x27;变量user&#x27;</span>  and  password= <span class="string">&#x27;变量password&#x27;</span></span><br></pre></td></tr></table></figure><p>由于在java中执行的SQL语句必须以字符串的形式书写，那么就涉及到字符串的拼接,就会变成这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select username,password from userinfo where  username=&#x27;&quot;</span>+user+<span class="string">&quot;&#x27; and password= &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>上述代码的可读性会非常差，而且SQL注入问题是最不能接收的。</p><h4 id="3-1-2-SQL注入问题"><a href="#3-1-2-SQL注入问题" class="headerlink" title="3.1.2 SQL注入问题"></a>3.1.2 SQL注入问题</h4><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令，从而利用系统的 SQL 引擎完成恶意行为的做法。对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement 取代 Statement 就可以了。</p><p>用一个比较简单的例子来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库获取账号和密码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;XXXX&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入用户名: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">un</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入密 码: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pw</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 下面代码存在 sql 注入问题</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &#x27;&quot;</span> + un</span><br><span class="line">                    + <span class="string">&quot;&#x27; and password = &#x27;&quot;</span> + pw + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 下面这个代码的含义为: 将sql语句给DBMS, DBMS进行编译</span></span><br><span class="line">            <span class="comment">// 是先提交后编译, 所以如果用户提供了非法信息, 就导致了 sql 语句含义被扭曲</span></span><br><span class="line">            <span class="comment">// 从而出现不符合用户需求的情况</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/27/JDBC/learingJDBC/1661570625202.png" alt="1661570625202"></p><p>当我输入用户名为 “xxx”  密码为 “XXX’ or ‘1’ &#x3D; ‘1” 时, 也可以显示登录成功, 但是根据上面显示, 数据库中显然没有这个账户和密码. </p><p>根据这一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &#x27;&quot;</span> + un + <span class="string">&quot;&#x27; and password = &#x27;&quot;</span> + pw + <span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p> 我们还原一下 sql 语句, 拼接后的 sql 语句为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span> <span class="type">and</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span> or <span class="string">&#x27;1&#x27;</span> = <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>那么PreparedStatement是如何解决这个SQL注入问题的呢？</p><p><strong>他会预先对 sql 语句的框架进行编译, 然后再给 sql 语句进行传值.</strong></p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 下面一行执行完, DBMS会将框架先编译好</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><h3 id="2-PreparedStatement"><a href="#2-PreparedStatement" class="headerlink" title="2.PreparedStatement"></a>2.PreparedStatement</h3><p>可以通过调用 Connection 对象的 preparedStatement(<strong>String sql</strong>) 方法获取 PreparedStatement 对象</p><p>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</p><ul><li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li><li>ResultSet executeQuery()执行查询，并返回该查询生成的 ResultSet 对象。</li><li>int executeUpdate()：执行更新，包括增、删、该</li></ul><p>演示代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PreparedStatement：是Statement子接口</span></span><br><span class="line"><span class="comment"> * 1、SQL不需要拼接</span></span><br><span class="line"><span class="comment"> * 2、SQL不会出现注入</span></span><br><span class="line"><span class="comment"> * 3、可以处理Blob类型的数据</span></span><br><span class="line"><span class="comment"> * tinyblob：255字节以内</span></span><br><span class="line"><span class="comment"> * blob：65K以内</span></span><br><span class="line"><span class="comment"> * mediumblob:16M以内</span></span><br><span class="line"><span class="comment"> * longblob：4G以内</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如果还是报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数：</span></span><br><span class="line"><span class="comment"> * max_allowed_packet=16M</span></span><br><span class="line"><span class="comment"> * 注意：修改了my.ini文件，一定要重新启动服务</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPreparedStatement</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入手机号码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入性别：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪资：&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入部门编号：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">did</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、编写带？的SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_employee (ename,tel,gender,salary,did) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、准备一个PreparedStatement：预编译sql</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">// 对带？的sql进行预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、把?用具体的值进行代替</span></span><br><span class="line">pst.setString(<span class="number">1</span>, name);</span><br><span class="line">pst.setString(<span class="number">2</span>, tel);</span><br><span class="line">pst.setString(<span class="number">3</span>, gender);</span><br><span class="line">pst.setDouble(<span class="number">4</span>, salary);</span><br><span class="line">pst.setInt(<span class="number">5</span>, did);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、编写带?的sql</span></span><br><span class="line"><span class="comment">//孙红雷  &#x27; or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT eid,ename,tel,gender,salary FROM t_employee WHERE ename = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、把带？的sql语句进行预编译</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、把？用具体的变量的赋值</span></span><br><span class="line">pst.setString(<span class="number">1</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;eid&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(id + <span class="string">&quot;\t&quot;</span> + ename + <span class="string">&quot;\t&quot;</span> + tel + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBlob</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请指定照片的路径：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 INSERT INTO `user` VALUES(NULL,用户名,密码,照片)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `user` (username,`password`,head_picture)VALUES(?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、准备一个PreparedStatement：预编译sql</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">// 对带？的sql进行预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、对？进行设置</span></span><br><span class="line">pst.setString(<span class="number">1</span>, username);</span><br><span class="line">pst.setString(<span class="number">2</span>, pwd);</span><br><span class="line">pst.setBlob(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(photoPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">System.out.println(len &gt; <span class="number">0</span> ? <span class="string">&quot;添加成功&quot;</span> : <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-PreparedStatement-和Statement的对比"><a href="#3-PreparedStatement-和Statement的对比" class="headerlink" title="3.PreparedStatement 和Statement的对比"></a>3.PreparedStatement 和Statement的对比</h3><ul><li><p>代码的可读性和可维护性. Statement的sql拼接是个难题。</p></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li><li><p>PreparedStatement 可以处理Blob类型的数据</p></li><li><p>PreparedStatement 能最大可能提高性能：<strong>（Oracle和PostgreSQL8是这样，但是对于MySQL不一定比Statement高）</strong></p><p>​DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</p></li></ul><h3 id="4-批处理"><a href="#4-批处理" class="headerlink" title="4.批处理"></a>4.批处理</h3><p>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。</p><p>JDBC的批量处理语句包括下面两个方法：</p><ul><li>addBatch()：添加需要批量处理的SQL语句或参数</li><li>executeBatch()：执行批量处理语句；</li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><p>注意：</p><p><strong>JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数?rewriteBatchedStatements&#x3D;true</strong></p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBatch</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch();</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.addBatch(); <span class="comment">//加入batch</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch(); <span class="comment">//执行一批sql语句</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JDBC </tag>
            
            <tag> statement </tag>
            
            <tag> preparedStatement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字字符串转换成IP地址</title>
      <link href="/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>现在有一个只包含数字的字符串，将该字符串转化成IP地址的形式，返回所有可能的情况。</p><p>例如：</p><p>给出的字符串为”25525522135”,</p><p>返回[“255.255.22.135”, “255.255.221.35”]. (顺序没有关系)</p><p>数据范围：字符串长度 0 \le n \le 120≤<em>n</em>≤12</p><p>要求：空间复杂度 O(n!)<em>O</em>(<em>n</em>!),时间复杂度 O(n!)<em>O</em>(<em>n</em>!)</p><p>注意：ip地址是由四段数字组成的数字序列，格式如 “x.x.x.x”，其中 x 的范围应当是 [0,255]。</p><p><strong>示例1</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;25525522135&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;255.255.22.135&quot;,&quot;255.255.221.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;1111&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;1.1.1.1&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;000256&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[]&quot;</span><br></pre></td></tr></table></figure><hr><p><strong>本题思路：</strong></p><p>本题目采用递归+回溯算法解决。</p><p><strong>递归我们需要确定递归函数的几个参数</strong></p><p>首先两个变量是确定的，一个是保存最后结果的list数组，一个是原始字符串，其它变量需要我们自行设计，我又使用了两个变量，一个用来判断我们目前是在取ip地址的第几个数字，一个用来判断我们目前使用到了字符串的哪一个下标。</p><p><strong>递归还需要判断递归结束条件</strong>，IP地址的规律我们需要清楚，最大是三个数字不能超过255，如果只有一个数字，那么可以为0，如果是2个或者三个数字，那么第一个数字不能为0，因此我们对于每一个IP地址的数字使用一次for循环，for循环最多3次，代表最多加入3个数字，每一次加上一个数字之后，我们需要判断此时的数字是否满足那几个条件，满足，那么我们就接着当时的情况接着取遍历，如果不满足，那么直接continue。</p><p>因此最后的递归结束条件就是当我们已经取了四次IP地址三位数字了，如果四次以后，index并没有把原始字符串取完，那么就结束此次结果，如果取完了，证明四次IP地址都满足条件，因此加入结果数组，最终把数组返回即可得到最后的结果。</p><p>下面是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s string字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">nums</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//用于回溯的变量</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title function_">restoreIpAddresses</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//结果数组</span></span><br><span class="line">        dfs(res,s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(ArrayList&lt;String&gt; res,String s, <span class="type">int</span> ipNumber, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ipNumber==<span class="number">4</span>)&#123; <span class="comment">// 一旦为4，证明已经判断过4次IP地址</span></span><br><span class="line">            <span class="keyword">if</span>(index!=s.length())&#123; <span class="comment">// 看看原始字符串有没有取完</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(nums); <span class="comment">//取完了就把此次情况加入结果数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//构建一个临时变量用来存储一次IP地址的情况</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i&lt;index+<span class="number">3</span> &amp;&amp;i&lt;s.length();i++)&#123; <span class="comment">//for循环，一个IP地址的一次最多取三个数组</span></span><br><span class="line">                cur += s.charAt(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(cur);</span><br><span class="line">                <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> nums; <span class="comment">//临时变量用来存储nums，用于回溯</span></span><br><span class="line">                <span class="keyword">if</span>(number&lt;=<span class="number">255</span> &amp;&amp; (cur.length()==<span class="number">1</span> || cur.charAt(<span class="number">0</span>)!=<span class="string">&#x27;0&#x27;</span>))&#123; <span class="comment">//判断条件</span></span><br><span class="line">                    <span class="keyword">if</span>(ipNumber!=<span class="number">3</span>)&#123; <span class="comment">//判断是不是最后一次</span></span><br><span class="line">                        nums+=cur+<span class="string">&quot;.&quot;</span>; </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        nums+=cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dfs(res,s,ipNumber+<span class="number">1</span>,i+<span class="number">1</span>); <span class="comment">//接着递归</span></span><br><span class="line">                    nums = temp; <span class="comment">// 回溯</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/1661517343582.png" alt="hello"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> top100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">zhuanHuan</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">strNuber</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + number;</span><br><span class="line">        <span class="type">char</span>[] numberChar = strNuber.toCharArray();</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;numberChar.length;i++)&#123;</span><br><span class="line">            s.push(numberChar[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">geWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> geWei;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;shiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">baiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;baiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res.reverse();</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> learing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
