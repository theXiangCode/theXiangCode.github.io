<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数字字符串转换成IP地址</title>
      <link href="/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>现在有一个只包含数字的字符串，将该字符串转化成IP地址的形式，返回所有可能的情况。</p><p>例如：</p><p>给出的字符串为”25525522135”,</p><p>返回[“255.255.22.135”, “255.255.221.35”]. (顺序没有关系)</p><p>数据范围：字符串长度 0 \le n \le 120≤<em>n</em>≤12</p><p>要求：空间复杂度 O(n!)<em>O</em>(<em>n</em>!),时间复杂度 O(n!)<em>O</em>(<em>n</em>!)</p><p>注意：ip地址是由四段数字组成的数字序列，格式如 “x.x.x.x”，其中 x 的范围应当是 [0,255]。</p><p><strong>示例1</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;25525522135&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;255.255.22.135&quot;,&quot;255.255.221.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;1111&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;1.1.1.1&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;000256&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[]&quot;</span><br></pre></td></tr></table></figure><hr><p><strong>本题思路：</strong></p><p>本题目采用递归+回溯算法解决。</p><p><strong>递归我们需要确定递归函数的几个参数</strong></p><p>首先两个变量是确定的，一个是保存最后结果的list数组，一个是原始字符串，其它变量需要我们自行设计，我又使用了两个变量，一个用来判断我们目前是在取ip地址的第几个数字，一个用来判断我们目前使用到了字符串的哪一个下标。</p><p><strong>递归还需要判断递归结束条件</strong>，IP地址的规律我们需要清楚，最大是三个数字不能超过255，如果只有一个数字，那么可以为0，如果是2个或者三个数字，那么第一个数字不能为0，因此我们对于每一个IP地址的数字使用一次for循环，for循环最多3次，代表最多加入3个数字，每一次加上一个数字之后，我们需要判断此时的数字是否满足那几个条件，满足，那么我们就接着当时的情况接着取遍历，如果不满足，那么直接continue。</p><p>因此最后的递归结束条件就是当我们已经取了四次IP地址三位数字了，如果四次以后，index并没有把原始字符串取完，那么就结束此次结果，如果取完了，证明四次IP地址都满足条件，因此加入结果数组，最终把数组返回即可得到最后的结果。</p><p>下面是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s string字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">nums</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//用于回溯的变量</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title function_">restoreIpAddresses</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//结果数组</span></span><br><span class="line">        dfs(res,s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(ArrayList&lt;String&gt; res,String s, <span class="type">int</span> ipNumber, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ipNumber==<span class="number">4</span>)&#123; <span class="comment">// 一旦为4，证明已经判断过4次IP地址</span></span><br><span class="line">            <span class="keyword">if</span>(index!=s.length())&#123; <span class="comment">// 看看原始字符串有没有取完</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(nums); <span class="comment">//取完了就把此次情况加入结果数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//构建一个临时变量用来存储一次IP地址的情况</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i&lt;index+<span class="number">3</span> &amp;&amp;i&lt;s.length();i++)&#123; <span class="comment">//for循环，一个IP地址的一次最多取三个数组</span></span><br><span class="line">                cur += s.charAt(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(cur);</span><br><span class="line">                <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> nums; <span class="comment">//临时变量用来存储nums，用于回溯</span></span><br><span class="line">                <span class="keyword">if</span>(number&lt;=<span class="number">255</span> &amp;&amp; (cur.length()==<span class="number">1</span> || cur.charAt(<span class="number">0</span>)!=<span class="string">&#x27;0&#x27;</span>))&#123; <span class="comment">//判断条件</span></span><br><span class="line">                    <span class="keyword">if</span>(ipNumber!=<span class="number">3</span>)&#123; <span class="comment">//判断是不是最后一次</span></span><br><span class="line">                        nums+=cur+<span class="string">&quot;.&quot;</span>; </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        nums+=cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dfs(res,s,ipNumber+<span class="number">1</span>,i+<span class="number">1</span>); <span class="comment">//接着递归</span></span><br><span class="line">                    nums = temp; <span class="comment">// 回溯</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/1661517343582.png" alt="1661517343582"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> top100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">zhuanHuan</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">strNuber</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + number;</span><br><span class="line">        <span class="type">char</span>[] numberChar = strNuber.toCharArray();</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;numberChar.length;i++)&#123;</span><br><span class="line">            s.push(numberChar[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">geWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> geWei;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;shiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">baiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;baiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res.reverse();</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> learing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
