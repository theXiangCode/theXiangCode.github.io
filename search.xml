<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Scala概述</title>
      <link href="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Scala入门"><a href="#1-Scala入门" class="headerlink" title="1. Scala入门"></a>1. Scala入门</h2><h3 id="1-1-为什么要学习Scala"><a href="#1-1-为什么要学习Scala" class="headerlink" title="1.1 为什么要学习Scala"></a>1.1 为什么要学习Scala</h3><p>​在之前的学习中，我们已经学习了很长时间的Java语言，为什么此时要学习一门新的语言呢？主要基于以下几个原因：</p><ol><li><p>大数据主要的批处理计算引擎框架Spark是基于Scala语言开发的</p></li><li><p>大数据主要的流式计算引擎框架Flink也提供了Scala相应的API</p></li><li><p>大数据领域中函数式编程的开发效率更高，更直观，更容易理解</p></li></ol><h2 id="2-变量和数据类型"><a href="#2-变量和数据类型" class="headerlink" title="2. 变量和数据类型"></a>2. 变量和数据类型</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h3><p>其实注释跟java一样</p><p><strong>单行注释：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaComment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 单行注释</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多行注释：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaComment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           多行注释</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文档注释：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * doc注释</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaComment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h3><p>​变量是一种使用方便的占位符，用于引用计算机内存地址，变量创建后会占用一定的内存空间。基于变量的数据类型，操作系统会进行内存分配并且决定什么将被储存在保留内存中。因此，通过给变量分配不同的数据类型，你可以在这些变量中存储整数，小数或者字母。</p><h4 id="2-2-1-语法声明"><a href="#2-2-1-语法声明" class="headerlink" title="2.2.1 语法声明"></a>2.2.1 语法声明</h4><p><strong>在Scala之中变量的类型在变量名之后等号之前声明。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// var | val 变量名 ：变量类型 = 变量值</span></span><br><span class="line">        <span class="comment">// 用户名称</span></span><br><span class="line">        <span class="keyword">var</span> username : <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        <span class="comment">// 用户密码</span></span><br><span class="line">        <span class="keyword">val</span> userpswd : <span class="type">String</span> = <span class="string">&quot;000000&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​变量的类型如果能够通过变量值推断出来，那么可以省略类型声明，这里的省略，并不是不声明，而是由Scala编译器在编译时自动声明编译的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 因为变量值为字符串，又因为Scala是静态类型语言，所以即使不声明类型</span></span><br><span class="line">        <span class="comment">// Scala也能在编译时正确的判断出变量的类型，这体现了Scala语言的简洁特性。</span></span><br><span class="line">        <span class="keyword">var</span> username = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        <span class="keyword">val</span> userpswd = <span class="string">&quot;000000&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-变量的初始化"><a href="#2-2-2-变量的初始化" class="headerlink" title="2.2.2 变量的初始化"></a>2.2.2 变量的初始化</h4><p>​Java语法中变量在使用前进行初始化就可以，但是Scala语法中是不允许的，必须显示进行初始化操作。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> username <span class="comment">// Error</span></span><br><span class="line">        <span class="keyword">val</span> username = <span class="string">&quot;zhangsan&quot;</span> <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-可变变量"><a href="#2-2-3-可变变量" class="headerlink" title="2.2.3 可变变量"></a>2.2.3 可变变量</h4><p>​值可以改变的变量，称之为可变变量，但是变量类型无法发生改变, Scala中可变变量使用关键字var进行声明</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 用户名称</span></span><br><span class="line">        <span class="keyword">var</span> username : <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        username = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line">        username = <span class="literal">true</span> <span class="comment">// Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-不可变变量"><a href="#2-2-4-不可变变量" class="headerlink" title="2.2.4 不可变变量"></a>2.2.4 不可变变量</h4><p>​值一旦初始化后无法改变的变量，称之为不可变变量。Scala中不可变变量使用关键字val进行声明, 类似于Java语言中的final关键字</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 用户名称</span></span><br><span class="line">        <span class="keyword">val</span> username : <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        username = <span class="string">&quot;lisi&quot;</span> <span class="comment">// Error</span></span><br><span class="line">        username = <span class="literal">true</span> <span class="comment">// Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-标识符"><a href="#2-3-标识符" class="headerlink" title="2.3 标识符"></a>2.3 标识符</h3><p>​Scala 可以使用两种形式的标志符，字符数字和符号。</p><ol><li><p>字符数字使用字母或是下划线开头，后面可以接字母或是数字，符号”$”在 Scala 中也看作为字母。然以”$”开头的标识符为保留的 Scala 编译器产生的标志符使用，应用程序应该避免使用”$”开始的标识符，以免造成冲突。(下划线开头的变量是为了给函数式编程最简化的时候使用的)</p></li><li><p>Scala 的命名规范采用和 Java 类似的 camel 命名规范，首字符小写，比如 toString。类名的首字符还是使用大写。此外也应该避免使用以下划线结尾的标志符以避免冲突。</p></li><li><p>Scala 内部实现时会使用转义的标志符，比如:-&gt; 使用 $colon$minus$greater 来表示这个符号。</p></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和Java一样的标识符命名规则</span></span><br><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;zhangsan&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> name1 = <span class="string">&quot;zhangsan0&quot;</span>   <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val 1name = &quot;zhangsan0&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> name$ = <span class="string">&quot;zhangsan1&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> $name = <span class="string">&quot;zhangsan2&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> name_ = <span class="string">&quot;zhangsan3&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> _name = <span class="string">&quot;zhangsan4&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> $ = <span class="string">&quot;zhangsan5&quot;</span>     <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> _ = <span class="string">&quot;zhangsan6&quot;</span>     <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val 1 = &quot;zhangsan6&quot;     // Error</span></span><br><span class="line"><span class="comment">//val true = &quot;zhangsan6&quot;  // Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和Java不一样的标识符命名规则</span></span><br><span class="line"><span class="keyword">val</span> + = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> - = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> * = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> / = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> ! = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val @ = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> @@ = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val # = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> ## = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> % = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> ^ = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> &amp; = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val ( = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val ( = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val ) = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val = = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> == = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val [ = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val ] = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val : = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> :: = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val ; = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val &#x27; = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="comment">//val &quot; = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> <span class="string">&quot;&quot;</span> = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> &lt; = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> &gt; = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> ? = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> | = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> \ = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//val ` = &quot;lisi&quot; // Error</span></span><br><span class="line"><span class="keyword">val</span> ~ = <span class="string">&quot;lisi&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> :-&gt; = <span class="string">&quot;wangwu&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">val</span> :-&lt; = <span class="string">&quot;wangwu&quot;</span> <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// 切记，能声明和能使用是两回事</span></span><br></pre></td></tr></table></figure><p>​Scala 中的标识符也不能是<strong>关键字</strong>或<strong>保留字</strong>，那么Scala中有多少关键字或保留字呢？</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662171736524.png" alt="1662171736524"></p><h3 id="2-4-字符串"><a href="#2-4-字符串" class="headerlink" title="2.4  字符串"></a>2.4  字符串</h3><p>​在 Scala 中，字符串的类型实际上就是 Java中的 String类，它本身是没有 String 类的。</p><p>​在 Scala 中，String 是一个不可变的字符串对象，所以该对象不可被修改。这就意味着你如果修改字符串就会产生一个新的字符串对象。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;scala&quot;</span></span><br><span class="line">        <span class="keyword">val</span> subname : <span class="type">String</span> = name.substring(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串的连接</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 字符串连接</span></span><br><span class="line">        println(<span class="string">&quot;Hello &quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传值字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">object ScalaString &#123;</span><br><span class="line">    def main(args: Array[String]): Unit = &#123;</span><br><span class="line">        // 传值字符串(格式化字符串)</span><br><span class="line">        printf(&quot;name=%s\n&quot;, name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插值字符串</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 插值字符串</span></span><br><span class="line">        <span class="comment">// 将变量值插入到字符串</span></span><br><span class="line">        println(<span class="string">s&quot;name=<span class="subst">$&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多行字符串</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 多行格式化字符串</span></span><br><span class="line">        <span class="comment">// 在封装JSON或SQL时比较常用</span></span><br><span class="line">        <span class="comment">// | 默认顶格符</span></span><br><span class="line">        println(</span><br><span class="line">                    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                      | Hello</span></span><br><span class="line"><span class="string">                      | $&#123;name&#125;</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-输入输出"><a href="#2-5-输入输出" class="headerlink" title="2.5 输入输出"></a>2.5 输入输出</h3><p><strong>输入</strong></p><p><strong>控制台中输入</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaIn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 标准化屏幕输入</span></span><br><span class="line">        <span class="keyword">val</span> age : <span class="type">Int</span> = scala.io.<span class="type">StdIn</span>.readInt()</span><br><span class="line">        println(age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件中获取输入</strong></p><p>​<strong>在这里要格外注意的一个点是：IDEA的基准路径是项目的根路径</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaIn</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 请注意文件路径的位置</span></span><br><span class="line">        scala.io.<span class="type">Source</span>.fromFile(<span class="string">&quot;input/user.json&quot;</span>).foreach(</span><br><span class="line">            line =&gt; &#123;</span><br><span class="line">                print(line)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">scala.io.<span class="type">Source</span>.fromFile(<span class="string">&quot;input/user.json&quot;</span>).getLines()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>输出</strong></p><p>Scala进行文件写操作，用的都是 java中的I&#x2F;O类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaOut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> writer = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;output/test.txt&quot;</span> ))</span><br><span class="line">      writer.write(<span class="string">&quot;Hello Scala&quot;</span>)</span><br><span class="line">      writer.close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-数据类型"><a href="#2-6-数据类型" class="headerlink" title="2.6 数据类型"></a>2.6 数据类型</h3><h4 id="2-6-1-Java数据类型"><a href="#2-6-1-Java数据类型" class="headerlink" title="2.6.1 Java数据类型"></a>2.6.1 Java数据类型</h4><p>Java的数据类型包含基本类型和引用类型</p><ul><li>基本类型：byte,short,char,int,long,float,double,boolean</li><li>引用类型：Object，数组，字符串，包装类，集合，POJO对象等</li></ul><h4 id="2-6-2-Scala数据类型"><a href="#2-6-2-Scala数据类型" class="headerlink" title="2.6.2 Scala数据类型"></a>2.6.2 Scala数据类型</h4><p>​Scala是完全面向对象的语言，所以不存在基本数据类型的概念，有的只是任意值对象类型（AnyVal）和任意引用对象类型(AnyRef)</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662173261301.png" alt="1662173261301"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662173289280.png" alt="1662173289280"></p><p><strong>其中unit相当于java中的void类型，如果打印这个unit，会在控制台输出一对小括号</strong></p><p><strong>Nothing是Scala语言中特殊的类型，用于统一方法的异常和正常的返回</strong></p><h3 id="2-7-类型转换"><a href="#2-7-类型转换" class="headerlink" title="2.7 类型转换"></a>2.7 类型转换</h3><p><strong>自动类型转换</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaDataType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> b : <span class="type">Byte</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">val</span> s : <span class="type">Short</span> = b</span><br><span class="line">        <span class="keyword">val</span> i : <span class="type">Int</span> = s</span><br><span class="line">        <span class="keyword">val</span> lon : <span class="type">Long</span> = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>强制类型转换</strong></p><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)a</span><br></pre></td></tr></table></figure><p>Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a : <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="type">Var</span> b : <span class="type">Byte</span> = a.toByte</span><br><span class="line"><span class="comment">// 基本上Scala的AnyVal类型之间都提供了相应转换的方法。</span></span><br></pre></td></tr></table></figure><p><strong>字符串类型转换</strong></p><p>Scala是完全面向对象的语言，所有的类型都提供了toString方法，可以直接转换为字符串</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lon.toString</span><br></pre></td></tr></table></figure><p>任意类型都提供了和字符串进行拼接的方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">&quot;hello &quot;</span> + i</span><br></pre></td></tr></table></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h2><p><strong>算数运算符</strong></p><p>​假定变量A为10，B为20</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662177203231.png" alt="1662177203231"></p><p><strong>关系运算符</strong></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662177232207.png" alt="1662177232207"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662177373542.png" alt="1662177373542"></p><p>目前的理解：</p><p>​第一行其实是和第二行一样的，scala会把等于等于号自动调用equals方法，而第三行则是相当于java中的&#x3D;&#x3D;，就是比较地址，因此只有第三行返回false</p><p><strong>赋值运算符</strong></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662179792587.png" alt="1662179792587"></p><p>在Scala中取消了++ 、–运算符</p><p><strong>逻辑运算符</strong></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662179824788.png" alt="1662179824788"></p><p><strong>位运算符</strong></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662179946296.png" alt="1662179946296"></p><p><strong>运算符本质</strong></p><p>​在Scala中其实是没有运算符的，所有的运算符都是方法</p><ul><li><p>Scala是完全面向对象的语言，所以数字其实也是对象</p></li><li><p>当调用对象的方法时，点.可以省略</p></li><li><p>如果函数参数只有一个，或者没有参数，()可以省略</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaOper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> i : <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">val</span> j : <span class="type">Int</span> = i.+(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">val</span> k : <span class="type">Int</span> = j +(<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">val</span> m : <span class="type">Int</span> = k + <span class="number">30</span></span><br><span class="line">        println(m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h2><h3 id="4-1-for循环"><a href="#4-1-for循环" class="headerlink" title="4.1 for循环"></a>4.1 for循环</h3><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 循环变量 &lt;- 数据集 ) &#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里的数据集可以是任意类型的数据集合，如字符串，集合，数组等，这里我们还没有讲到集合，数组语法，请大家不要着急，先能演示例子，后面咱们详细讲。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>) ) &#123; <span class="comment">// 范围集合</span></span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="number">1</span> to <span class="number">5</span> ) &#123; <span class="comment">// 包含5</span></span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="number">1</span> until <span class="number">5</span> ) &#123; <span class="comment">// 不包含5</span></span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环守卫</strong></p><p>​循环时可以增加条件来决定是否继续循环体的执行,这里的判断条件我们称之为循环守卫</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> i != <span class="number">3</span>  ) &#123;</span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环步长</strong></p><p>​scala的集合也可以设定循环的增长幅度，也就是所谓的步长step</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>) ) &#123;</span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="number">1</span> to <span class="number">5</span> by <span class="number">2</span> ) &#123;</span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环嵌套</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>); j &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">4</span>) ) &#123;</span><br><span class="line">            println(<span class="string">&quot;i = &quot;</span> + i + <span class="string">&quot;,j = &quot;</span> + j )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>) ) &#123;</span><br><span class="line">            <span class="keyword">for</span> ( j &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">4</span>) ) &#123;</span><br><span class="line">                println(<span class="string">&quot;i = &quot;</span> + i + <span class="string">&quot;,j = &quot;</span> + j )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>循环返回值</strong></p><p>​Scala所有的表达式都是有返回值的。但是这里的返回值并不一定都是有值的哟。</p><p>​如果希望for循环表达式的返回值有具体的值，需要使用关键字yield</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="keyword">for</span> ( i &lt;- <span class="type">Range</span>(<span class="number">1</span>,<span class="number">5</span>) ) <span class="keyword">yield</span> &#123;</span><br><span class="line">            i * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662181090945.png" alt="1662181090945"></p><h3 id="4-2-While循环"><a href="#4-2-While循环" class="headerlink" title="4.2 While循环"></a>4.2 While循环</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> ( i &lt; <span class="number">5</span> ) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">5</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125; <span class="keyword">while</span> ( i &lt; <span class="number">5</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-循环中断"><a href="#4-3-循环中断" class="headerlink" title="4.3 循环中断"></a>4.3 循环中断</h3><p>​Scala是完全面向对象的语言，所以无法使用break，continue关键字这样的方式来中断，或继续循环逻辑，而是采用了函数式编程的方式代替了循环语法中的break和continue</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        scala.util.control.<span class="type">Breaks</span>.breakable &#123;</span><br><span class="line">            <span class="keyword">for</span> ( i &lt;- <span class="number">1</span> to <span class="number">5</span> ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( i == <span class="number">3</span> ) &#123;</span><br><span class="line">                    scala.util.control.<span class="type">Breaks</span>.<span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">                println(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-基础函数编程"><a href="#5-基础函数编程" class="headerlink" title="5. 基础函数编程"></a>5. 基础函数编程</h2><h3 id="5-1-基本语法"><a href="#5-1-基本语法" class="headerlink" title="5.1 基本语法"></a>5.1 基本语法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="function"><span class="keyword">def</span> <span class="title">函数名</span> </span>( 参数列表 ) [:返回值类型] = &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>( s : <span class="type">String</span> ) : <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-函数-amp-方法"><a href="#5-2-函数-amp-方法" class="headerlink" title="5.2 函数&amp;方法"></a>5.2 函数&amp;方法</h3><ul><li><p>Scala 中存在方法与函数两个不同的概念，二者在语义上的区别很小。scala 方法是类的一部分，而函数是一个对象，可以赋值给一个变量。换句话来说在类中定义的函数即是方法。scala 中的方法跟 Java 的类似，方法是组成类的一部分。scala 中的函数则是一个完整的对象。</p></li><li><p>Scala中的方法和函数从语法概念上来讲，一般不好区分，所以简单的理解就是：方法也是函数。只不过类中声明的函数称之为方法，其他场合声明的就是函数了。类中的方法是有重载和重写的。<strong>而函数可就没有重载和重写的概念</strong>了，<strong>但是函数可以嵌套声明使用，方法就没有这个能力</strong>了。</p></li></ul><p>函数不强调属于谁，只是功能的封装，函数的本质上其实也是一个方法，编译成java字节码文件的时候，会在当前类中添加一个方法，不过会增加private static final 这几个关键字，因此他的作用范围比较小，而且不可以被重载。</p><p>方法也是功能的封装，但是更强调属于谁</p><h3 id="5-3-函数定义"><a href="#5-3-函数定义" class="headerlink" title="5.3 函数定义"></a>5.3 函数定义</h3><p><strong>无参，无返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(<span class="string">&quot;函数体&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fun1()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数定义的时候没有参数，调用函数的时候可以把括号删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">object ScalaFunction &#123;</span><br><span class="line">    def main(args: Array[String]): Unit = &#123;</span><br><span class="line">        def fun1(): Unit = &#123;</span><br><span class="line">            println(&quot;函数体&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        fun1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无参，有返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        println( fun2() )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有参，无返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun3</span></span>( name:<span class="type">String</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println( name )</span><br><span class="line">        &#125;</span><br><span class="line">        fun3(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有参有返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun4</span></span>(name:<span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="string">&quot;Hello &quot;</span> + name</span><br><span class="line">        &#125;</span><br><span class="line">        println( fun4(<span class="string">&quot;zhangsan&quot;</span>) )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多参，无返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun5</span></span>(hello:<span class="type">String</span>, name:<span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println( hello + <span class="string">&quot; &quot;</span> + name )</span><br><span class="line">        &#125;</span><br><span class="line">        fun5(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多参，有返回值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun6</span></span>(hello:<span class="type">String</span>, name:<span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">            hello + <span class="string">&quot; &quot;</span> + name</span><br><span class="line">        &#125;</span><br><span class="line">        println( fun6(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-函数参数"><a href="#5-4-函数参数" class="headerlink" title="5.4 函数参数"></a>5.4 函数参数</h3><p><strong>可变参数</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun7</span></span>(names:<span class="type">String</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(names)</span><br><span class="line">        &#125;</span><br><span class="line">        fun7()</span><br><span class="line">        fun7( <span class="string">&quot;zhangsan&quot;</span> )</span><br><span class="line">        fun7( <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可变参数不能放置在参数列表的前面，一般放置在参数列表的最后</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// Error</span></span><br><span class="line">        <span class="comment">//def fun77(names:String*, name:String): Unit = &#123;</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun777</span></span>( name:<span class="type">String</span>, names:<span class="type">String</span>* ): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println( name )</span><br><span class="line">            println( names )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数默认值</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun8</span></span>( name:<span class="type">String</span>, password:<span class="type">String</span> = <span class="string">&quot;000000&quot;</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println( name + <span class="string">&quot;,&quot;</span> + password )</span><br><span class="line">        &#125;</span><br><span class="line">        fun8(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123123&quot;</span>)</span><br><span class="line">        fun8(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>带名参数</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun9</span></span>( password:<span class="type">String</span> = <span class="string">&quot;000000&quot;</span>, name:<span class="type">String</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println( name + <span class="string">&quot;,&quot;</span> + password )</span><br><span class="line">        &#125;</span><br><span class="line">        fun9(<span class="string">&quot;123123&quot;</span>, <span class="string">&quot;zhangsan&quot;</span> )</span><br><span class="line">        fun9(name=<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-函数至简原则（重点）"><a href="#5-5-函数至简原则（重点）" class="headerlink" title="5.5 函数至简原则（重点）"></a>5.5 函数至简原则（重点）</h3><p>​所谓的至简原则，其实就是Scala的作者为了开发人员能够大幅度提高开发效率。通过编译器的动态判定功能，帮助我们将函数声明中能简化的地方全部都进行了简化。也就是说将函数声明中那些能省的地方全部都省掉。所以这里的至简原则，简单来说就是：能省则省。</p><p><strong>省略return关键字</strong></p><p>函数会把最后一行代码的执行结果作为函数的返回值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun11</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>省略花括号</strong></p><p>如果逻辑代码只有一行，那么花括号可以省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>(): <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>省略返回值类型</strong></p><p>函数根据返回数据，判断出返回值类型，那么返回值类型可以省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun3</span></span>() = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>省略参数列表</strong></p><p>如果函数的参数列表没有声明任何的参数，那么参数列表可以删除</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun4</span> </span>= <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        fun4<span class="comment">// OK</span></span><br><span class="line">        fun4()<span class="comment">//(ERROR)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>省略等号</strong></p><p>​如果函数体中有明确的return语句，那么返回值类型不能省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun5</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(fun5())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​如果函数体返回值类型明确为Unit,那么函数体中即使有return关键字也不起作用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun5</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(fun5())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​如果函数体返回值类型声明为Unit,但是又想省略，那么此时就必须连同等号一起省略</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun5</span></span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(fun5())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>省略名称和关键字（称为匿名函数）</strong></p><p>省略的同时需要把返回值类型也删除，同时再等号的后面增加一个箭头</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            println(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-高阶函数编程"><a href="#6-高阶函数编程" class="headerlink" title="6. 高阶函数编程"></a>6. 高阶函数编程</h2><p>​所谓的高阶函数，其实就是把函数当作一个类型去使用，而不是当作特定的语法结构。</p><h3 id="6-1-函数作为值"><a href="#6-1-函数作为值" class="headerlink" title="6.1 函数作为值"></a>6.1 函数作为值</h3><p>如果我们要把一个函数作为整体，而不是执行结果赋值给变量，那么需要采用特殊符号：下划线</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun1</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> a = fun1     <span class="comment">//这行代码是把fun1函数的返回结果赋值给了a变量</span></span><br><span class="line">        <span class="keyword">val</span> b = fun1 _   <span class="comment">//这行代码是把fun1当作一个对象赋值给了b变量</span></span><br><span class="line">        <span class="keyword">val</span> c : ()=&gt;<span class="type">Unit</span> = fun1    <span class="comment">//这行代码指定了c的类型，因此也是把fun1当作一个对象赋值给了c变量</span></span><br><span class="line">        println(a) </span><br><span class="line">        println(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-函数作为参数"><a href="#6-2-函数作为参数" class="headerlink" title="6.2 函数作为参数"></a>6.2 函数作为参数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun2</span></span>( i:<span class="type">Int</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            i * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun22</span></span>( f : <span class="type">Int</span> =&gt; <span class="type">Int</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            f(<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        println(fun22(fun2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-函数作为返回值"><a href="#6-3-函数作为返回值" class="headerlink" title="6.3 函数作为返回值"></a>6.3 函数作为返回值</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun3</span></span>( i:<span class="type">Int</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            i * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun33</span></span>( ) = &#123;</span><br><span class="line">            fun3 _</span><br><span class="line">        &#125;</span><br><span class="line">        println(fun33()(<span class="number">10</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-匿名函数"><a href="#6-4-匿名函数" class="headerlink" title="6.4 匿名函数"></a>6.4 匿名函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun4</span></span>( f:<span class="type">Int</span> =&gt; <span class="type">Int</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            f(<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        println(fun4((x:<span class="type">Int</span>)=&gt;&#123;x * <span class="number">20</span>&#125;))</span><br><span class="line">        println(fun4((x)=&gt;&#123;x * <span class="number">20</span>&#125;))</span><br><span class="line">        println(fun4((x)=&gt;x * <span class="number">20</span>))</span><br><span class="line">        println(fun4(x=&gt;x * <span class="number">20</span>))</span><br><span class="line">        println(fun4(_ * <span class="number">20</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662195343430.png" alt="1662195343430"></p><h3 id="6-5-控制抽象"><a href="#6-5-控制抽象" class="headerlink" title="6.5 控制抽象"></a>6.5 控制抽象</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun7</span></span>(op: =&gt; <span class="type">Unit</span>) = &#123;</span><br><span class="line">            op</span><br><span class="line">        &#125;</span><br><span class="line">        fun7&#123;</span><br><span class="line">            println(<span class="string">&quot;xx&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以采用控制抽象设计语法，我们自己不常使用，语法框架使用的比较多</p><p>Scala的Breaks.breakable就是采用的控制抽象设计语法</p><h3 id="6-6-闭包"><a href="#6-6-闭包" class="headerlink" title="6.6 闭包"></a>6.6 闭包</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun5</span></span>() = &#123;</span><br><span class="line">            <span class="keyword">val</span> i = <span class="number">20</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">fun55</span></span>() = &#123;</span><br><span class="line">                i * <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">            fun55 _</span><br><span class="line">        &#125;</span><br><span class="line">        fun5()()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一个函数使用了外部的变量，把这个变量包含到了它的内部来使用，改变了这个变量的生命周期</p><p>将当前的代码形成了一个闭合的环境，这个环境称之为闭包环境，简称为闭包</p><p> <img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662220084225.png" alt="1662220084225"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662220154275.png" alt="1662220154275"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662220430708.png" alt="1662220430708"></p><p>​</p><p>​本质上，就是在内部函数增加了形参个数，从而把外部的变量延长了声明周期，因此内部函数也可以使用外部变量。</p><p><strong>闭包形成的三种情况：</strong></p><ol><li>内部函数在外部使用的时候会产生闭包</li><li>将函数作为对象使用，会产生闭包</li><li>所有的匿名函数都会产生闭包</li></ol><h3 id="6-7-函数柯里化"><a href="#6-7-函数柯里化" class="headerlink" title="6.7 函数柯里化"></a>6.7 函数柯里化</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun6</span></span>(i:<span class="type">Int</span>)(j:<span class="type">Int</span>) = &#123;</span><br><span class="line">            i * j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-递归函数"><a href="#6-8-递归函数" class="headerlink" title="6.8 递归函数"></a>6.8 递归函数</h3><ol><li>Scala 中要求递归函数必须明确声明返回值类型</li><li>函数内部需要调用自身</li><li>一定要有跳出递归的逻辑</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun8</span></span>(j:<span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">            <span class="keyword">if</span> ( j &lt;= <span class="number">1</span> ) &#123;</span><br><span class="line">                <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j * fun8(j<span class="number">-1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        println(fun8(<span class="number">5</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈内存溢出：</strong> 每一个线程都会有一个栈，当线程过多的时候，就会导致内存不够，从而出现栈内存溢出的错误</p><p><strong>栈滚动错误：</strong>每一个方法都会压栈，当递归使用函数的时候，如果不断的把函数压栈，当数目过多的时候，就是出现这个错误。</p><h3 id="6-9-惰性函数"><a href="#6-9-惰性函数" class="headerlink" title="6.9 惰性函数"></a>6.9 惰性函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun9</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">            println(<span class="string">&quot;function...&quot;</span>)</span><br><span class="line">            <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">lazy</span> <span class="keyword">val</span> a = fun9()</span><br><span class="line">        println(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-面向对象编程"><a href="#7-面向对象编程" class="headerlink" title="7. 面向对象编程"></a>7. 面向对象编程</h2><h3 id="7-1-基础面向对象编程"><a href="#7-1-基础面向对象编程" class="headerlink" title="7.1 基础面向对象编程"></a>7.1 基础面向对象编程</h3><h4 id="7-1-1-包"><a href="#7-1-1-包" class="headerlink" title="7.1.1 包"></a>7.1.1 包</h4><p>​Scala中基本的package包语法和Java完全一致</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala</span><br></pre></td></tr></table></figure><p>Java中package包的语法比较单一，Scala对此进行扩展</p><ul><li><p>Scala中的包和类的物理路径没有关系</p></li><li><p>package关键字可以嵌套声明使用</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com</span><br><span class="line"><span class="keyword">package</span> atguigu &#123;</span><br><span class="line">    <span class="keyword">package</span> bigdata &#123;</span><br><span class="line">        <span class="keyword">package</span> scala &#123;</span><br><span class="line">            <span class="class"><span class="keyword">object</span> <span class="title">ScalaPackage</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">                    println(<span class="string">&quot;test...&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同一个源码文件中子包可以直接访问父包中的内容，而无需import</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com</span><br><span class="line"><span class="keyword">package</span> atguigu &#123;</span><br><span class="line">    <span class="keyword">package</span> bigdata &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">package</span> scala &#123;</span><br><span class="line">            <span class="class"><span class="keyword">object</span> <span class="title">ScalaPackage</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Test</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala中package也可以看作对象，并声明属性和函数</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com</span><br><span class="line"><span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">atguigu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println( name )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> atguigu &#123;</span><br><span class="line">    <span class="keyword">package</span> bigdata &#123;</span><br><span class="line">        <span class="keyword">package</span> scala &#123;</span><br><span class="line">            <span class="class"><span class="keyword">object</span> <span class="title">ScalaPackage</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-导入"><a href="#7-1-2-导入" class="headerlink" title="7.1.2 导入"></a>7.1.2 导入</h4><p>​Scala中基本的import导入语法和Java完全一致</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> java.util._ <span class="comment">// Scala中使用下划线代替Java中的星号</span></span><br></pre></td></tr></table></figure><p>Java中import导入的语法比较单一，Scala对此进行扩展</p><ul><li>Scala中的import语法可以在任意位置使用</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImport</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">import</span> java.util.<span class="type">ArrayList</span></span><br><span class="line">        <span class="keyword">new</span>  <span class="type">ArrayList</span>()   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala中可以导包，而不是导类</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImport</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">import</span> java.util</span><br><span class="line">        <span class="keyword">new</span> util.<span class="type">ArrayList</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala中可以在同一行中导入相同包中的多个类，简化代码</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">List</span>, <span class="type">ArrayList</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala中可以屏蔽某个包中的类</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util._</span><br><span class="line"><span class="keyword">import</span> java.sql.&#123; <span class="type">Date</span>=&gt;_, <span class="type">Array</span>=&gt;_, _ &#125;</span><br></pre></td></tr></table></figure><ul><li>Scala中可以给类起别名，简化使用(跟python有点像)</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">ArrayList</span>=&gt;<span class="type">AList</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImport</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">AList</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认情况下，Scala中会导入如下包和对象</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang._</span><br><span class="line"><span class="keyword">import</span> scala._</span><br><span class="line"><span class="keyword">import</span> scala.<span class="type">Predef</span>._</span><br></pre></td></tr></table></figure><h4 id="7-1-3-类"><a href="#7-1-3-类" class="headerlink" title="7.1.3 类"></a>7.1.3 类</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类：访问权限 class 类名 &#123; 类主体内容 &#125; </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类的主体内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象：new 类名(参数列表)</span></span><br><span class="line"><span class="keyword">new</span> <span class="type">User</span>()</span><br></pre></td></tr></table></figure><p>​Scala中一个源文件中可以声明多个公共类</p><h4 id="7-1-4-属性"><a href="#7-1-4-属性" class="headerlink" title="7.1.4 属性"></a>7.1.4 属性</h4><ol><li>属性其实就是类中的变量</li><li>在Scala之中，编译的时候，编译器会把变量编译为类的私有属性，同时提供了属性对应的set以及get方法</li><li>当在其它地方给类的属性赋值的时候，等同于调用了它公有的set方法</li><li>val声明的属性，编译的时候，会给属性添加final关键字，编译器不会提供set方法</li><li>在scala之中给某个属性添加private关键字之后，编译器会把其set和get方法添加上private修饰符</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = _ <span class="comment">// 类属性其实就是类变量</span></span><br><span class="line">    <span class="keyword">var</span> age : <span class="type">Int</span> = _ <span class="comment">// 下划线表示类的属性默认初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道在java中对于一个类有Bean规范，就是属性私有化，提供其公有的set和get方法，原因是因为反射机制，我们需要把架构设计的通用化，但是scala中给属性提供的set和get方法名字与java Bean规范中的不一致，因此不遵循bean规范，为了满足java中的Bean规范，设计了一个关键字</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = _</span><br><span class="line"><span class="keyword">val</span> age : <span class="type">Int</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> email : <span class="type">String</span> = _</span><br><span class="line"><span class="meta">@BeanProperty</span> <span class="keyword">var</span> address : <span class="type">String</span> = _    <span class="comment">//为了满足java的bean规范</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-5-访问权限"><a href="#7-1-5-访问权限" class="headerlink" title="7.1.5 访问权限"></a>7.1.5 访问权限</h4><p>在java中，一共有四个访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">private</span>           只能在本类中使用</span><br><span class="line"><span class="number">2.</span> （<span class="keyword">default</span>）        在本类中以及本包中使用</span><br><span class="line"><span class="number">3.</span> <span class="keyword">protected</span>         本类别、本包、子类中使用</span><br><span class="line"><span class="number">4.</span> <span class="keyword">public</span>            任意</span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662258877616.png" alt="1662258877616"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662258979964.png" alt="1662258979964"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662259012241.png" alt="1662259012241"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662259058809.png" alt="1662259058809"></p><p>super关键字只在编译时其作用，在运行时根本没有这个关键字</p><p>在scala中去掉了一个关键字</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">private</span>        同类中可以使用</span><br><span class="line"><span class="number">2.</span> <span class="keyword">private</span>[包名]   同包内可以使用</span><br><span class="line"><span class="number">3.</span> <span class="keyword">protected</span>      同类和子类（同包不能使用）</span><br><span class="line"><span class="number">4.</span> (<span class="keyword">default</span>)      公共的，相当于public关键字</span><br></pre></td></tr></table></figure><h4 id="7-1-6-方法"><a href="#7-1-6-方法" class="headerlink" title="7.1.6 方法"></a>7.1.6 方法</h4><p>在类中声明的函数，就是方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaMethod</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> user = <span class="keyword">new</span> <span class="type">User</span></span><br><span class="line">        user.login(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;000000&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span></span>( name:<span class="type">String</span>, password:<span class="type">String</span> ): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662260405624.png" alt="1662260405624"></p><p>方法的重写：</p><p>如何区分父类以及子类中相同的方法，需要采用动态绑定机制</p><p>在调用对象的成员方法过程中，把方法和对象的实际内存进行绑定，然后调用</p><h4 id="7-1-7-对象"><a href="#7-1-7-对象" class="headerlink" title="7.1.7 对象"></a>7.1.7 对象</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> | <span class="keyword">var</span> 对象名 [：类型]  = <span class="keyword">new</span> 类型()</span><br><span class="line"><span class="keyword">var</span> user : <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line"><span class="comment">//1. 反射</span></span><br><span class="line"><span class="comment">//2. new</span></span><br><span class="line"><span class="comment">//3. 反序列化</span></span><br><span class="line"><span class="comment">//4. 克隆</span></span><br></pre></td></tr></table></figure><h4 id="7-1-8-构造方法"><a href="#7-1-8-构造方法" class="headerlink" title="7.1.8 构造方法"></a>7.1.8 构造方法</h4><p>Scala是一个完全面向对象的语言，又是一个完全面向函数的语言</p><p>因此类也是一个函数：声明一个类就等同于声明了一个函数</p><p>类名的后面可以声明小括号，表示构造参数列表</p><p>如果提供了类的构造方法，那么jvm不会再给类提供无参的构造方法</p><p>在Scala中把构造方法分为了两类：主构造方法和辅助构造方法</p><p>用于完成类的初始化操作的构造方法称之为主构造方法</p><p>其它的构造方法称为辅助构造发方法，辅助构造方法的名字是this关键字，其它和普通方法一样</p><p>辅助构造方法的作用就是在完成类的初始化工作之后，做一些辅助功能，在执行之前，应当首先调用主构造方法完成类的初始化 </p><p>辅助构造方法可以重载，并且可以互相调用，但是调用的辅助构造方法应该提前声明</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 主构造函数</span></span><br><span class="line">    <span class="keyword">var</span> username : <span class="type">String</span> = _ </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>( name:<span class="type">String</span> ) &#123; <span class="comment">// 辅助构造函数，使用this关键字声明</span></span><br><span class="line">        <span class="keyword">this</span>() <span class="comment">// 辅助构造函数应该直接或间接调用主构造函数</span></span><br><span class="line">        username = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>( name:<span class="type">String</span>, password:<span class="type">String</span> ) &#123;</span><br><span class="line">    <span class="keyword">this</span>(name) <span class="comment">// 构造器调用其他另外的构造器，要求被调用构造器必须提前声明</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>object关键字</strong></p><p>构造方法私有化：在参数列表的前面增加private关键字</p><p>需要声明一个公共的，静态的返回本类型的方法，用于获取对象，但是Scala中不存在静态语法，所有这就构成了死锁，没有静态语法我们就没有办法使用类中的方法，不使用类的方法就没办法得到类的对象。因此Scala中采用了一种特殊的语法来代替静态语法：object</p><p> <img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662263161792.png" alt="1662263161792"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662263252806.png" alt="1662263252806"></p><h3 id="7-2-高阶面向对象编程"><a href="#7-2-高阶面向对象编程" class="headerlink" title="7.2 高阶面向对象编程"></a>7.2 高阶面向对象编程</h3><h4 id="7-2-1-继承"><a href="#7-2-1-继承" class="headerlink" title="7.2.1 继承"></a>7.2.1 继承</h4><p>​和Java一样，Scala中的继承也是单继承，且使用extends关键字。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​构造对象时需要考虑构造方法的执行顺序</p><h4 id="7-2-2-封装"><a href="#7-2-2-封装" class="headerlink" title="7.2.2 封装"></a>7.2.2 封装</h4><p>封装就是把抽象出的数据和对数据的操作封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作（成员方法），才能对数据进行访问。</p><ol><li>将属性进行私有化</li><li>提供一个公共的set方法，用于对属性赋值</li><li>提供一个公共的get方法，用于获取属性的值</li></ol><h4 id="7-2-3-抽象"><a href="#7-2-3-抽象" class="headerlink" title="7.2.3 抽象"></a>7.2.3 抽象</h4><p>​<strong>所谓的抽象，其实就是就是不完整</strong></p><p>Scala中不完整的方法就是抽象方法，不需要额外增加abstract关键字</p><p>Scala中的属性也是可以抽象的，就是只有声明，没有初始化，<strong>在编译器编译过程中，并不会声明该属性，而是会声明属性的set以及get方法，而且是抽象的</strong></p><p>在Scala中重写父类的完整方法，必须要添加override关键字</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662266884520.png" alt="1662266884520"></p><p>上图那个age属性，也需要添加override关键字，不然会报错，而且上述会执行错误，因为在Scala中的可变变量属性不允许重写。只有val不可变变量才可以重写</p><p>Scala将一个不完整的类称之为抽象类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala中如果一个方法只有声明而没有实现，那么是抽象方法，因为它不完整。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>():<span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala中如果一个属性只有声明没有初始化，那么是抽象属性，因为它不完整。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类如果继承抽象类，必须实现抽象方法或补全抽象属性，否则也必须声明为抽象的，因为依然不完整。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-4-单例对象"><a href="#7-2-4-单例对象" class="headerlink" title="7.2.4 单例对象"></a>7.2.4 单例对象</h4><ul><li><p>所谓的单例对象，就是在程序运行过程中，指定类的对象只能创建一个，而不能创建多个。这样的对象可以由特殊的设计方式获得，也可以由语言本身设计得到，比如object伴生对象</p></li><li><p>Scala语言是完全面向对象的语言，所以并没有静态的操作（即在Scala中没有静态的概念）。但是为了能够和Java语言交互（因为Java中有静态概念），就产生了一种特殊的对象来模拟类对象，该对象为单例对象。若单例对象名与类名一致，则称该单例对象这个类的伴生对象，这个类的所有“静态”内容都可以放置在它的伴生对象中声明，然后通过伴生对象名称直接调用</p></li><li><p>如果类名和伴生对象名称保持一致，那么这个类称之为伴生类。Scala编译器可以通过伴生对象的apply方法创建伴生类对象。apply方法可以重载，并传递参数，且可由Scala编译器自动识别。所以在使用时，其实是可以省略的。</p></li></ul> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; <span class="comment">// 伴生类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">User</span> </span>&#123; <span class="comment">// 伴生对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>() = <span class="keyword">new</span> <span class="type">User</span>() <span class="comment">// 构造伴生类对象</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">val</span> user1 = <span class="keyword">new</span> <span class="type">User</span>()<span class="comment">// 通过构造方法创建对象</span></span><br><span class="line"><span class="type">Val</span> user2 = <span class="type">User</span>.apply() <span class="comment">// 通过伴生对象的apply方法构造伴生类对象 </span></span><br><span class="line"><span class="keyword">val</span> user3 = <span class="type">User</span>() <span class="comment">// scala编译器省略apply方法，自动完成调用</span></span><br></pre></td></tr></table></figure><h4 id="7-2-5-特质"><a href="#7-2-5-特质" class="headerlink" title="7.2.5 特质"></a>7.2.5 特质</h4><p>将多个对象中的相同特征，从对象中剥离出来，形成一个独立的结构，称之为trait(特质)</p><p>如果一个对象符合这个特征，那么可以把这个特征加入到这个对象，这个加入的过程，称之为混入</p><p>如果一个类只有一个特征的时候，采用extends关键字进入混入，但是一个类有多个特征的时候，第一个特征使用extends，后面的采用with</p><p>如果一个类还有父类，那么父类使用extends，剩余的特征使用with关键字 </p><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">特质名称</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span> <span class="keyword">extends</span> <span class="title">父类（特质1）</span> <span class="keyword">with</span> <span class="title">特质2</span> <span class="keyword">with</span><span class="title">特质3</span></span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> <span class="keyword">extends</span> <span class="title">Operator</span> <span class="keyword">with</span> <span class="title">DB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态混入</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTrait</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> mysql = <span class="keyword">new</span> <span class="type">MySQL</span> <span class="keyword">with</span> <span class="type">Operator</span></span><br><span class="line">        mysql.insert()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;insert data...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了解耦合</p><p><strong>初始化叠加</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTrait</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> mysql = <span class="keyword">new</span> <span class="type">MySQL</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">    println(<span class="string">&quot;operator...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line">    println(<span class="string">&quot;db...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> <span class="keyword">extends</span> <span class="title">DB</span> <span class="keyword">with</span> <span class="title">Operator</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;mysql...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能叠加</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTrait</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> mysql: <span class="type">MySQL</span> = <span class="keyword">new</span> <span class="type">MySQL</span></span><br><span class="line">        mysql.operData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Operate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operData</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">        println(<span class="string">&quot;操作数据。。&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DB</span> <span class="keyword">extends</span> <span class="title">Operate</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">operData</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        print(<span class="string">&quot;向数据库中。。&quot;</span>)</span><br><span class="line">        <span class="keyword">super</span>.operData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Log</span> <span class="keyword">extends</span> <span class="title">Operate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">operData</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">super</span>.operData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span> <span class="keyword">extends</span> <span class="title">DB</span> <span class="keyword">with</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MySQL类实现了两个特质，但这两个特质都重写了operData这个方法，那么MySQL对象调用这个方法会执行哪一个特质中的方法呢？</p><p>Scala采用了一种功能叠加的方式</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662269247529.png" alt="1662269247529"></p><p>而且在Scala中的super并不是父特质的意思，是上一级的意思 </p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662269346887.png" alt="1662269346887"></p><p>可以通过上述这种跳过的方式，防止功能叠加 </p><h4 id="7-2-6-扩展"><a href="#7-2-6-扩展" class="headerlink" title="7.2.6 扩展"></a>7.2.6 扩展</h4><p>字符串：不可变</p><p>这个不可变指的是字符串的char数组的内存地址不可变，并不是指的其中的内容不可变，下图展示了如何改变一个字符串内部char数组的值的策略。需要通过反射机制来获取。</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662269704341.png" alt="1662269704341"></p><p> <strong>枚举类</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">RED</span> = <span class="type">Value</span>(<span class="number">1</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> <span class="type">YELLOW</span> = <span class="type">Value</span>(<span class="number">2</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> <span class="type">BLUE</span> = <span class="type">Value</span>(<span class="number">3</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>应用类</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用类</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AppTest</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    println(<span class="string">&quot;application&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Type定义新类型</strong></p><p>使用type关键字可以定义新的数据数据类型名称，本质上就是类型的一个别名</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="class"><span class="keyword">type</span> <span class="title">S</span> </span>= <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> v : <span class="type">S</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-集合"><a href="#8-集合" class="headerlink" title="8.集合"></a>8.集合</h2><h3 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h3><p>​Scala的集合有三大类：序列Seq、集Set、映射Map，所有的集合都扩展自Iterable特质。对于几乎所有的集合类，Scala都同时提供了可变和不可变的版本。</p><p>​可变集合可以在适当的地方被更新或扩展。这意味着你可以修改，添加，移除一个集合的元素。而不可变集合类，相比之下，永远不会改变。不过，你仍然可以模拟添加，移除或更新操作。但是这些操作将在每一种情况下都返回一个新的集合，同时使原来的集合不发生改变，所以这里的不可变并不是变量本身的值不可变，而是变量指向的那个内存地址不可变</p><p>​可变集合和不可变集合，在scala中该如何进行区分呢？我们一般可以根据集合所在包名进行区分:</p><p>scala.collection.immutable（不可变的）</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662276540357.png" alt="1662276540357"></p><p>scala.collection.mutable（可变的）</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662276750168.png" alt="1662276750168"></p><h3 id="8-2-数组"><a href="#8-2-数组" class="headerlink" title="8.2 数组"></a>8.2 数组</h3><p>​数组在严格意义上并不是集合，在Scala中给数组一个特定的类型：Array</p><p><strong>Array数组的构建、访问、遍历方法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala01_Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 数组</span></span><br><span class="line">        <span class="comment">// 数组 ：严格意义上，数组不是集合</span></span><br><span class="line">        <span class="comment">//      scala中给数组一个特定的类型：Array</span></span><br><span class="line">        <span class="comment">// TODO 构建</span></span><br><span class="line">        <span class="comment">// String[]</span></span><br><span class="line">        <span class="comment">// 构建Scala中的数组，其实等同于构造Java的数组</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">3</span>)</span><br><span class="line">        println(array)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问</span></span><br><span class="line">        <span class="comment">// 可以根据索引访问数组的元素</span></span><br><span class="line">        <span class="comment">//array.update(1, &quot;abc&quot;)</span></span><br><span class="line">        <span class="comment">// 中括号在scala中表示泛型，所以不能在索引操作中使用，使用小括号</span></span><br><span class="line">        array(<span class="number">1</span>) = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- array ) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Array其它构建方法、遍历方法、访问方法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala01_Collection_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 数组</span></span><br><span class="line">        <span class="comment">// 集合分为两大类：可变集合，不可变集合</span></span><br><span class="line">        <span class="comment">// Scala默认提供的集合都是不可变。</span></span><br><span class="line"><span class="comment">//        val array = new Array[String](3)</span></span><br><span class="line"><span class="comment">//        array(0) = &quot;a&quot;</span></span><br><span class="line"><span class="comment">//        array(1) = &quot;a&quot;</span></span><br><span class="line"><span class="comment">//        array(2) = &quot;a&quot;</span></span><br><span class="line">        <span class="comment">// 使用集合的伴生对象构建集合，并同时初始化</span></span><br><span class="line">        <span class="keyword">val</span> array1 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> array2 = <span class="type">Array</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        <span class="comment">//val array2 = Array.apply(1,2,3,4)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问</span></span><br><span class="line">        <span class="comment">//val ints: Array[Int] = array1.+:(5)</span></span><br><span class="line">        <span class="comment">// scala中如果运算符是以冒号结尾，那么运算规则为从后向前计算</span></span><br><span class="line">        <span class="keyword">val</span> ints = <span class="number">5</span> +: array1</span><br><span class="line"></span><br><span class="line">        <span class="comment">//val ints1: Array[Int] = array1.:+(5)</span></span><br><span class="line">        <span class="keyword">val</span> ints1 = array1 :+ <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> ints2 = array1 ++ array2</span><br><span class="line">        <span class="keyword">val</span> ints3 = array1 ++: array2</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array1 eq ints)</span></span><br><span class="line">        <span class="comment">//println(array1 eq ints1)</span></span><br><span class="line">       <span class="comment">// println(ints eq ints1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 遍历</span></span><br><span class="line">        <span class="comment">//println(ints.mkString(&quot;,&quot;))</span></span><br><span class="line">        <span class="comment">//println(ints1.mkString(&quot;,&quot;))</span></span><br><span class="line">        <span class="comment">//println(ints2.mkString(&quot;,&quot;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// foreach方法是一个循环的方法，需要传递一个参数，这个从参数的类型是函数类型</span></span><br><span class="line">        <span class="comment">//  函数类型 ： Int =&gt; U</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">foreachFunction</span></span>(num:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(num)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//array1.foreach(foreachFunction)</span></span><br><span class="line">        <span class="comment">//array1.foreach((num:Int)=&gt;&#123;println(num)&#125;)</span></span><br><span class="line">        <span class="comment">//array1.foreach((num:Int)=&gt;println(num))</span></span><br><span class="line">        <span class="comment">//array1.foreach((num)=&gt;println(num))</span></span><br><span class="line">        <span class="comment">//array1.foreach(num=&gt;println(num))</span></span><br><span class="line">        array1.foreach(println(_))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala01_Collection_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 数组</span></span><br><span class="line">        <span class="comment">// 多维数组</span></span><br><span class="line">        <span class="keyword">var</span> myMatrix = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="comment">//myMatrix.foreach(list=&gt;println(list.mkString(&quot;,&quot;)))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> arr1 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> arr2 = <span class="type">Array</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        <span class="comment">// 合并数组</span></span><br><span class="line">        <span class="keyword">val</span> arr6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.concat(arr1, arr2)</span><br><span class="line">        <span class="comment">//arr6.foreach(println)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建指定范围的数组</span></span><br><span class="line">        <span class="keyword">val</span> arr7: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.range(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">//arr7.foreach(println)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> arr8:<span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.fill[<span class="type">Int</span>](<span class="number">5</span>)(<span class="number">-1</span>)</span><br><span class="line">        arr8.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-1-不可变数组"><a href="#8-2-1-不可变数组" class="headerlink" title="8.2.1 不可变数组"></a>8.2.1 不可变数组</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">//（1）数组定义</span></span><br><span class="line">        <span class="keyword">val</span> arr01 = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">4</span>)</span><br><span class="line">        println(arr01.length) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//（2）数组赋值</span></span><br><span class="line">        <span class="comment">//（2.1）修改某个元素的值</span></span><br><span class="line">        arr01(<span class="number">3</span>) = <span class="number">10</span></span><br><span class="line">        <span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line">        arr01(i/<span class="number">3</span>) = <span class="number">20</span></span><br><span class="line">        <span class="comment">//（2.2）采用方法的形式修改数组的值</span></span><br><span class="line">        arr01.update(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（3）遍历数组</span></span><br><span class="line">        <span class="comment">//（3.1）查看数组</span></span><br><span class="line">        println(arr01.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（3.2）普通遍历</span></span><br><span class="line">        <span class="keyword">for</span> (i &lt;- arr01) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//（3.3）简化遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">printx</span></span>(elem:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(elem)</span><br><span class="line">        &#125;</span><br><span class="line">        arr01.foreach(printx)</span><br><span class="line">        arr01.foreach((x)=&gt;&#123;println(x)&#125;)</span><br><span class="line">        arr01.foreach(println(_))</span><br><span class="line">        arr01.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 创建数组的另外一种方式</span></span><br><span class="line">        <span class="keyword">val</span> arr1 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> arr2 = <span class="type">Array</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        <span class="comment">// 添加数组元素，创建新数组</span></span><br><span class="line">        <span class="keyword">val</span> arr3: <span class="type">Array</span>[<span class="type">Int</span>] = arr1 :+ <span class="number">5</span></span><br><span class="line">        println( arr1 eq arr3 ) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> arr4: <span class="type">Array</span>[<span class="type">Int</span>] = arr1 ++: arr2</span><br><span class="line">        <span class="comment">// 添加集合</span></span><br><span class="line">        <span class="keyword">val</span> arr5: <span class="type">Array</span>[<span class="type">Int</span>] = arr1 ++ arr2</span><br><span class="line"></span><br><span class="line">        arr4.foreach(println)</span><br><span class="line">        println(<span class="string">&quot;****************&quot;</span>)</span><br><span class="line">        arr5.foreach(println)</span><br><span class="line">        println(<span class="string">&quot;****************&quot;</span>)</span><br><span class="line">        <span class="comment">// 多维数组</span></span><br><span class="line">        <span class="keyword">var</span> myMatrix = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">        myMatrix.foreach(list=&gt;list.foreach(println))</span><br><span class="line">        <span class="comment">// 合并数组</span></span><br><span class="line">        <span class="keyword">val</span> arr6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.concat(arr1, arr2)</span><br><span class="line">        arr6.foreach(println)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建指定范围的数组</span></span><br><span class="line">        <span class="keyword">val</span> arr7: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.range(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        arr7.foreach(println)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并填充指定数量的数组</span></span><br><span class="line">        <span class="keyword">val</span> arr8:<span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>.fill[<span class="type">Int</span>](<span class="number">5</span>)(<span class="number">-1</span>)</span><br><span class="line">        arr8.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-2-可变数组"><a href="#8-2-2-可变数组" class="headerlink" title="8.2.2 可变数组"></a>8.2.2 可变数组</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]</span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        buffer.append(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        buffer.update(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">        buffer(<span class="number">1</span>) = <span class="number">6</span></span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        <span class="keyword">val</span> i: <span class="type">Int</span> = buffer.remove(<span class="number">2</span>)</span><br><span class="line">        buffer.remove(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 查询数据</span></span><br><span class="line">        println(buffer(<span class="number">3</span>))</span><br><span class="line">        <span class="comment">// 循环集合</span></span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- buffer ) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> buffer1 = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> buffer2 = <span class="type">ArrayBuffer</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> buffer3: <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = buffer1 += <span class="number">5</span></span><br><span class="line">        println( buffer1 eq buffer3 ) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 ++ 运算符会产生新的集合数组</span></span><br><span class="line">        <span class="keyword">val</span> buffer4: <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = buffer1 ++ buffer2</span><br><span class="line">        <span class="comment">// 使用 ++= 运算符会更新之前的集合，不会产生新的数组</span></span><br><span class="line">        <span class="keyword">val</span> buffer5: <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = buffer1 ++= buffer2</span><br><span class="line">        println( buffer1 eq buffer4 ) <span class="comment">// false</span></span><br><span class="line">        println( buffer1 eq buffer5 ) <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-3-不可变数组和可变数组的转换"><a href="#8-2-3-不可变数组和可变数组的转换" class="headerlink" title="8.2.3 不可变数组和可变数组的转换"></a>8.2.3 不可变数组和可变数组的转换</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> buffer = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将不可变数组转换为可变数组</span></span><br><span class="line">        <span class="keyword">val</span> buffer1: mutable.<span class="type">Buffer</span>[<span class="type">Int</span>] = array.toBuffer</span><br><span class="line">        <span class="comment">// 将可变数组转换为不可变数组</span></span><br><span class="line">        <span class="keyword">val</span> array1: <span class="type">Array</span>[<span class="type">Int</span>] = buffer.toArray</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-4-常用方法"><a href="#8-2-4-常用方法" class="headerlink" title="8.2.4 常用方法"></a>8.2.4 常用方法</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala03_Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        println(array.size)</span><br><span class="line">        println(array.length)</span><br><span class="line">        println(array.isEmpty)</span><br><span class="line">        println(array.contains(<span class="number">2</span>))</span><br><span class="line">        println(array.distinct.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        println(array.reverse.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        println(array.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        array.foreach(println)</span><br><span class="line">        array.iterator</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala03_Collection_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从集合中获取部分数据</span></span><br><span class="line">        println(array.head)</span><br><span class="line">        println(array.tail)</span><br><span class="line">        println(array.tails)</span><br><span class="line">        println(array.last)</span><br><span class="line">        println(array.init) <span class="comment">// 初始</span></span><br><span class="line">        println(array.inits)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取前几个</span></span><br><span class="line">        println(array.take(<span class="number">3</span>))</span><br><span class="line">        <span class="comment">//println(array.reverse.take(2).reverse)</span></span><br><span class="line">        println(array.takeRight(<span class="number">2</span>))</span><br><span class="line">        println(array.drop(<span class="number">1</span>))</span><br><span class="line">        println(array.dropRight(<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-常用方法"><a href="#8-3-常用方法" class="headerlink" title="8.3 常用方法"></a>8.3 常用方法</h3><h4 id="8-3-1-reduce-amp-reduceLeft-amp-reduceRight"><a href="#8-3-1-reduce-amp-reduceLeft-amp-reduceRight" class="headerlink" title="8.3.1 reduce &amp; reduceLeft  &amp; reduceRight"></a>8.3.1 reduce &amp; reduceLeft  &amp; reduceRight</h4><p><strong>reduce的内部其实就是reduceLeft</strong></p><p><strong>reduceRight的底层其实也是reduceLeft，只不过先把数组翻转，然后开始从左往右计算，不过把x,y参数颠倒，详细请见下面的代码</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala03_Collection_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        println(array.sum)</span><br><span class="line">        println(array.max)</span><br><span class="line">        println(array.min)</span><br><span class="line">        println(array.product)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义数据操作的方法</span></span><br><span class="line">        <span class="comment">// 集合的数据无论是多少，最基本的数据操作其实都是两两计算。</span></span><br><span class="line">        <span class="comment">// map =&gt; reduce =&gt; 简化，规约（聚合）</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">reduceFunction</span></span>(x : <span class="type">Int</span>, y : <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">            x + y</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array.reduce(reduceFunction))</span></span><br><span class="line">        <span class="comment">//println(array.reduce((x:Int, y:Int)=&gt;&#123;x + y&#125;))</span></span><br><span class="line">        <span class="comment">//println(array.reduce((x:Int, y:Int)=&gt;x + y))</span></span><br><span class="line">        <span class="comment">//println(array.reduce((x, y)=&gt;x + y))</span></span><br><span class="line">        println(array.reduce(_ - _))  <span class="comment">// -13</span></span><br><span class="line">        println(array.reduceLeft(_ - _)) <span class="comment">// -13</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【1，2，3，4】</span></span><br><span class="line">        <span class="comment">//  (((1 + 2) + 3) + 4)</span></span><br><span class="line">        <span class="comment">// reversed.reduceLeft[B]((x, y) =&gt; op(y, x))</span></span><br><span class="line">        <span class="comment">// 【1，2，3，4, 5】</span></span><br><span class="line">        <span class="comment">// 【5，4，3，2，1】</span></span><br><span class="line">        <span class="comment">//  1 - (2 - (3 - (4 - 5)))</span></span><br><span class="line">        <span class="comment">// 【1，2，3，4】</span></span><br><span class="line">        <span class="comment">// (1 - (2 - (3 - 4)))</span></span><br><span class="line">        println(array.reduceRight(_ - _)) <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-fold-amp-scan"><a href="#8-3-2-fold-amp-scan" class="headerlink" title="8.3.2 fold &amp; scan"></a>8.3.2 fold &amp; scan</h4><p><strong>fold的作用是把集合外的数据和集合内的数据一块做操作</strong></p><p><strong>scan的作用是两两计算的临时结果的保存</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala03_Collection_3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> num = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 折叠</span></span><br><span class="line">        <span class="comment">//println(array.fold(5)(_ - _))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// (((5 - 1) - 2) - 3) - 4</span></span><br><span class="line">        <span class="comment">//println(array.foldLeft(5)(_ - _))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// reversed.foldLeft(z)((x, y) =&gt; op(y, x))</span></span><br><span class="line">        <span class="comment">// 【1，2，3，4】</span></span><br><span class="line">        <span class="comment">// 【4，3，2，1】</span></span><br><span class="line">        <span class="comment">//  1 - (2  - (3 - (4 - 5)))</span></span><br><span class="line">        println(array.foldRight(<span class="number">5</span>)(_ - _))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array.scan(5)(_ - _))</span></span><br><span class="line">        println(array.scanRight(<span class="number">5</span>)(_-_))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-map"><a href="#8-3-3-map" class="headerlink" title="8.3.3 map"></a>8.3.3 map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 功能函数：由集合对象提供函数执行自定义的功能</span></span><br><span class="line">        <span class="comment">//  1. map =&gt; 映射(转换) =&gt; K-&gt;V</span></span><br><span class="line">        <span class="comment">//     a =&gt; b</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// map方法需要传递一个参数，这个参数的类型为函数类型: Int =&gt; B</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mapFunction</span></span>( num:<span class="type">Int</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            num * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array.map(mapFunction))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        println(array.map(</span></span><br><span class="line"><span class="comment">//            (num:Int) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//                num * 2</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        ))</span></span><br><span class="line"></span><br><span class="line">        println(array.map(_*<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-4-flatMap"><a href="#8-3-4-flatMap" class="headerlink" title="8.3.4 flatMap"></a>8.3.4 flatMap</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Collection_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line"><span class="comment">//        val array = ArrayBuffer(</span></span><br><span class="line"><span class="comment">//            ArrayBuffer(</span></span><br><span class="line"><span class="comment">//                ArrayBuffer(1,2),ArrayBuffer(5,6)</span></span><br><span class="line"><span class="comment">//            ), ArrayBuffer(</span></span><br><span class="line"><span class="comment">//                ArrayBuffer(3,4),ArrayBuffer(7,8)</span></span><br><span class="line"><span class="comment">//            )</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array.length)</span></span><br><span class="line">        <span class="comment">// 将整体拆分成个体的操作，称之为扁平化</span></span><br><span class="line">        <span class="comment">// 扁平化操作只能对最外层进行操作</span></span><br><span class="line">        <span class="comment">//println(array.flatten.flatten)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">Array</span>(</span><br><span class="line">            <span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello Hadoop&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(array.flatten.mkString(&quot;,&quot;))</span></span><br><span class="line"></span><br><span class="line">        println(array.flatMap(</span><br><span class="line">            str =&gt; &#123;</span><br><span class="line">                str.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-5-filter"><a href="#8-3-5-filter" class="headerlink" title="8.3.5 filter"></a>8.3.5 filter</h4><p>filter函数对于每一条数据进行筛选操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Collection_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// filter方法可以对集合中的每一条数据进行筛选过滤</span></span><br><span class="line">        <span class="comment">// 满足条件（true）的数据保留，不满足条件(false)的数据丢弃</span></span><br><span class="line">        <span class="keyword">val</span> r = array.filter(</span><br><span class="line">            num =&gt; &#123;</span><br><span class="line">                num % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        println(r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-6-groupBy"><a href="#8-3-6-groupBy" class="headerlink" title="8.3.6 groupBy"></a>8.3.6 groupBy</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Collection_3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line"><span class="comment">//        val array = ArrayBuffer(1,2,3,4)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 根据指定的规则对每一条数据进行分组</span></span><br><span class="line"><span class="comment">//        val r = array.groupBy(</span></span><br><span class="line"><span class="comment">//            num =&gt; &#123;</span></span><br><span class="line"><span class="comment">////                if ( num % 2 == 0 ) &#123;</span></span><br><span class="line"><span class="comment">////                    &quot;偶数&quot;</span></span><br><span class="line"><span class="comment">////                &#125; else &#123;</span></span><br><span class="line"><span class="comment">////                    &quot;奇数&quot;</span></span><br><span class="line"><span class="comment">////                &#125;</span></span><br><span class="line"><span class="comment">//                num % 2</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        println(r)</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(</span><br><span class="line">            <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Scala&quot;</span>, <span class="string">&quot;Hadoop&quot;</span>, <span class="string">&quot;Spark&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        println(array.groupBy(_.substring(<span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-7-sortBy"><a href="#8-3-7-sortBy" class="headerlink" title="8.3.7 sortBy"></a>8.3.7 sortBy</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Collection_4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 集合 - 方法</span></span><br><span class="line">        <span class="comment">//val array = ArrayBuffer(1,4,2,3)</span></span><br><span class="line">        <span class="keyword">val</span> array = <span class="type">ArrayBuffer</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;22&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序:通过指定的规则对每一条数据进行排序处理， 默认为升序</span></span><br><span class="line">        println(array.sortBy(</span><br><span class="line">            num =&gt; num.toInt</span><br><span class="line">        ))</span><br><span class="line">        println(array.sortBy(num =&gt; num.toInt)(<span class="type">Ordering</span>.<span class="type">Int</span>.reverse))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala13_Collection_Method_7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> user1 = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        user1.age = <span class="number">20</span></span><br><span class="line">        user1.salary = <span class="number">2000</span></span><br><span class="line">        <span class="keyword">val</span> user2 = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        user2.age = <span class="number">30</span></span><br><span class="line">        user2.salary = <span class="number">2000</span></span><br><span class="line">        <span class="keyword">val</span> user3 = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        user3.age = <span class="number">30</span></span><br><span class="line">        user3.salary = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> users = <span class="type">List</span>(</span><br><span class="line">            user1, user2, user3</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">//println(users.sortBy(_.age)(Ordering.Int.reverse))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tuple : 元组,可以默认排序，先比较第一个，如果相同，比较第二个，依此类推</span></span><br><span class="line"><span class="comment">//        println(</span></span><br><span class="line"><span class="comment">//            users.sortBy(</span></span><br><span class="line"><span class="comment">//                user =&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    ( user.age, user.salary )</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            )(Ordering.Tuple2[Int, Int]( Ordering.Int, Ordering.Int.reverse ))</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义排序</span></span><br><span class="line">        println(users.sortWith(</span><br><span class="line">            (user1, user2) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 将你期望的结果，返回为true</span></span><br><span class="line">                <span class="comment">//user1.salary &gt; user2.salary</span></span><br><span class="line">                <span class="keyword">if</span> ( user1.age &lt; user2.age ) &#123;</span><br><span class="line">                    <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user1.age == user2.age ) &#123;</span><br><span class="line">                    user1.salary &lt; user2.salary</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age : <span class="type">Int</span> = _</span><br><span class="line">        <span class="keyword">var</span> salary : <span class="type">Int</span> = _</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">s&quot;User[<span class="subst">$&#123;age&#125;</span>, <span class="subst">$&#123;salary&#125;</span>]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-8-sliding"><a href="#8-3-8-sliding" class="headerlink" title="8.3.8 sliding"></a>8.3.8 sliding</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter07</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala13_Collection_Method_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        <span class="comment">//println(list1.drop(1))</span></span><br><span class="line">        <span class="comment">//list1.head + list1.tail.head</span></span><br><span class="line">        <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="comment">// 滚动窗口</span></span><br><span class="line">        <span class="keyword">val</span> iterator: <span class="type">Iterator</span>[<span class="type">List</span>[<span class="type">Int</span>]] = list1.sliding(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">            <span class="keyword">val</span> ints: <span class="type">List</span>[<span class="type">Int</span>] = iterator.next()</span><br><span class="line">            println(ints)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-Seq集合"><a href="#8-4-Seq集合" class="headerlink" title="8.4 Seq集合"></a>8.4 Seq集合</h3><h4 id="8-4-1-不可变List"><a href="#8-4-1-不可变List" class="headerlink" title="8.4.1 不可变List"></a>8.4.1 不可变List</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Seq集合</span></span><br><span class="line">        <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = list :+ <span class="number">1</span></span><br><span class="line">        println(list1 eq list)</span><br><span class="line">        list1.foreach(println)</span><br><span class="line">        <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Int</span>] = <span class="number">1</span> +: list</span><br><span class="line">        list2.foreach(println)</span><br><span class="line">        println(<span class="string">&quot;*****************&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> list3: <span class="type">List</span>[<span class="type">Int</span>] = list.updated(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">        println(list eq list3)</span><br><span class="line">        <span class="type">List3</span>.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Seq集合</span></span><br><span class="line">        <span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 空集合</span></span><br><span class="line">        <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</span><br><span class="line">        <span class="keyword">val</span> nil  = <span class="type">Nil</span></span><br><span class="line">        println(list2 eq nil)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建集合</span></span><br><span class="line">        <span class="keyword">val</span> list3: <span class="type">List</span>[<span class="type">Int</span>]  = <span class="number">1</span>::<span class="number">2</span>::<span class="number">3</span>::<span class="type">Nil</span></span><br><span class="line">        <span class="keyword">val</span> list4: <span class="type">List</span>[<span class="type">Int</span>] = list1 ::: <span class="type">Nil</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接集合</span></span><br><span class="line">        <span class="keyword">val</span> list5: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>.concat(list3, list4)</span><br><span class="line">        list5.foreach(println)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个指定重复数量的元素列表</span></span><br><span class="line">        <span class="keyword">val</span> list6: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>.fill[<span class="type">String</span>](<span class="number">3</span>)(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        list6.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-2-可变List"><a href="#8-4-2-可变List" class="headerlink" title="8.4.2 可变List"></a>8.4.2 可变List</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 可变集合</span></span><br><span class="line">        <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        buffer.append(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        buffer.update(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        buffer.remove(<span class="number">2</span>)</span><br><span class="line">        buffer.remove(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        println(buffer(<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        buffer.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可变集合</span></span><br><span class="line">        <span class="keyword">val</span> buffer1 = <span class="type">ListBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> buffer2 = <span class="type">ListBuffer</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        <span class="keyword">val</span> buffer3: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 :+ <span class="number">5</span></span><br><span class="line">        <span class="keyword">val</span> buffer4: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 += <span class="number">5</span></span><br><span class="line">        <span class="keyword">val</span> buffer5: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 ++ buffer2</span><br><span class="line">        <span class="keyword">val</span> buffer6: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 ++= buffer2</span><br><span class="line"></span><br><span class="line">        println( buffer5 eq buffer1 )</span><br><span class="line">        println( buffer6 eq buffer1 )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> buffer7: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 - <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> buffer8: <span class="type">ListBuffer</span>[<span class="type">Int</span>] = buffer1 -= <span class="number">2</span></span><br><span class="line">        println( buffer7 eq buffer1 )</span><br><span class="line">        println( buffer8 eq buffer1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-3-可变集合和不可变集合的转变"><a href="#8-4-3-可变集合和不可变集合的转变" class="headerlink" title="8.4.3 可变集合和不可变集合的转变"></a>8.4.3 可变集合和不可变集合的转变</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> buffer = <span class="type">ListBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 可变集合转变为不可变集合</span></span><br><span class="line">        <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = buffer.toList</span><br><span class="line">        <span class="comment">// 不可变集合转变为可变集合</span></span><br><span class="line">        <span class="keyword">val</span> buffer1: mutable.<span class="type">Buffer</span>[<span class="type">Int</span>] = list.toBuffer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-Set集合"><a href="#8-5-Set集合" class="headerlink" title="8.5 Set集合"></a>8.5 Set集合</h3><h4 id="8-5-1-不可变Set"><a href="#8-5-1-不可变Set" class="headerlink" title="8.5.1 不可变Set"></a>8.5.1 不可变Set</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> set2 = <span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        <span class="keyword">val</span> set3: <span class="type">Set</span>[<span class="type">Int</span>] = set1 + <span class="number">5</span> + <span class="number">6</span></span><br><span class="line">        <span class="keyword">val</span> set4: <span class="type">Set</span>[<span class="type">Int</span>] = set1.+(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        println( set1 eq set3 ) <span class="comment">// false</span></span><br><span class="line">        println( set1 eq set4 ) <span class="comment">// false</span></span><br><span class="line">        set4.foreach(println)</span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        <span class="keyword">val</span> set5: <span class="type">Set</span>[<span class="type">Int</span>] = set1 - <span class="number">2</span> - <span class="number">3</span></span><br><span class="line">        set5.foreach(println)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set6: <span class="type">Set</span>[<span class="type">Int</span>] = set1 ++ set2</span><br><span class="line">        set6.foreach(println)</span><br><span class="line">        println(<span class="string">&quot;********&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> set7: <span class="type">Set</span>[<span class="type">Int</span>] = set2 ++: set1</span><br><span class="line">        set7.foreach(println)</span><br><span class="line">        println(set6 eq set7)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> set2 = <span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        <span class="keyword">val</span> set3: <span class="type">Set</span>[<span class="type">Int</span>] = set1 + <span class="number">5</span> + <span class="number">6</span></span><br><span class="line">        <span class="keyword">val</span> set4: <span class="type">Set</span>[<span class="type">Int</span>] = set1.+(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        println( set1 eq set3 ) <span class="comment">// false</span></span><br><span class="line">        println( set1 eq set4 ) <span class="comment">// false</span></span><br><span class="line">        set4.foreach(println)</span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        <span class="keyword">val</span> set5: <span class="type">Set</span>[<span class="type">Int</span>] = set1 - <span class="number">2</span> - <span class="number">3</span></span><br><span class="line">        set5.foreach(println)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set6: <span class="type">Set</span>[<span class="type">Int</span>] = set1 ++ set2</span><br><span class="line">        set6.foreach(println)</span><br><span class="line">        println(<span class="string">&quot;********&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> set7: <span class="type">Set</span>[<span class="type">Int</span>] = set2 ++: set1</span><br><span class="line">        set7.foreach(println)</span><br><span class="line">        println(set6 eq set7)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-5-2-可变set"><a href="#8-5-2-可变set" class="headerlink" title="8.5.2 可变set"></a>8.5.2 可变set</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set1 = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加数据</span></span><br><span class="line">        set1.add(<span class="number">5</span>)</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        set1.update(<span class="number">6</span>,<span class="literal">true</span>)</span><br><span class="line">        println(set1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        set1.update(<span class="number">3</span>,<span class="literal">false</span>)</span><br><span class="line">        println(set1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        set1.remove(<span class="number">2</span>)</span><br><span class="line">        println(set1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数据</span></span><br><span class="line">        set1.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set1 = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交集</span></span><br><span class="line">        <span class="keyword">val</span> set3: mutable.<span class="type">Set</span>[<span class="type">Int</span>] = set1 &amp; set2</span><br><span class="line">        println(set3.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        <span class="comment">// 差集</span></span><br><span class="line">        <span class="keyword">val</span> set4: mutable.<span class="type">Set</span>[<span class="type">Int</span>] = set1 &amp;~ set2</span><br><span class="line">        println(set4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-Map集合"><a href="#8-6-Map集合" class="headerlink" title="8.6 Map集合"></a>8.6 Map集合</h3><p>​Map(映射)是一种可迭代的键值对（key&#x2F;value）结构。所有的值都可以通过键来获取。Map 中的键都是唯一的。</p><h4 id="8-6-1-不可变map"><a href="#8-6-1-不可变map" class="headerlink" title="8.6.1 不可变map"></a>8.6.1 不可变map</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map1 = <span class="type">Map</span>( <span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">val</span> map2 = <span class="type">Map</span>( <span class="string">&quot;d&quot;</span> -&gt; <span class="number">4</span>, <span class="string">&quot;e&quot;</span> -&gt; <span class="number">5</span>, <span class="string">&quot;f&quot;</span> -&gt; <span class="number">6</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        <span class="keyword">val</span> map3 = map1 + (<span class="string">&quot;d&quot;</span> -&gt; <span class="number">4</span>)</span><br><span class="line">        println(map1 eq map3) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        <span class="keyword">val</span> map4 = map3 - <span class="string">&quot;d&quot;</span></span><br><span class="line">        println(map4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map5: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 ++ map2</span><br><span class="line">        println(map5 eq map1)</span><br><span class="line">        println(map5.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map6: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 ++: map2</span><br><span class="line">        println(map6 eq map1)</span><br><span class="line">        println(map6.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="keyword">val</span> map7: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1.updated(<span class="string">&quot;b&quot;</span>, <span class="number">5</span>)</span><br><span class="line">        println(map7.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数据</span></span><br><span class="line">        map1.foreach(println)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map1 = <span class="type">Map</span>( <span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">val</span> map2 = <span class="type">Map</span>( <span class="string">&quot;d&quot;</span> -&gt; <span class="number">4</span>, <span class="string">&quot;e&quot;</span> -&gt; <span class="number">5</span>, <span class="string">&quot;f&quot;</span> -&gt; <span class="number">6</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建空集合</span></span><br><span class="line">        <span class="keyword">val</span> empty: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = <span class="type">Map</span>.empty</span><br><span class="line">        println(empty)</span><br><span class="line">        <span class="comment">// 获取指定key的值</span></span><br><span class="line">        <span class="keyword">val</span> i: <span class="type">Int</span> = map1.apply(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">        println(i)</span><br><span class="line">        println(map1(<span class="string">&quot;c&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取可能存在的key值</span></span><br><span class="line">        <span class="keyword">val</span> maybeInt: <span class="type">Option</span>[<span class="type">Int</span>] = map1.get(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">        <span class="comment">// 判断key值是否存在</span></span><br><span class="line">        <span class="keyword">if</span> ( !maybeInt.isEmpty ) &#123;</span><br><span class="line">            <span class="comment">// 获取值</span></span><br><span class="line">            println(maybeInt.get)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不存在，获取默认值</span></span><br><span class="line">            println(maybeInt.getOrElse(<span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取可能存在的key值, 如果不存在就使用默认值</span></span><br><span class="line">        println(map1.getOrElse(<span class="string">&quot;c&quot;</span>, <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-6-2-可变map"><a href="#8-6-2-可变map" class="headerlink" title="8.6.2 可变map"></a>8.6.2 可变map</h4><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>( <span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">val</span> map2 = mutable.<span class="type">Map</span>( <span class="string">&quot;d&quot;</span> -&gt; <span class="number">4</span>, <span class="string">&quot;e&quot;</span> -&gt; <span class="number">5</span>, <span class="string">&quot;f&quot;</span> -&gt; <span class="number">6</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        map1.put(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">val</span> map3: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 + (<span class="string">&quot;e&quot;</span> -&gt; <span class="number">4</span>)</span><br><span class="line">        println(map1 eq map3)</span><br><span class="line">        <span class="keyword">val</span> map4: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 += (<span class="string">&quot;e&quot;</span> -&gt; <span class="number">5</span>)</span><br><span class="line">        println(map1 eq map4)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        map1.update(<span class="string">&quot;e&quot;</span>,<span class="number">8</span>)</span><br><span class="line">        map1(<span class="string">&quot;e&quot;</span>) = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        map1.remove(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> map5: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 - <span class="string">&quot;e&quot;</span></span><br><span class="line">        println(map1 eq map5)</span><br><span class="line">        <span class="keyword">val</span> map6: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = map1 -= <span class="string">&quot;e&quot;</span></span><br><span class="line">        println(map1 eq map6)</span><br><span class="line">        <span class="comment">// 清除集合</span></span><br><span class="line">        map1.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>( <span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;c&quot;</span> -&gt; <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">val</span> map2 = mutable.<span class="type">Map</span>( <span class="string">&quot;d&quot;</span> -&gt; <span class="number">4</span>, <span class="string">&quot;e&quot;</span> -&gt; <span class="number">5</span>, <span class="string">&quot;f&quot;</span> -&gt; <span class="number">6</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> set: <span class="type">Set</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = map1.toSet</span><br><span class="line">        <span class="keyword">val</span> list: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = map1.toList</span><br><span class="line">        <span class="keyword">val</span> seq: <span class="type">Seq</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = map1.toSeq</span><br><span class="line">        <span class="keyword">val</span> array: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = map1.toArray</span><br><span class="line"></span><br><span class="line">        println(set.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        println(list.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        println(seq.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">        println(array.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">        println(map1.get(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        println(map1.getOrElse(<span class="string">&quot;a&quot;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        println(map1.keys)</span><br><span class="line">        println(map1.keySet)</span><br><span class="line">        println(map1.keysIterator)</span><br><span class="line">        println(map1.values)</span><br><span class="line">        println(map1.valuesIterator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Option专门为了解决空指针问题来设计的</p><p>Option：选项，对象只有两个 Some, None</p><h3 id="8-7-Tuple"><a href="#8-7-Tuple" class="headerlink" title="8.7 Tuple"></a>8.7 Tuple</h3><p>​在Scala语言中，我们可以将多个无关的数据元素封装为一个整体，这个整体我们称之为：元素组合，简称元组。有时也可将元组看成容纳元素的容器，其中最多只能容纳22个</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建元组，使用小括号</span></span><br><span class="line">        <span class="keyword">val</span> tuple = (<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据顺序号访问元组的数据</span></span><br><span class="line">        println(tuple._1)</span><br><span class="line">        println(tuple._2)</span><br><span class="line">        println(tuple._3)</span><br><span class="line">        <span class="comment">// 迭代器</span></span><br><span class="line">        <span class="keyword">val</span> iterator: <span class="type">Iterator</span>[<span class="type">Any</span>] = tuple.productIterator</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据索引访问元素</span></span><br><span class="line">        tuple.productElement(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果元组的元素只有两个，那么我们称之为对偶元组，也称之为键值对</span></span><br><span class="line">        <span class="keyword">val</span> kv: (<span class="type">String</span>, <span class="type">Int</span>) = (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> kv1: (<span class="type">String</span>, <span class="type">Int</span>) = <span class="string">&quot;a&quot;</span> -&gt; <span class="number">1</span></span><br><span class="line">        println( kv eq kv1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-8-队列"><a href="#8-8-队列" class="headerlink" title="8.8 队列"></a>8.8 队列</h3><p>​Scala也提供了队列（Queue）的数据结构，队列的特点就是先进先出。进队和出队的方法分别为enqueue和dequeue。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> que = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">String</span>]()</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        que.enqueue(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> que1: mutable.<span class="type">Queue</span>[<span class="type">String</span>] = que += <span class="string">&quot;d&quot;</span></span><br><span class="line">        println(que eq que1)</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        println(que.dequeue())</span><br><span class="line">        println(que.dequeue())</span><br><span class="line">        println(que.dequeue())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-9-并行"><a href="#8-9-并行" class="headerlink" title="8.9 并行"></a>8.9 并行</h3><p>​Scala为了充分使用多核CPU，提供了并行集合（有别于前面的串行集合），用于多核环境的并行计算。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> result1 = (<span class="number">0</span> to <span class="number">100</span>).map&#123;x =&gt; <span class="type">Thread</span>.currentThread.getName&#125;</span><br><span class="line">        <span class="keyword">val</span> result2 = (<span class="number">0</span> to <span class="number">100</span>).par.map&#123;x =&gt; <span class="type">Thread</span>.currentThread.getName&#125;</span><br><span class="line"></span><br><span class="line">        println(result1)</span><br><span class="line">        println(result2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线程安全问题</strong></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662292574283.png" alt="1662292574283"></p><p>多线程并发执行的时候，对共享内存中的共享对象的属性进行修改，导致的数据冲突问题。</p><h2 id="9-模式匹配"><a href="#9-模式匹配" class="headerlink" title="9.模式匹配"></a>9.模式匹配</h2><h3 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h3><p>​Scala中的模式匹配类似于Java中的switch语法,但是scala从语法中补充了更多的功能，可以按照指定的规则对数据或对象进行匹配, 所以更加强大。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int i = <span class="number">20</span></span><br><span class="line">switch (i) &#123;</span><br><span class="line">    <span class="keyword">default</span> : </span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;other number&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span> :</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span> : </span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-基本语法"><a href="#9-2-基本语法" class="headerlink" title="9.2 基本语法"></a>9.2 基本语法</h3><p>​模式匹配语法中，采用match关键字声明，每个分支采用case关键字进行声明，当需要匹配时，会从第一个case分支开始，如果匹配成功，那么执行对应的逻辑代码，如果匹配不成功，继续执行下一个分支进行判断。如果所有case都不匹配，那么会执行case _分支，类似于Java中default语句。如果不存在case _分支，那么会发生错误。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaMatch</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> a: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">var</span> b: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line">        <span class="keyword">var</span> operator: <span class="type">Char</span> = &#x27;d&#x27;</span><br><span class="line">        <span class="keyword">var</span> result = operator <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &#x27;+&#x27; =&gt; a + b</span><br><span class="line">            <span class="keyword">case</span> &#x27;-&#x27; =&gt; a - b</span><br><span class="line">            <span class="keyword">case</span> &#x27;*&#x27; =&gt; a * b</span><br><span class="line">            <span class="keyword">case</span> &#x27;/&#x27; =&gt; a / b</span><br><span class="line">            <span class="keyword">case</span> _ =&gt; <span class="string">&quot;illegal&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-匹配规则"><a href="#9-3-匹配规则" class="headerlink" title="9.3 匹配规则"></a>9.3 匹配规则</h3><h4 id="9-3-1-匹配常量"><a href="#9-3-1-匹配常量" class="headerlink" title="9.3.1 匹配常量"></a>9.3.1 匹配常量</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(x: <span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span> =&gt; <span class="string">&quot;Int five&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> =&gt; <span class="string">&quot;String hello&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span> =&gt; <span class="string">&quot;Boolean true&quot;</span></span><br><span class="line">    <span class="keyword">case</span> &#x27;+&#x27; =&gt; <span class="string">&quot;Char +&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-2-匹配类型"><a href="#9-3-2-匹配类型" class="headerlink" title="9.3.2 匹配类型"></a>9.3.2 匹配类型</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配类型，类型前面需要增加变量名称，当需要使用该变量的时候，就可以使用这个值。这个变量就是将数据转换成为指定类型的变量</span></span><br><span class="line"><span class="comment">//Scala中的类型匹配时，是不考虑泛型的</span></span><br><span class="line"><span class="comment">//但是Array[Int] 里面的Int并不是真正的泛型，整体是一个类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(x: <span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i+<span class="number">10</span></span><br><span class="line">    <span class="keyword">case</span> s: <span class="type">String</span> =&gt; <span class="string">&quot;String hello&quot;</span></span><br><span class="line">    <span class="keyword">case</span> m: <span class="type">List</span>[_] =&gt; <span class="string">&quot;List&quot;</span>    <span class="comment">//下划线表示任意类型都可以</span></span><br><span class="line">    <span class="keyword">case</span> c: <span class="type">Array</span>[<span class="type">Int</span>] =&gt; <span class="string">&quot;Array[Int]&quot;</span></span><br><span class="line">    <span class="keyword">case</span> someThing =&gt; <span class="string">&quot;something else &quot;</span> + someThing</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-3-匹配数组"><a href="#9-3-3-匹配数组" class="headerlink" title="9.3.3 匹配数组"></a>9.3.3 匹配数组</h4><p>_代表任意值 *代表任意个数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (arr &lt;- <span class="type">Array</span>(</span><br><span class="line">    <span class="type">Array</span>(<span class="number">0</span>), </span><br><span class="line">    <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">    <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">    <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">    <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>), </span><br><span class="line">    <span class="type">Array</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">90</span>))) &#123; <span class="comment">// 对一个数组集合进行遍历</span></span><br><span class="line">    <span class="keyword">val</span> result = arr <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; <span class="string">&quot;0&quot;</span> <span class="comment">//匹配Array(0) 这个数组</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(x, y) =&gt; x + <span class="string">&quot;,&quot;</span> + y <span class="comment">//匹配有两个元素的数组，然后将将元素值赋给对应的x,y</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, _*) =&gt; <span class="string">&quot;以0开头的数组&quot;</span> <span class="comment">//匹配以0开头和数组</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">&quot;something else&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;result = &quot;</span> + result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-4-匹配列表"><a href="#9-3-4-匹配列表" class="headerlink" title="9.3.4 匹配列表"></a>9.3.4 匹配列表</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (list &lt;- <span class="type">Array</span>(<span class="type">List</span>(<span class="number">0</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">88</span>))) &#123;</span><br><span class="line">    <span class="keyword">val</span> result = list <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">List</span>(<span class="number">0</span>) =&gt; <span class="string">&quot;0&quot;</span> <span class="comment">//匹配List(0)</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">List</span>(x, y) =&gt; x + <span class="string">&quot;,&quot;</span> + y <span class="comment">//匹配有两个元素的List</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">List</span>(<span class="number">0</span>, _*) =&gt; <span class="string">&quot;0 ...&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">&quot;something else&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> first :: second :: rest =&gt; println(first + <span class="string">&quot;-&quot;</span> + second + <span class="string">&quot;-&quot;</span> + rest)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;something else&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-5-匹配元组"><a href="#9-3-5-匹配元组" class="headerlink" title="9.3.5 匹配元组"></a>9.3.5 匹配元组</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (tuple &lt;- </span><br><span class="line">     <span class="type">Array</span>((<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))) &#123;</span><br><span class="line">    <span class="keyword">val</span> result = tuple <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, _) =&gt; <span class="string">&quot;0 ...&quot;</span> <span class="comment">//是第一个元素是0的元组</span></span><br><span class="line">        <span class="keyword">case</span> (y, <span class="number">0</span>) =&gt; <span class="string">&quot;&quot;</span> + y + <span class="string">&quot;0&quot;</span> <span class="comment">// 匹配后一个元素是0的对偶元组</span></span><br><span class="line">        <span class="keyword">case</span> (a, b) =&gt; <span class="string">&quot;&quot;</span> + a + <span class="string">&quot; &quot;</span> + b</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">&quot;something else&quot;</span> <span class="comment">//默认</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模式匹配常用用法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.scala.chapter08</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala04_Match</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO - 模式匹配 - 匹配规则</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模式匹配</span></span><br><span class="line">        <span class="comment">//val (_, name, _) = (1, &quot;zhangsan&quot;, 30)</span></span><br><span class="line">       <span class="comment">// println(name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        val map = Map(</span></span><br><span class="line"><span class="comment">//            (&quot;a&quot;, 1), (&quot;b&quot;, 2), (&quot;c&quot;, 3)</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for ( (k, 2) &lt;- map ) &#123;</span></span><br><span class="line"><span class="comment">//            println( k )</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> list = <span class="type">List</span>(</span><br><span class="line">            ((<span class="string">&quot;河北&quot;</span>, <span class="string">&quot;鞋&quot;</span>), <span class="number">10</span>),</span><br><span class="line">            ((<span class="string">&quot;河北&quot;</span>, <span class="string">&quot;衣服&quot;</span>), <span class="number">20</span>),</span><br><span class="line">            ((<span class="string">&quot;河北&quot;</span>, <span class="string">&quot;电脑&quot;</span>), <span class="number">15</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        list.map(</span><br><span class="line">            (t) =&gt; &#123;</span><br><span class="line">                t</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面的代码中，使用模式匹配需要注意：</span></span><br><span class="line">        <span class="comment">// 1. 匹配数据时，需要使用case关键字</span></span><br><span class="line">        <span class="comment">// 2. case分支可能存在多个，那么需要将map的小括号换成大括号</span></span><br><span class="line"><span class="comment">//        val list1 = list.map &#123;</span></span><br><span class="line"><span class="comment">//            case ((prv, item), cnt) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//                (prv, (item, cnt * 2))</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        println(list1)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> <span class="type">Array</span>(first, second, _*) = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">        println(<span class="string">s&quot;first=<span class="subst">$first</span>,second=<span class="subst">$second</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-6-匹配对象"><a href="#9-3-6-匹配对象" class="headerlink" title="9.3.6 匹配对象"></a>9.3.6 匹配对象</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">val name: <span class="type">String</span>, val age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>, age: <span class="type">Int</span>): <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>(name, age)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(user: <span class="type">User</span>): <span class="type">Option</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = &#123;</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">            <span class="type">None</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="type">Some</span>(user.name, user.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> user: <span class="type">User</span> = <span class="type">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">11</span>)</span><br><span class="line"><span class="keyword">val</span> result = user <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">11</span>) =&gt; <span class="string">&quot;yes&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;no&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-7-样例类"><a href="#9-3-7-样例类" class="headerlink" title="9.3.7 样例类"></a>9.3.7 样例类</h4><ul><li><p>样例类就是使用case关键字声明的类</p></li><li><p>样例类仍然是类，和普通类相比，只是其自动生成了伴生对象，并且伴生对象中自动提供了一些常用的方法，如apply、unapply、toString、equals、hashCode和copy。</p></li><li><p>样例类是为模式匹配而优化的类，因为其默认提供了unapply方法，因此，样例类可以直接使用模式匹配，而无需自己实现unapply方法。</p></li><li><p>构造器中的每一个参数都成为val，除非它被显式地声明为var（不建议这样做）</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name: <span class="type">String</span>, var age: <span class="type">Int</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaCaseClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> user: <span class="type">User</span> = <span class="type">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">val</span> result = user <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">11</span>) =&gt; <span class="string">&quot;yes&quot;</span></span><br><span class="line">            <span class="keyword">case</span> _ =&gt; <span class="string">&quot;no&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-4-应用场景"><a href="#9-4-应用场景" class="headerlink" title="9.4 应用场景"></a>9.4 应用场景</h3><h4 id="9-4-1-变量声明"><a href="#9-4-1-变量声明" class="headerlink" title="9.4.1 变量声明"></a>9.4.1 变量声明</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaMatch</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> (x, y) = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        println(<span class="string">s&quot;x=<span class="subst">$x</span>,y=<span class="subst">$y</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> <span class="type">Array</span>(first, second, _*) = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">        println(<span class="string">s&quot;first=<span class="subst">$first</span>,second=<span class="subst">$second</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> <span class="type">Person</span>(name, age) = <span class="type">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">16</span>)</span><br><span class="line">        println(<span class="string">s&quot;name=<span class="subst">$name</span>,age=<span class="subst">$age</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-2-循环匹配"><a href="#9-4-2-循环匹配" class="headerlink" title="9.4.2 循环匹配"></a>9.4.2 循环匹配</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaMatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> map = <span class="type">Map</span>(<span class="string">&quot;A&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;B&quot;</span> -&gt; <span class="number">0</span>, <span class="string">&quot;C&quot;</span> -&gt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> ((k, v) &lt;- map) &#123; <span class="comment">//直接将map中的k-v遍历出来</span></span><br><span class="line">            println(k + <span class="string">&quot; -&gt; &quot;</span> + v) <span class="comment">//3个</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">&quot;----------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//遍历value=0的 k-v ,如果v不是0,过滤</span></span><br><span class="line">        <span class="keyword">for</span> ((k, <span class="number">0</span>) &lt;- map) &#123;</span><br><span class="line">            println(k + <span class="string">&quot; --&gt; &quot;</span> + <span class="number">0</span>) <span class="comment">// B-&gt;0</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">&quot;----------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//if v == 0 是一个过滤的条件</span></span><br><span class="line">        <span class="keyword">for</span> ((k, v) &lt;- map <span class="keyword">if</span> v &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            println(k + <span class="string">&quot; ---&gt; &quot;</span> + v) <span class="comment">// A-&gt;1 和 c-&gt;33</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-3-函数参数"><a href="#9-4-3-函数参数" class="headerlink" title="9.4.3 函数参数"></a>9.4.3 函数参数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaMatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> list = <span class="type">List</span>(</span><br><span class="line">            (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> list1 = list.map &#123;</span><br><span class="line">            <span class="keyword">case</span> ( k, v ) =&gt; &#123;</span><br><span class="line">                (k, v*<span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        println(list1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5-偏函数"><a href="#9-5-偏函数" class="headerlink" title="9.5 偏函数"></a>9.5 偏函数</h3><p>​所谓的偏函数，其实就是对集合中符合条件的数据进行处理的函数</p><p>​偏函数也是函数的一种，通过偏函数我们可以方便的对输入参数做更精确的检查。例如该偏函数的输入类型为Int，但是我们只考虑数值为1的时候，数据该如何处理，其他不考虑。</p><p><strong>基本语法</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明偏函数</span></span><br><span class="line"><span class="keyword">val</span> pf: <span class="type">PartialFunction</span>[<span class="type">Int</span>, <span class="type">String</span>] = &#123; <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;one&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="comment">// 应用偏函数</span></span><br><span class="line">println(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).collect(pf))</span><br></pre></td></tr></table></figure><hr><p><strong>案例实操</strong></p><p>将该List(1,2,3,4,5,6,”test”)中的Int类型的元素加一，并去掉字符串。</p><p>不使用偏函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">&quot;test&quot;</span>).filter(_.isInstanceOf[<span class="type">Int</span>]).map(_.asInstanceOf[<span class="type">Int</span>] + <span class="number">1</span>).foreach(println)</span><br></pre></td></tr></table></figure><p>使用偏函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;test&quot;</span>).collect &#123; <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span> &#125;.foreach(println)</span><br></pre></td></tr></table></figure><p>collect就是一个偏函数</p><h2 id="10-异常"><a href="#10-异常" class="headerlink" title="10. 异常"></a>10. 异常</h2><p>Scala异常语法处理上和Java类似，但是又不尽相同。</p><p><strong>Java异常：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">    <span class="comment">// catch时，需要将范围小的写到前面</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Scala异常</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> n= <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> ex: <span class="type">ArithmeticException</span>=&gt;&#123;</span><br><span class="line">                <span class="comment">// 发生算术异常</span></span><br><span class="line">                println(<span class="string">&quot;发生算术异常&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> ex: <span class="type">Exception</span>=&gt;&#123;</span><br><span class="line">                <span class="comment">// 对异常处理</span></span><br><span class="line">                println(<span class="string">&quot;发生了异常1&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-隐式转换"><a href="#11-隐式转换" class="headerlink" title="11. 隐式转换"></a>11. 隐式转换</h2><h3 id="11-1-简介"><a href="#11-1-简介" class="headerlink" title="11.1 简介"></a>11.1 简介</h3><p>​在之前的类型学习中，我们已经学习了自动类型转换，精度小的类型可以自动转换为精度大的类型，这个转换过程无需开发人员参与，由编译器自动完成，这个转换操作我们称之为隐式转换。</p><p>​在其他的场合，隐式转换也起到了非常重要的作用。如Scala在程序编译错误时，可以通过隐式转换中类型转换机制尝试进行二次编译，将本身错误无法编译通过的代码通过类型转换后编译通过。慢慢地，这也形成了一种扩展功能的转换机制。这个听着很抽象，不好理解，不急，咱慢慢体会。</p><h3 id="11-2-隐式函数"><a href="#11-2-隐式函数" class="headerlink" title="11.2 隐式函数"></a>11.2 隐式函数</h3><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662306692988.png" alt="1662306692988"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImplicit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">transform</span></span>( d : <span class="type">Double</span> ): <span class="type">Int</span> = &#123;</span><br><span class="line">            d.toInt</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> d : <span class="type">Double</span> = <span class="number">2.0</span></span><br><span class="line">        <span class="keyword">val</span> i : <span class="type">Int</span> = d</span><br><span class="line">        println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-隐式参数、隐式变量"><a href="#11-3-隐式参数、隐式变量" class="headerlink" title="11.3 隐式参数、隐式变量"></a>11.3 隐式参数、隐式变量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImplicit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">transform</span></span>( <span class="keyword">implicit</span>  d : <span class="type">Double</span> ) = &#123;</span><br><span class="line">            d.toInt</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">implicit</span> <span class="keyword">val</span> dd : <span class="type">Double</span> = <span class="number">2.0</span></span><br><span class="line">        println(transform)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​隐式参数和隐式变量是成对出现的，就是把隐式变量赋值给隐式参数，但是我们不需要传递，这个传递的过程是编译器完成的</p><p>​<strong>在同一个作用域中，如果有相同的转换规则的多个数据，会发生错误。</strong></p><h3 id="11-4-隐式类"><a href="#11-4-隐式类" class="headerlink" title="11.4 隐式类"></a>11.4 隐式类</h3><p>​在Scala2.10后提供了隐式类，可以使用implicit声明类，隐式类非常强大，同样可以扩展类的功能，在集合的数据处理中，隐式类发挥了重要的作用。</p><ul><li><p>其所带的构造参数有且只能有一个</p></li><li><p>隐式类必须被定义在“类”或“伴生对象”或“包对象”里，即隐式类不能是顶级的。</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaImplicit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> emp = <span class="keyword">new</span> <span class="type">Emp</span>()</span><br><span class="line">        emp.insertUser()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"> emp : <span class="type">Emp</span></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">insertUser</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(<span class="string">&quot;insert user...&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-5-隐式机制"><a href="#11-5-隐式机制" class="headerlink" title="11.5 隐式机制"></a>11.5 隐式机制</h3><p>所谓的隐式机制，就是一旦出现编译错误时，编译器会从哪些地方查找对应的隐式转换规则</p><p>Ø  当前代码作用域</p><p>Ø  当前代码上级作用域</p><p>Ø  当前类所在的包对象</p><p>Ø  当前类（对象）的父类（父类）或特质（父特质）</p><p>其实最直接的方式就是直接导入。</p><h2 id="12-泛型"><a href="#12-泛型" class="headerlink" title="12. 泛型"></a>12. 泛型</h2><p>​Scala的泛型和Java中的泛型表达的含义都是一样的，对处理的数据类型进行约束，但是Scala提供了更加强大的功能</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>[<span class="type">A</span>] </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> elements: <span class="type">List</span>[<span class="type">A</span>] = <span class="type">Nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-1-泛型转换"><a href="#12-1-泛型转换" class="headerlink" title="12.1 泛型转换"></a>12.1 泛型转换</h3><h4 id="12-1-1-泛型不可变"><a href="#12-1-1-泛型不可变" class="headerlink" title="12.1.1 泛型不可变"></a>12.1.1 泛型不可变</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> test1 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">User</span>] <span class="comment">// OK</span></span><br><span class="line">        <span class="keyword">val</span> test2 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">Parent</span>] <span class="comment">// Error</span></span><br><span class="line">        <span class="keyword">val</span> test3 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">SubUser</span>]  <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-1-2-泛型协变"><a href="#12-1-2-泛型协变" class="headerlink" title="12.1.2 泛型协变"></a>12.1.2 泛型协变</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> test1 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">User</span>] <span class="comment">// OK</span></span><br><span class="line">        <span class="keyword">val</span> test2 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">Parent</span>] <span class="comment">// Error</span></span><br><span class="line">        <span class="keyword">val</span> test3 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">SubUser</span>]  <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>[+<span class="type">T</span>] </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="12-1-3-泛型逆变"><a href="#12-1-3-泛型逆变" class="headerlink" title="12.1.3 泛型逆变"></a>12.1.3 泛型逆变</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> test1 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">User</span>] <span class="comment">// OK</span></span><br><span class="line">        <span class="keyword">val</span> test2 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">Parent</span>] <span class="comment">// OK</span></span><br><span class="line">        <span class="keyword">val</span> test3 : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">SubUser</span>]  <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>[-<span class="type">T</span>] </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-2-泛型边界"><a href="#12-2-泛型边界" class="headerlink" title="12.2 泛型边界"></a>12.2 泛型边界</h3><p>​Scala的泛型可以根据功能设定类树的边界</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> parent : <span class="type">Parent</span> = <span class="keyword">new</span> <span class="type">Parent</span>()</span><br><span class="line">        <span class="keyword">val</span> user : <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        <span class="keyword">val</span> subuser : <span class="type">SubUser</span> = <span class="keyword">new</span> <span class="type">SubUser</span>()</span><br><span class="line">        test[<span class="type">User</span>](parent) <span class="comment">// Error</span></span><br><span class="line">        test[<span class="type">User</span>](user)   <span class="comment">// OK</span></span><br><span class="line">        test[<span class="type">User</span>](subuser) <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test</span></span>[<span class="type">A</span>]( a : <span class="type">A</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-2-1-泛型上限"><a href="#12-2-1-泛型上限" class="headerlink" title="12.2.1 泛型上限"></a>12.2.1 泛型上限</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> parent : <span class="type">Parent</span> = <span class="keyword">new</span> <span class="type">Parent</span>()</span><br><span class="line">        <span class="keyword">val</span> user : <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        <span class="keyword">val</span> subuser : <span class="type">SubUser</span> = <span class="keyword">new</span> <span class="type">SubUser</span>()</span><br><span class="line">        test[<span class="type">Parent</span>](parent) <span class="comment">// Error</span></span><br><span class="line">        test[<span class="type">User</span>](user)   <span class="comment">// OK</span></span><br><span class="line">        test[<span class="type">SubUser</span>](subuser) <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test</span></span>[<span class="type">A</span>&lt;:<span class="type">User</span>]( a : <span class="type">A</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-2-2-泛型下限"><a href="#12-2-2-泛型下限" class="headerlink" title="12.2.2 泛型下限"></a>12.2.2 泛型下限</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> parent : <span class="type">Parent</span> = <span class="keyword">new</span> <span class="type">Parent</span>()</span><br><span class="line">        <span class="keyword">val</span> user : <span class="type">User</span> = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">        <span class="keyword">val</span> subuser : <span class="type">SubUser</span> = <span class="keyword">new</span> <span class="type">SubUser</span>()</span><br><span class="line">        test[<span class="type">Parent</span>](parent) <span class="comment">// OK</span></span><br><span class="line">        test[<span class="type">User</span>](user)   <span class="comment">// OK</span></span><br><span class="line">        test[<span class="type">SubUser</span>](subuser) <span class="comment">// Error</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test</span></span>[<span class="type">A</span>&gt;:<span class="type">User</span>]( a : <span class="type">A</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-上下文限定"><a href="#12-3-上下文限定" class="headerlink" title="12.3 上下文限定"></a>12.3 上下文限定</h3><p>​上下文限定是将泛型和隐式转换的结合产物，以下两者功能相同，使用上下文限定[A : Ordering]之后，方法内无法使用隐式参数名调用隐式参数，需要通过implicitly[Ordering[A]]获取隐式变量，如果此时无法查找到对应类型的隐式变量，会发生出错误。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>[<span class="type">A</span> : <span class="type">Test</span>](a: <span class="type">A</span>) = println(a)</span><br><span class="line">        <span class="keyword">implicit</span> <span class="keyword">val</span> test : <span class="type">Test</span>[<span class="type">User</span>] = <span class="keyword">new</span> <span class="type">Test</span>[<span class="type">User</span>]</span><br><span class="line">        f( <span class="keyword">new</span> <span class="type">User</span>() )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-正则表达式"><a href="#13-正则表达式" class="headerlink" title="13 正则表达式"></a>13 正则表达式</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><p>​正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662379360534.png" alt="1662379360534"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662379378344.png" alt="1662379378344"></p><p><img src="/2022/09/03/scala/scala%E7%AE%80%E4%BB%8B/1662379386353.png" alt="1662379386353"></p><h3 id="13-2-基本语法"><a href="#13-2-基本语法" class="headerlink" title="13.2 基本语法"></a>13.2 基本语法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaRegex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 构建正则表达式</span></span><br><span class="line">        <span class="keyword">val</span> pattern = <span class="string">&quot;Scala&quot;</span>.r</span><br><span class="line">        <span class="keyword">val</span> str = <span class="string">&quot;Scala is Scalable Language&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配字符串 - 第一个</span></span><br><span class="line">        println(pattern findFirstIn str)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配字符串 - 所有</span></span><br><span class="line">        <span class="keyword">val</span> iterator: <span class="type">Regex</span>.<span class="type">MatchIterator</span> = pattern findAllIn str</span><br><span class="line">        <span class="keyword">while</span> ( iterator.hasNext ) &#123;</span><br><span class="line">            println(iterator.next())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">&quot;***************************&quot;</span>)</span><br><span class="line">        <span class="comment">// 匹配规则：大写，小写都可</span></span><br><span class="line">        <span class="keyword">val</span> pattern1 = <span class="keyword">new</span> <span class="type">Regex</span>(<span class="string">&quot;(S|s)cala&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> str1 = <span class="string">&quot;Scala is scalable Language&quot;</span></span><br><span class="line">        println((pattern1 findAllIn str1).mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-3-案例实操"><a href="#13-3-案例实操" class="headerlink" title="13.3  案例实操"></a>13.3  案例实操</h3><ul><li>手机号正则表达式验证方法</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaRegex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 构建正则表达式</span></span><br><span class="line">        println(isMobileNumber(<span class="string">&quot;18801234567&quot;</span>))</span><br><span class="line">        println(isMobileNumber(<span class="string">&quot;11111111111&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMobileNumber</span></span>(number: <span class="type">String</span>): <span class="type">Boolean</span> =&#123;</span><br><span class="line">        <span class="keyword">val</span> regex = <span class="string">&quot;^((13[0-9])|(14[5,7,9])|(15[^4])|(18[0-9])|(17[0,1,3,5,6,7,8]))[0-9]&#123;8&#125;$&quot;</span>.r</span><br><span class="line">        <span class="keyword">val</span> length = number.length</span><br><span class="line">        regex.findFirstMatchIn(number.slice(length<span class="number">-11</span>,length)) != <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提取邮件地址的域名部分</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaRegex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 构建正则表达式</span></span><br><span class="line">        <span class="keyword">val</span> r = <span class="string">&quot;&quot;&quot;([_A-Za-z0-9-]+(?:\.[_A-Za-z0-9-\+]+)*)(@[A-Za-z0-9-]+(?:\.[A-Za-z0-9-]+)*(?:\.[A-Za-z]&#123;2,&#125;)) ?&quot;&quot;&quot;</span>.r</span><br><span class="line">        println(r.replaceAllIn(<span class="string">&quot;abc.edf+jianli@gmail.com   hello@gmail.com.cn&quot;</span>, (m =&gt; <span class="string">&quot;*****&quot;</span> + m.group(<span class="number">2</span>))))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 特质 </tag>
            
            <tag> 样例类 </tag>
            
            <tag> reduce </tag>
            
            <tag> reduceLeft </tag>
            
            <tag> fold </tag>
            
            <tag> map </tag>
            
            <tag> flatMap </tag>
            
            <tag> filter </tag>
            
            <tag> groupBy </tag>
            
            <tag> sliding </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
            <tag> 模式匹配 </tag>
            
            <tag> 偏函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase概述</title>
      <link href="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Hbase简介"><a href="#1-Hbase简介" class="headerlink" title="1.Hbase简介"></a>1.Hbase简介</h2><h3 id="1-1-Hbase定义"><a href="#1-1-Hbase定义" class="headerlink" title="1.1 Hbase定义"></a>1.1 Hbase定义</h3><p>​它是一种分布式、可扩展、支持海量数据存储的NoSQL数据库</p><h3 id="1-2-HBase数据模型"><a href="#1-2-HBase数据模型" class="headerlink" title="1.2 HBase数据模型"></a>1.2 HBase数据模型</h3><p>​逻辑上，HBase的数据模型同关系型数据库很类似，数据存储在一张表中，有行有列。但从HBase的底层物理存储结构（K-V）来看，HBase更像是一个multi-dimensional<br>map。</p><h4 id="1-2-1-HBase逻辑结构"><a href="#1-2-1-HBase逻辑结构" class="headerlink" title="1.2.1 HBase逻辑结构"></a>1.2.1 HBase逻辑结构</h4><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662083629185.png" alt="1662083629185"></p><h4 id="1-2-2-HBase物理结构"><a href="#1-2-2-HBase物理结构" class="headerlink" title="1.2.2 HBase物理结构"></a>1.2.2 HBase物理结构</h4><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662083681648.png" alt="1662083681648"></p><h4 id="1-2-3-数据模型"><a href="#1-2-3-数据模型" class="headerlink" title="1.2.3 数据模型"></a>1.2.3 数据模型</h4><p><strong>1）Name Space</strong></p><p>​命名空间，类似于关系型数据库的database概念，每个命名空间下有多个表。HBase有两个自带的命名空间，分别是hbase和default，hbase中存放的是HBase内置的表，default表是用户默认使用的命名空间。</p><p><strong>2）Table</strong></p><p>​类似于关系型数据库的表概念。不同的是，HBase定义表时只需要声明列族即可，不需要声明具体的列。这意味着，往HBase写入数据时，字段可以动态、按需指定。因此，和关系型数据库相比，HBase能够轻松应对字段变更的场景。</p><p><strong>3）Row</strong></p><p>​HBase表中的每行数据都由一个<strong>RowKey</strong>和多个<strong>Column</strong>（列）组成，数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进行检索，所以RowKey的设计十分重要。</p><p><strong>4）Column</strong></p><p>​HBase中的每个列都由Column Family(列族)和Column Qualifier（列限定符）进行限定，例如info：name，info：age。建表时，只需指明列族，而列限定符无需预先定义。</p><p><strong>5）Time Stamp</strong></p><p>​用于标识数据的不同版本（version），每条数据写入时，系统会自动为其加上该字段，其值为写入HBase的时间。</p><p><strong>6）Cell</strong></p><p>​由{rowkey, column Family：column Qualifier, time Stamp} 唯一确定的单元。cell中的数据全部是字节码形式存贮。</p><h3 id="1-3-HBase基本架构"><a href="#1-3-HBase基本架构" class="headerlink" title="1.3 HBase基本架构"></a>1.3 HBase基本架构</h3><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662085829198.png" alt="1662085829198"></p><p><strong>架构角色：</strong></p><p><strong>1）Region Server</strong></p><p>​Region Server为 Region的管理者，其实现类为HRegionServer，主要作用如下:</p><p>​对于数据的操作：get, put, delete；</p><p>​对于Region的操作：splitRegion、compactRegion。</p><p><strong>2）Master</strong></p><p>​Master是所有Region Server的管理者，其实现类为HMaster，主要作用如下：</p><p>​对于表的操作：create, delete, alter</p><p>​对于RegionServer的操作：分配regions到每个RegionServer，监控每个RegionServer的状态，负载均衡和故障转移。</p><p><strong>3）Zookeeper</strong></p><p>​HBase通过Zookeeper来做master的高可用、RegionServer的监控、元数据的入口以及集群配置的维护等工作。</p><p><strong>4）HDFS</strong></p><p>​HDFS为Hbase提供最终的底层数据存储服务，同时为HBase提供高可用的支持。</p><h2 id="2-HBase-Shell操作"><a href="#2-HBase-Shell操作" class="headerlink" title="2. HBase Shell操作"></a>2. HBase Shell操作</h2><p><strong>1．查看当前Hbase中有哪些namespace</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; list_namespace</span><br><span class="line"></span><br><span class="line">NAMESPACE                                                                                 </span><br><span class="line">default(创建表时未指定命名空间的话默认在default下)                                             hbase(系统使用的，用来存放系统相关的元数据信息等，勿随便操作)  </span><br></pre></td></tr></table></figure><p><strong>2．创建namespace</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):010:0&gt;  create_namespace &quot;test&quot;</span><br><span class="line"></span><br><span class="line">hbase(main):010:0&gt; create_namespace &quot;test01&quot;, &#123;&quot;author&quot;=&gt;&quot;wyh&quot;, &quot;create_time&quot;=&gt;&quot;2020-03-10 08:08:08&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>3.查看namespace</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):010:0&gt;  describe_namespace &quot;test01&quot;</span><br></pre></td></tr></table></figure><p><strong>4.修改namespace的信息（添加或者修改属性）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):010:0&gt; alter_namespace &quot;test01&quot;, &#123;METHOD =&gt; &#x27;set&#x27;, &#x27;author&#x27; =&gt; &#x27;weiyunhui&#x27;&#125;</span><br></pre></td></tr></table></figure><p><strong>添加或者修改属性:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter_namespace &#x27;ns1&#x27;, &#123;METHOD =&gt; &#x27;set&#x27;, &#x27;PROPERTY_NAME&#x27; =&gt; &#x27;PROPERTY_VALUE&#x27;&#125; </span><br></pre></td></tr></table></figure><p><strong>删除属性:</strong>          </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter_namespace &#x27;ns1&#x27;, &#123;METHOD =&gt; &#x27;unset&#x27;, NAME =&gt; &#x27; PROPERTY_NAME &#x27;&#125; </span><br></pre></td></tr></table></figure><p><strong>5.删除namespace</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):010:0&gt; drop_namespace &quot;test01&quot;</span><br><span class="line">注意: 要删除的namespace必须是空的，其下没有表。</span><br></pre></td></tr></table></figure><p><strong>6.查看当前数据库中有那些表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; list</span><br></pre></td></tr></table></figure><p><strong>7.创建表</strong></p><p> 下面这个表就会在default 之中建立student这个表格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; create &#x27;student&#x27;,&#x27;info&#x27;</span><br></pre></td></tr></table></figure><p>如果想再其它数据库中建立表格我们可以用如下语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; create &#x27;namespace:student&#x27;,&#x27;info&#x27;</span><br></pre></td></tr></table></figure><p>上述namespace就是代表了你的数据库名字    </p><p>创建表格的时候，我们必须要为这个表格添加一个列族，就是加一个逗号，后面跟着的字符串就是列族名称 </p><p>如果想要给列族增加一些其它信息，可以使用如下语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; create &#x27;namespace:student&#x27;,&#123;NAME =&gt; &#x27;info&#x27;,VERSION =&gt; 5&#125; </span><br></pre></td></tr></table></figure><p><strong>8.插入数据到表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):003:0&gt; put &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:sex&#x27;,&#x27;male&#x27;</span><br><span class="line">hbase(main):004:0&gt; put &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:age&#x27;,&#x27;18&#x27;</span><br><span class="line">hbase(main):005:0&gt; put &#x27;student&#x27;,&#x27;1002&#x27;,&#x27;info:name&#x27;,&#x27;Janna&#x27;</span><br><span class="line">hbase(main):006:0&gt; put &#x27;student&#x27;,&#x27;1002&#x27;,&#x27;info:sex&#x27;,&#x27;female&#x27;</span><br><span class="line">hbase(main):007:0&gt; put &#x27;student&#x27;,&#x27;1002&#x27;,&#x27;info:age&#x27;,&#x27;20&#x27;</span><br></pre></td></tr></table></figure><p><strong>9.扫描查看表数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):008:0&gt; scan &#x27;student&#x27;</span><br><span class="line">hbase(main):009:0&gt; scan &#x27;student&#x27;,&#123;STARTROW =&gt; &#x27;1001&#x27;, STOPROW  =&gt; &#x27;1001&#x27;&#125;</span><br><span class="line">hbase(main):010:0&gt; scan &#x27;student&#x27;,&#123;STARTROW =&gt; &#x27;1001&#x27;&#125;</span><br></pre></td></tr></table></figure><p><strong>10.查看表结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):011:0&gt; describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p><strong>11.更新指定字段的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):012:0&gt; put &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:name&#x27;,&#x27;Nick&#x27;</span><br><span class="line">hbase(main):013:0&gt; put &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:age&#x27;,&#x27;100&#x27;</span><br></pre></td></tr></table></figure><p><strong>12.查看“指定行”或“指定列族:列”的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):014:0&gt; get &#x27;student&#x27;,&#x27;1001&#x27;</span><br><span class="line">hbase(main):015:0&gt; get &#x27;student&#x27;,&#x27;1001&#x27;,&#x27;info:name&#x27;</span><br></pre></td></tr></table></figure><p><strong>13.统计表数据行数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):021:0&gt; count &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p><strong>14.删除数据</strong></p><p>​删除某rowkey的全部数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):016:0&gt; deleteall &#x27;student&#x27;,&#x27;1001&#x27;</span><br></pre></td></tr></table></figure><p>​删除某rowkey的某一列数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):017:0&gt; delete &#x27;student&#x27;,&#x27;1002&#x27;,&#x27;info:sex&#x27;</span><br></pre></td></tr></table></figure><p><strong>15.清空表数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):018:0&gt; truncate &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>提示：清空表的操作顺序为先disable，然后再truncate。</p><p><strong>16.删除表</strong></p><p>​首先需要先让该表为disable状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):019:0&gt; disable &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>​然后才能drop这个表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):020:0&gt; drop &#x27;student&#x27;</span><br></pre></td></tr></table></figure><hr><p><strong>version 和 timestamp的联系</strong></p><p>​version我们可以建表的时候自己指定，粒度是针对于某一个列族而言，这个数字代表了我们会存储最近n次的数据，就好比某一个列族、一个列限定符确定的cell，我们对其进行修改，其实是会把之前的数据也保存下来的，这个是用timestamp来区分的，每次我们都会取timestamp最大的作为最新的数据，这个version就是我们会保存几次原始的数据，如果修改次数过多，超过了version的数字，我们就需要删除之前的数据。</p><p>​在HBase之中，我们都是使用的追加的操作，因此比较高效</p><h2 id="3-RegionServer-基础架构"><a href="#3-RegionServer-基础架构" class="headerlink" title="3. RegionServer 基础架构"></a>3. RegionServer 基础架构</h2><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662099311523.png" alt="1662099311523"></p><p><strong>1）StoreFile</strong></p><p>​保存实际数据的物理文件，StoreFile以Hfile的形式存储在HDFS上。每个Store会有一个或多个StoreFile（HFile），数据在每个StoreFile中都是有序的。其中Store是存放的每一个列族的数据 ，HFile是HBase实现的文件格式，其中文件是由多个64KB大小的block组成的。</p><p><strong>2）MemStore</strong></p><p>​写缓存，由 于HFile中的数据要求是有序的，所以数据是先存储在MemStore中，排好序后，等到达刷写时机才会刷写到HFile，每次刷写都会形成一个新的HFile。</p><p> <strong>3）WAL</strong></p><p>​由于数据要经MemStore排序后才能刷写到HFile，但把数据保存在内存中会有很高的概率导致数据丢失，为了解决这个问题，数据会先写在一个叫做Write-Ahead logfile的文件中，然后再写入MemStore中。所以在系统出现故障的时候，数据可以通过这个日志文件重建。</p><p><strong>4）BlockCache</strong></p><p>​读缓存，每次查询出的数据会缓存在BlockCache中，方便下次查询。最大限制是HBase内存的40% </p><h2 id="4-HBase数据写流程"><a href="#4-HBase数据写流程" class="headerlink" title="4. HBase数据写流程"></a>4. HBase数据写流程</h2><p>​Hbase会默认存在一个名为Hbase的namespace，里面有个meta的表格，其中存放着元数据信息，而某一个client写数据的时候，需要获取到这个元数据信息，才能去写数据，这个meta到底在哪一个regionserver维护？需要client去zookeeper中去寻找。</p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662126233372.png" alt="1662126233372"></p><p> meta表格信息如下：</p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662126326550.png" alt="1662126326550"></p><p>​ client可以从meta表格中获取哪一个表格是由哪一个regionserver所维护的，因此就可以向这个表格增加数据</p><p> <img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662126465194.png" alt="1662126465194"></p><ol><li>首先client会去zookeeper请求存放meta表格的regionserver</li><li>访问对应的regionserver，获取meta表格信息，根据自身所请求的表格和rowkey，确定目标数据位于哪一个regionserver中的哪一个region。并且把该table中的region信息以及meta表位置信息缓存到meta cache之中，方便下次访问</li><li>然后与目标regionserver进行通讯</li><li>将数据顺序写入目标RS的WAL文件之中</li><li>然后把数据写入memstore中，数据会在memstore中进行排序</li><li>向客户端发送ack</li><li>等达到memstore的刷写机制之后，把数据刷写到HFile中去。</li></ol><h2 id="5-Memstore刷写操作"><a href="#5-Memstore刷写操作" class="headerlink" title="5. Memstore刷写操作"></a>5. Memstore刷写操作</h2><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662126813770.png" alt="1662126813770"></p><ol><li><p>当某个memstore的大小达到了<strong>hbase.hregion.memstore.flush.size（默认值128M）</strong>，其所在region的所有memstore都会刷写。 </p><p>当memstore的大小达到了 <strong>hbase.hregion.memstore.flush.size</strong>（默认值128M）*<strong>hbase.hregion.memstore.block.multiplier</strong>（默认值4）时，会阻止继续往该memstore写数据。主要是由于可能写的速度非常快，可能上一次判断还是127MB，下一次判断就直接变为了512MB，由于写的速度很快导致的</p></li><li><p>当region server中memstore的总大小达到</p><p><strong>java_heapsize</strong></p><p><em><strong>hbase.regionserver.global.memstore.size</strong></em><em>（默认值0.4</em>*<strong>）</strong></p><p><em><strong>hbase.regionserver.global.memstore.size.lower.limit</strong></em><em>（默认值0.95</em>*<strong>）</strong>，</p><p>region会按照其所有memstore的大小顺序（由大到小）依次进行刷写。直到region server中所有memstore的总大小减小到上述值以下。（其实就是达到堆内存的38%之后，就会执行刷写操作）</p><p>当region server 中memstore的总大小达到</p><p><strong>java_heapsize</strong></p><p>*<strong>hbase.regionserver.global.memstore.size（默认值0.4）</strong></p><p>时，会阻止继续往所有的memstore写数据。</p></li><li><p>到达自动刷写的时间，也会触发memstore flush。自动刷新的时间间隔由该属性进行配置<strong>hbase.regionserver.optionalcacheflushinterval（默认1小时）</strong>。</p></li><li><p>当WAL文件的数量超过<strong>hbase.regionserver.max.logs</strong>，region会按照时间顺序依次进行刷写，直到WAL文件数量减小到<strong>hbase.regionserver.max.logs</strong>以下（该属性名已经废弃，现无需手动设置，最大值为32）。</p></li></ol><h2 id="6-Hbase读流程"><a href="#6-Hbase读流程" class="headerlink" title="6. Hbase读流程"></a>6. Hbase读流程</h2><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662128183264.png" alt="1662128183264"></p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662128199205.png" alt="1662128199205"></p><p><strong>读流程</strong></p><p>1）Client先访问zookeeper，获取hbase:meta表位于哪个Region Server。</p><p>2）访问对应的Region Server，获取hbase:meta表，根据读请求的namespace:table&#x2F;rowkey，查询出目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表 位置信息缓存在客户端的meta cache，方便下次访问。</p><p>3）与目标Region Server进行通讯；</p><p>4）分别在MemStore和Store File（HFile）中查询目标数据，并将查到的所有数据进行合并。此处所有数据是指同一条数据的不同版本（time stamp）或者不同的类型（Put&#x2F;Delete）。</p><p>5）将查询到的新的数据块（Block，HFile数据存储单元，默认大小为64KB）缓存到Block Cache。</p><p>6）将合并后的最终结果返回给客户端。</p><h2 id="7-HBase读取数据为何速度很快？"><a href="#7-HBase读取数据为何速度很快？" class="headerlink" title="7. HBase读取数据为何速度很快？"></a>7. HBase读取数据为何速度很快？</h2><p>​ 由6题中可知，我们HBase读取某一个数据的时候需要把HFile文件和Memstore中的文件进行合并，然后才能得到最新的数据，这么繁琐的操作是如何保证读取速度很快的呢？</p><p>​主要归功于时间范围、Rowkey范围、以及布隆过滤器等操作。</p><p>​ 首先我们可以根据时间范围、Rowkey把很多的Hfile过滤掉。然后可以根据布隆过滤器来接着筛选Hfile文件</p><p><strong>布隆过滤器原理</strong></p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662128821165.png" alt="1662128821165"></p><p>​布隆过滤器可以让我们知道，这个文件并不存在某一条数据。</p><p>​文件会维护一个数组。然后当client插入数据的时候，会经过三个hash算法，算出来三个值，然后我们把这个数组对应的位置赋值为1，当用户读取数据的时候，也是会把该数据经过这三个hash算法，如果三个值都为1，那么这个数据就有可能存在这个文件中，如果其中有一个不是1，那么这个数据肯定不存在于这个文件当中。</p><p>​这样就可以避免去遍历这个文件中的所有数据来判断这个数据是否存在，因此极大提升了读取数据速度。</p><h2 id="8-StoreFile的合并操作"><a href="#8-StoreFile的合并操作" class="headerlink" title="8. StoreFile的合并操作"></a>8. StoreFile的合并操作</h2><p>​由于memstore每次刷写都会生成一个新的HFile，且同一个字段的不同版本（timestamp）和不同类型（Put&#x2F;Delete）有可能会分布在不同的HFile中，因此查询时需要遍历所有的HFile。为了减少HFile的个数，以及清理掉过期和删除的数据，会进行StoreFile Compaction。</p><p>​Compaction分为两种，分别是Minor Compaction和Major Compaction。Minor Compaction会将临近的若干个较小的HFile合并成一个较大的HFile，并清理掉部分过期和删除的数据。Major Compaction会将一个Store下的所有的HFile合并成一个大HFile，并且<strong>会清理掉所有过期和删除的数据</strong>。</p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662129173208.png" alt="1662129173208"></p><h2 id="9-Region-Split"><a href="#9-Region-Split" class="headerlink" title="9. Region Split"></a>9. Region Split</h2><p>​默认情况下，每个Table起初只有一个Region，随着数据的不断写入，Region会自动进行拆分。刚拆分时，两个子Region都位于当前的Region Server，但处于负载均衡的考虑，HMaster有可能会将某个Region转移给其他的Region Server。</p><p>​Region Split时机：</p><ol><li><p>当1个region中的某个Store下所有StoreFile的总大小超过hbase.hregion.max.filesize，该Region就会进行拆分（0.94版本之前）。大小是10GB </p><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662129413947.png" alt="1662129413947"></p></li><li><p>当1个region中的某个Store下所有StoreFile的总大小超过Min(initialSize<em>R^3 ,hbase.hregion.max.filesize”)，该Region就会进行拆分。其中initialSize的默认值为2</em>hbase.hregion.memstore.flush.size，R为当前Region Server中属于该Table的Region个数（0.94版本之后）。</p><p>具体的切分策略为：</p><p>第一次split：1^3 * 256 &#x3D; 256MB </p><p>第二次split：2^3 * 256 &#x3D; 2048MB </p><p>第三次split：3^3 * 256 &#x3D; 6912MB </p><p>第四次split：4^3 * 256 &#x3D; 16384MB &gt; 10GB，因此取较小的值10GB </p><p>后面每次split的size都是10GB了。</p></li><li><p>Hbase 2.0引入了新的split策略：如果当前RegionServer上该表只有一个Region，按照2 * hbase.hregion.memstore.flush.size分裂，否则按照hbase.hregion.max.filesize分裂。</p></li></ol><p> <img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662129619223.png" alt="1662129619223"></p><h2 id="10-Hbase优化"><a href="#10-Hbase优化" class="headerlink" title="10.Hbase优化"></a>10.Hbase优化</h2><h3 id="10-1-预分区"><a href="#10-1-预分区" class="headerlink" title="10.1 预分区"></a>10.1 预分区</h3><p>​每一个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region维护。那么依照这个原则，我们可以将数据所要投放的分区提前大致的规划好，以提高HBase性能。</p><p><strong>1.手动设置预分区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">hbase&gt; </span><span class="language-bash">create <span class="string">&#x27;staff1&#x27;</span>,<span class="string">&#x27;info&#x27;</span>,SPLITS =&gt; [<span class="string">&#x27;1000&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="string">&#x27;3000&#x27;</span>,<span class="string">&#x27;4000&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662130710167.png" alt="1662130710167"></p><p><strong>2.生成十六进制序列预分区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;staff2&#x27;,&#x27;info&#x27;,&#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#x27;HexStringSplit&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662130740089.png" alt="1662130740089"></p><p><strong>3.按照文件中设置的规则预分区</strong></p><p>创建splits.txt文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">cccc</span><br><span class="line">dddd</span><br><span class="line">eeee</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;staff3&#x27;,&#x27;info&#x27;,SPLITS_FILE =&gt; &#x27;splits.txt&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662130786078.png" alt="1662130786078"></p><p><strong>4.通过javaAPI来分区</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义算法，产生一系列Hash散列值存储在二维数组中</span></span><br><span class="line"><span class="type">byte</span>[][] splitKeys = 某个散列值函数</span><br><span class="line"><span class="comment">//创建HbaseAdmin实例</span></span><br><span class="line"><span class="type">HBaseAdmin</span> <span class="variable">hAdmin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBaseAdmin</span>(HbaseConfiguration.create());</span><br><span class="line"><span class="comment">//创建HTableDescriptor实例</span></span><br><span class="line"><span class="type">HTableDescriptor</span> <span class="variable">tableDesc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTableDescriptor</span>(tableName);</span><br><span class="line"><span class="comment">//通过HTableDescriptor实例和散列值二维数组创建带有预分区的Hbase表</span></span><br><span class="line">hAdmin.createTable(tableDesc, splitKeys);</span><br></pre></td></tr></table></figure><p><img src="/2022/09/02/Hbase/Hbase%E6%A6%82%E5%BF%B5/1662130842605.png" alt="1662130842605"></p><h3 id="10-2-rowkey设计"><a href="#10-2-rowkey设计" class="headerlink" title="10.2 rowkey设计"></a>10.2 rowkey设计</h3><p>​一条数据的唯一标识就是rowkey，那么这条数据存储于哪个分区，取决于rowkey处于哪个一个预分区的区间内，设计rowkey的主要目的，就是让数据均匀的分布于所有的region中，在一定程度上防止数据倾斜。接下来我们就谈一谈rowkey常用的设计方案。</p><p><strong>1.生成随机数、hash、散列值</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如：</span><br><span class="line">原本rowKey为1001的，SHA1后变成：dd01903921ea24941c26a48f2cec24e0bb0e8cc7</span><br><span class="line">原本rowKey为3001的，SHA1后变成：49042c54de64a1e9bf0b33e00245660ef92dc7bd</span><br><span class="line">原本rowKey为5001的，SHA1后变成：7b61dec07e02c188790670af43e717f0f46e8913</span><br><span class="line">在做此操作之前，一般我们会选择从数据集中抽取样本，来决定什么样的rowKey来Hash后作为每个分区的临界值。</span><br></pre></td></tr></table></figure><p><strong>2.字符串反转</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20170524000001转成10000042507102   20170524000002转成20000042507102   </span><br></pre></td></tr></table></figure><p>这样也可以在一定程度上散列逐步put进来的数据。</p><p><strong>3.字符串拼接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20170524000001_a12e   20170524000001_93i7   </span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p>场景: 大量的运营商的通话数据<br>      1388888888(主叫) 13999999999(被叫) 2021-05-14 12:12:12  360 ……</p><p>业务: 查询某个用户 某天  某月  某年 的通话记录 </p><p>预分区: 预计规划50个分区 .</p><p>-∞  ~  00|<br>00| ~  01|<br>01| ~  02|<br>…….</p><p>分析:  假如将某个用户某天的数据存到一个分区中. 查某天的数据只需要扫描一个分区<br>           假如将某个用户某月的数据存到一个分区中. 查某天 某月的数据只需要扫描一个分区.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rowkey: 01_1388888888_2021-05-14 12:12:12  -&gt;  1388888888_2021-05 % 分区数  = 01</span><br><span class="line">01_1388888888_2021-05-15 12:12:12  -&gt;  1388888888_2021-05 % 分区数  = 01 </span><br><span class="line">01_1388888888_2021-05-16 12:12:12</span><br><span class="line">01_1388888888_2021-05-17 12:12:12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        03_1377777777_2021-05-16 12:12:12  -&gt;  1377777777_2021-05 % 分区数  = 03</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证:<br>查询  1388888888 用户 2020年08月的通话记录</p><ol><li>先计算分区号<br>1388888888_2020-08  % 50  &#x3D; 04 </li><li>rowkey<br>04_1388888888_2020-08-……..</li><li>scan<br>scan “teldata” ,{STARTROW&#x3D;&gt; ‘04_1388888888_2020-08’ STOPROW&#x3D;&gt; ‘04_1388888888_2020-08|’}</li></ol><p>查询  1388888888 用户 2020年08月08日的通话记录     </p><ol><li>先计算分区号<br>1388888888_2020-08  % 50  &#x3D; 04 </li><li>rowkey<br>04_1388888888_2020-08-08……..</li><li>scan<br>scan “teldata” ,{STARTROW&#x3D;&gt; ‘04_1388888888_2020-08-08’ STOPROW&#x3D;&gt; ‘04_1388888888_2020-08-08|’}</li></ol><p>查询  1388888888 用户 2020年08月 和 09月的通话记录 </p><ol><li>先计算分区号<br>1388888888_2020-08  % 50  &#x3D; 04<br>1388888888_2020-09  % 50  &#x3D; 06 </li><li>rowkey<br>04_1388888888_2020-08-……..<br>06_1388888888_2020-09-……..</li><li>scan<br>scan “teldata” ,{STARTROW&#x3D;&gt; ‘04_1388888888_2020-08’ STOPROW&#x3D;&gt; ‘04_1388888888_2020-08|’}<br>scan “teldata” ,{STARTROW&#x3D;&gt; ‘06_1388888888_2020-09’ STOPROW&#x3D;&gt; ‘06_1388888888_2020-09|’}</li></ol><p>查询  1388888888 用户 2020年08月09日 和 10日的通话记录      </p><ol><li>先计算分区号<br>1388888888_2020-08  % 50  &#x3D; 04 </li><li>rowkey<br>04_1388888888_2020-08-09……..<br>04_1388888888_2020-08-09……..<br>04_1388888888_2020-08-10……..</li><li>scan<br>scan “teldata” ,{STARTROW&#x3D;&gt; ‘04_1388888888_2020-08-09’ STOPROW&#x3D;&gt; ‘04_1388888888_2020-08-10|’}</li></ol><p><strong>上述例子中大量使用了字符串的拼接操作，比较巧妙</strong></p>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
            <tag> 布隆过滤器 </tag>
            
            <tag> RegionServer </tag>
            
            <tag> MemStore </tag>
            
            <tag> Store </tag>
            
            <tag> Region </tag>
            
            <tag> WAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka面试题总结</title>
      <link href="/2022/09/01/Kafka/Kafka%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/09/01/Kafka/Kafka%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Kafka中的ISR、AR又代表什么？"><a href="#1-Kafka中的ISR、AR又代表什么？" class="headerlink" title="1. Kafka中的ISR、AR又代表什么？"></a>1. Kafka中的ISR、AR又代表什么？</h2><p>​    ISR：与leader保持同步的follower集合</p><p>​    AR：分区的所有副本</p><h2 id="2-Kafka中的HW、LEO等分别代表什么？"><a href="#2-Kafka中的HW、LEO等分别代表什么？" class="headerlink" title="2. Kafka中的HW、LEO等分别代表什么？"></a>2. Kafka中的HW、LEO等分别代表什么？</h2><p>​    LEO：没个副本的最后条消息的offset</p><p>​    HW：一个分区中所有副本最小的offset</p><h2 id="3-Kafka中是怎么体现消息顺序性的？"><a href="#3-Kafka中是怎么体现消息顺序性的？" class="headerlink" title="3. Kafka中是怎么体现消息顺序性的？"></a>3. Kafka中是怎么体现消息顺序性的？</h2><p>​    每个分区内，每条消息都有一个offset，故只能保证分区内有序。</p><h2 id="4-Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？"><a href="#4-Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？" class="headerlink" title="4. Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？"></a>4. Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</h2><p>​    拦截器 -&gt; 序列化器 -&gt; 分区器</p><h2 id="5-Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？"><a href="#5-Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？" class="headerlink" title="5. Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？"></a>5. Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？</h2><p><img src="/2022/09/01/Kafka/Kafka%E9%9D%A2%E8%AF%95%E9%A2%98/1662033221113.png" alt="1662033221113"></p><h2 id="6-“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？"><a href="#6-“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？" class="headerlink" title="6. “消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？"></a>6. “消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？</h2><p>​    正确</p><h2 id="7-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset-1？"><a href="#7-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset-1？" class="headerlink" title="7. 消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1？"></a>7. 消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1？</h2><p>​    offset+1</p><h2 id="8-有哪些情形会造成重复消费？"><a href="#8-有哪些情形会造成重复消费？" class="headerlink" title="8. 有哪些情形会造成重复消费？"></a>8. 有哪些情形会造成重复消费？</h2><p>​    <img src="/2022/09/01/Kafka/Kafka%E9%9D%A2%E8%AF%95%E9%A2%98/1662033238360.png" alt="1662033238360"></p><h2 id="9-那些情景会造成消息漏消费？"><a href="#9-那些情景会造成消息漏消费？" class="headerlink" title="9. 那些情景会造成消息漏消费？"></a>9. 那些情景会造成消息漏消费？</h2><p>​    先提交offset，后消费，有可能造成数据的重复</p><h2 id="10-当你使用kafka-topics-sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？"><a href="#10-当你使用kafka-topics-sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？" class="headerlink" title="10. 当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？"></a>10. 当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？</h2><p>​    1）会在zookeeper中的&#x2F;brokers&#x2F;topics节点下创建一个新的topic节点，如：&#x2F;brokers&#x2F;topics&#x2F;first</p><p>​    2）触发Controller的监听程序</p><p>​    3）kafka Controller 负责topic的创建工作，并更新metadata cache</p><h2 id="11-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"><a href="#11-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？" class="headerlink" title="11. topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"></a>11. topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</h2><p>可以增加</p><p>bin&#x2F;kafka-topics.sh –zookeeper localhost:2181&#x2F;kafka –alter –topic topic-config –partitions 3</p><h2 id="12-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"><a href="#12-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？" class="headerlink" title="12. topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"></a>12. topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</h2><p>​    不可以减少，现有的分区数据难以处理。</p><h2 id="13-Kafka有内部的topic吗？如果有是什么？有什么所用？"><a href="#13-Kafka有内部的topic吗？如果有是什么？有什么所用？" class="headerlink" title="13. Kafka有内部的topic吗？如果有是什么？有什么所用？"></a>13. Kafka有内部的topic吗？如果有是什么？有什么所用？</h2><p>​    __consumer_offsets,保存消费者offset</p><h2 id="14-Kafka分区分配的概念？"><a href="#14-Kafka分区分配的概念？" class="headerlink" title="14. Kafka分区分配的概念？"></a>14. Kafka分区分配的概念？</h2><p>​    一个topic多个分区，一个消费者组多个消费者，故需要将分区分配个消费者(roundrobin、range)</p><h2 id="15-简述Kafka的日志目录结构？"><a href="#15-简述Kafka的日志目录结构？" class="headerlink" title="15. 简述Kafka的日志目录结构？"></a>15. 简述Kafka的日志目录结构？</h2><p>​    每个分区对应一个文件夹，文件夹的命名为topic-0，topic-1，内部为.log和.index文件</p><h2 id="16-如果我指定了一个offset，Kafka-Controller怎么查找到对应的消息？"><a href="#16-如果我指定了一个offset，Kafka-Controller怎么查找到对应的消息？" class="headerlink" title="16. 如果我指定了一个offset，Kafka Controller怎么查找到对应的消息？"></a>16. 如果我指定了一个offset，Kafka Controller怎么查找到对应的消息？</h2><p>​       </p><h2 id="17-聊一聊Kafka-Controller的作用？"><a href="#17-聊一聊Kafka-Controller的作用？" class="headerlink" title="17. 聊一聊Kafka Controller的作用？"></a>17. 聊一聊Kafka Controller的作用？</h2><p>​    负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</p><h2 id="18-Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？"><a href="#18-Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？" class="headerlink" title="18. Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？"></a>18. Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？</h2><p>​    partition leader（ISR），controller（先到先得）</p><h2 id="19-失效副本是指什么？有那些应对措施？"><a href="#19-失效副本是指什么？有那些应对措施？" class="headerlink" title="19. 失效副本是指什么？有那些应对措施？"></a>19. 失效副本是指什么？有那些应对措施？</h2><p>​    不能及时与leader同步，暂时踢出ISR，等其追上leader之后再重新加入</p><h2 id="20-Kafka的那些设计让它有如此高的性能？"><a href="#20-Kafka的那些设计让它有如此高的性能？" class="headerlink" title="20. Kafka的那些设计让它有如此高的性能？"></a>20. Kafka的那些设计让它有如此高的性能？</h2><p>​    分区，顺序写磁盘，0-copy</p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> topic </tag>
            
            <tag> Kafka </tag>
            
            <tag> 分区 </tag>
            
            <tag> ISR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka概述</title>
      <link href="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Kafka概述"><a href="#1-Kafka概述" class="headerlink" title="1. Kafka概述"></a>1. Kafka概述</h2><h3 id="1-1Kafka定义"><a href="#1-1Kafka定义" class="headerlink" title="1.1Kafka定义"></a>1.1Kafka定义</h3><p>​kafka是一个分布式的基于发布&#x2F;订阅模式的消息队列，主要应用于大数据实时处理领域</p><h3 id="1-2-消息队列"><a href="#1-2-消息队列" class="headerlink" title="1.2 消息队列"></a>1.2 消息队列</h3><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1661997559323.png" alt="1661997559323"></p><p><strong>使用消息队列的好处：</strong></p><p>1）解耦</p><p>​允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><p>2）可恢复性</p><p>​系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p><p>3）缓冲</p><p>​有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p><p>4）灵活性 &amp; 峰值处理能力</p><p>​在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p><p>5）异步通信</p><p>​很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h3 id="1-3-消息队列的两种模式"><a href="#1-3-消息队列的两种模式" class="headerlink" title="1.3 消息队列的两种模式"></a>1.3 消息队列的两种模式</h3><p><strong>（1）点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）</strong></p><p>​消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662019291856.png" alt="1662019291856"></p><p><strong>（2）发布&#x2F;订阅模式（一对多，消费者消费数据之后不会清除消息）</strong></p><p>​消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662019314571.png" alt="1662019314571"></p><h3 id="1-4-Kakfa基础架构"><a href="#1-4-Kakfa基础架构" class="headerlink" title="1.4 Kakfa基础架构"></a>1.4 Kakfa基础架构</h3><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662019514912.png" alt="1662019514912"></p><p><strong>1）Producer</strong> <strong>：</strong>消息生产者，就是向kafka broker发消息的客户端；</p><p><strong>2）Consumer</strong> <strong>：</strong>消息消费者，向kafka broker取消息的客户端；</p><p><strong>3）Consumer Group （CG）</strong>：<strong>消费者组，由多个consumer组成。</strong>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。<strong>所有的消费者都属于某个消费者组，即</strong>消费者组是逻辑上的一个订阅者。</p><p><strong>4）Broker</strong> <strong>：</strong>一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</p><p><strong>5）Topic</strong> <strong>：</strong>可以理解为一个队列，生产者和消费者面向的都是一个<strong>topic</strong>；</p><p><strong>6）Partition</strong>：<strong>为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，</strong>一个<strong>topic</strong>可以分为多个partition，每个partition是一个有序的队列；</p><p><strong>7）Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个</strong>leader<strong>和若干个</strong>follower。</p><p><strong>8）leader</strong>：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。</p><p><strong>9）follower</strong>：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader。</p><h2 id="2-Kafka命令行操作"><a href="#2-Kafka命令行操作" class="headerlink" title="2. Kafka命令行操作"></a>2. Kafka命令行操作</h2><p><strong>1.启动Kafka集群</strong></p><p>首先需要启动Zookeeper集群，然后再启动Kakfa</p><p>单节点启动指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">[atguigu@hadoop103 kafka]$ bin/kafka-server-start.sh -daemon  config/server.properties</span><br><span class="line">[atguigu@hadoop104 kafka]$ bin/kafka-server-start.sh -daemon  config/server.properties</span><br></pre></td></tr></table></figure><p>单节点关闭指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-server-stop.sh stop</span><br><span class="line">[atguigu@hadoop103 kafka]$ bin/kafka-server-stop.sh stop</span><br><span class="line">[atguigu@hadoop104 kafka]$ bin/kafka-server-stop.sh stop</span><br></pre></td></tr></table></figure><p>群起脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then </span><br><span class="line">  echo &quot;Input Args Error.....&quot;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">  echo &quot;==================START $i KAFKA===================&quot;</span><br><span class="line">  ssh $i /opt/module/kafka_2.11-2.4.1/bin/kafka-server-start.sh -daemon /opt/module/kafka_2.11-2.4.1/config/server.properties</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">  echo &quot;==================STOP $i KAFKA===================&quot;</span><br><span class="line">  ssh $i /opt/module/kafka_2.11-2.4.1/bin/kafka-server-stop.sh stop</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line"> echo &quot;Input Args Error.....&quot;</span><br><span class="line"> exit</span><br><span class="line">;;  </span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>2.查看当前服务器所有topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --list</span><br></pre></td></tr></table></figure><p><strong>3.创建topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --create --replication-factor 3 --partitions 1 --topic first</span><br></pre></td></tr></table></figure><p>​选项说明：</p><p>​–topic 定义topic名</p><p>​–replication-factor  定义副本数</p><p>​–partitions  定义分区数</p><p><strong>4.发送消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-console-producer.sh --broker-list hadoop102:9092 --topic first</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">hello world</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">atguigu  atguigu</span></span><br></pre></td></tr></table></figure><p><strong>5.消费消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --topic first</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --from-beginning --topic first</span><br></pre></td></tr></table></figure><p>​–from-beginning：会把主题中现有的所有的数据都读取出来。</p><p><strong>6.查看某个topic的详情</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --describe –</span><br><span class="line">-topic first</span><br></pre></td></tr></table></figure><p><strong>7.修改分区数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --alter –-</span><br><span class="line">topic first --partitions 6</span><br></pre></td></tr></table></figure><h2 id="3-Kafka工作流程以及文件存储机制"><a href="#3-Kafka工作流程以及文件存储机制" class="headerlink" title="3. Kafka工作流程以及文件存储机制"></a>3. Kafka工作流程以及文件存储机制</h2><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662020587465.png" alt="1662020587465"></p><p>​Kafka中的消息按照topic来分类，生产者生产消息，消费者消费消息，都是面向topic的</p><p>​topic是逻辑上的概念，而partition是物理上的概念，每一个partition都对应一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断的追加到log文件的末端，而且每一条数据都会有个offset。消费者组中的每一个消费者，都会实时记录自己消费到了哪一个offset，用来实施回复，从上次的位置继续消费。</p><p>​在kafka0.9版本之前，offset的信息都是存放在zookeeper之中，之后的版本是存放在Kafka之中</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662021768846.png" alt="1662021768846"></p><p>​由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个partition分为多个segment。每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure><p>​index和log文件以当前segment的第一条消息的offset命名。下图为index文件和log文件的结构示意图。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662021987087.png" alt="1662021987087"></p><p>​“.index”文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址。</p><h2 id="4-Kafka生产者"><a href="#4-Kafka生产者" class="headerlink" title="4. Kafka生产者"></a>4. Kafka生产者</h2><h3 id="4-1-分区策略"><a href="#4-1-分区策略" class="headerlink" title="4.1 分区策略"></a>4.1 分区策略</h3><p><strong>为什么要分区？</strong></p><p><a href="https://zhuanlan.zhihu.com/p/125159716">Kafka的topic为什么要分区 - 知乎 (zhihu.com)</a></p><ol><li><strong>可以提高并发性</strong>，这样可以以partition作为单位去读写，多个partition可以提升读写的性能（多个分区存在多个磁盘，可以成倍的增加系统的性能，在kafka中其实读写操作都是面向leader的，而kafka会把不同的分区分配给不同的机器当作leader，这样可以极大提高并发性 ） </li><li><strong>方便在集群中扩展</strong>，每一个partition可以通过调整以适应它所在的机器，而一个topic可以有多个partition组成，因此整个集群可以适应任意大小的数据，通俗的解释就是，如果一开始没有规划好，目前的机器已经存放不下生产的数据了，我们可以通过增加机器，在增加的机器上增加分区，这样就可以在集群中接着存放数据了，所以方便了集群中扩展</li></ol><p><strong>但这又产生了一个问题，既然我们有多个分区，那么生产者生产的数据该存放在哪一个分区上呢？</strong></p><p>我们需要把生产者发送的数据封装成一个producerRecord对象，该对象在java中有很多重载方法，主要有几下几种情况</p><p>（1）  指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</p><p>（2） 没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</p><p>（3）  既没有 partition 值又没有 key 值的情况下， kafka采用Sticky Partition(黏性分区器)，会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，kafka再随机一个分区进行使用.</p><h3 id="4-2-数据可靠性保证"><a href="#4-2-数据可靠性保证" class="headerlink" title="4.2 数据可靠性保证"></a>4.2 数据可靠性保证</h3><p>​为保证producer发送的数据，能可靠的发送到指定的topic，topic的每个partition收到producer发送的数据后，都需要向producer发送ack（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662023547423.png" alt="1662023547423"></p><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>半数以上完成同步，就发送ack</strong></td><td>延迟低</td><td>选举新的leader时，容忍n台节点的故障，需要2n+1个副本</td></tr><tr><td><strong>全部完成同步，才发送ack</strong></td><td>选举新的leader时，容忍n台节点的故障，需要n+1个副本</td><td>延迟高</td></tr></tbody></table><p>Kafka选择了第二种方案，原因如下：</p><ol><li><p>同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。（<strong>通俗理解就是，如果采用第一种方式，如果集群有2n+1台节点，一旦超过n台节点故障，那么集群就不再可用，而第二种方案只需要n+1台节点就可以实现同让的容错能力，因此使用了第二种方案</strong>）</p></li><li><p>虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。</p></li></ol><hr><p>​采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？</p><p>​       <strong>Leader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定。Leader发生故障之后，就会从ISR中选举新的leader。</strong></p><hr><p><strong>ack应答级别</strong></p><p>​对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。</p><p>​所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。</p><p><strong>acks参数配置：</strong></p><p><strong>acks</strong>：</p><p>0：这一操作提供了一个最低的延迟，partition的leader接收到消息还没有写入磁盘就已经返回ack，当leader故障时有可能<strong>丢失数据</strong>；</p><p>1： partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会<strong>丢失数据</strong>；</p><p>-1（all）： partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成<strong>数据重复</strong>。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662024173426.png" alt="1662024173426"></p><hr><p><strong>leader和 follower故障处理细节</strong></p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662024671775.png" alt="1662024671775"></p><p><strong>LEO</strong>：指的是每个副本最大的offset;</p><p><strong>HW：指的是消费者能见到的最大的offset，ISR队列中最小的LEO。</strong></p><p><strong>（1）follower故障</strong></p><p>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该<strong>follower的LEO大于等于该Partition的HW</strong>，即follower追上leader之后，就可以重新加入ISR了。</p><p><strong>（2）leader故障</strong></p><p>leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件<strong>高于HW</strong>的部分截掉，然后从新的leader同步数据。</p><p>注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><h3 id="4-3-Exactly-Once语义"><a href="#4-3-Exactly-Once语义" class="headerlink" title="4.3 Exactly Once语义"></a>4.3 Exactly Once语义</h3><p>​将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即At Least Once语义。相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once语义。</p><p>​       At Least Once可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once可以保证数据不重复，但是不能保证数据不丢失。但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。</p><p>​0.11版本的Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条。幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：<strong>At Least Once +</strong> <strong>幂等性 &#x3D; Exactly Once</strong></p><p>​       要启用幂等性，只需要将Producer的参数中<strong>enable.idempotence</strong>设置为true即可。Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。而Broker端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。</p><p>​但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once。</p><h2 id="5-Kafka消费者"><a href="#5-Kafka消费者" class="headerlink" title="5. Kafka消费者"></a>5. Kafka消费者</h2><p>​<strong>一个分区只能被一个消费者组中的一个消费者所消费</strong></p><h3 id="5-1-消费方式"><a href="#5-1-消费方式" class="headerlink" title="5.1 消费方式"></a>5.1 消费方式</h3><p>​<strong>consumer采用pull（拉）模式从broker中读取数据。</strong></p><p>​<strong>push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的</strong>。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</p><p>​<strong>pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。</strong>针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。</p><h3 id="5-2-分区分配策略"><a href="#5-2-分区分配策略" class="headerlink" title="5.2 分区分配策略"></a>5.2 分区分配策略</h3><p>​一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。</p><p>​Kafka有三种分配策略，RoundRobin，Range , Sticky。</p><p><strong>1.RoundRobin</strong></p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662030059833.png" alt="1662030059833"></p><p>这种方式其实就是轮询分配，从第一个分区到最后一个分区，一个分配给一个消费者，从上到下。</p><p><strong>2.Range</strong> </p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662030016065.png" alt="1662030016065"></p><p>如果除的开，就平等分，把某一个范围内的给某一个消费者去消费，如果除不开，就是让前面的多点分区</p><p><strong>3.Sticky</strong></p><p>粘性分区，这个跟RoundRobin有点像，其实第一次分配都是一模一样，不同点在于当消费者数目增加或者减少的时候。RoundRobin会把所有的分区取回来，按照编号重新排列，然后重新分配给某一个消费者，而粘性分区会把原有消费者负责的分区不变，只把改变的分区再重新分配到消费者中去消费</p><h3 id="5-3-offset的维护"><a href="#5-3-offset的维护" class="headerlink" title="5.3 offset的维护"></a>5.3 offset的维护</h3><p>​由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。</p><p>​Kafka 0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，该topic为**__consumer_offsets**。</p><p><strong>1.消费offset案例</strong></p><p><strong>修改配置文件consumer.properties</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不排除内部的topic</span></span><br><span class="line">exclude.internal.topics=false</span><br></pre></td></tr></table></figure><p><strong>创建一个topic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --topic atguigu --zookeeper hadoop102:2181 --partitions 2</span><br><span class="line"> --replication-factor 2</span><br></pre></td></tr></table></figure><p><strong>启动生产者和消费者，分别往atguigu生产数据和消费数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --topic atguigu --broker-list  hadoop102:9092</span><br><span class="line">bin/kafka-console-consumer.sh --consumer.config config/consumer.properties --topic atguigu --bootstrap-server hadoop102:9092</span><br></pre></td></tr></table></figure><p><strong>消费offset</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --topic __consumer_offsets --bootstrap-server  hadoop102:9092  --formatter &quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --consumer.config config/consumer.properties --from-beginning</span><br></pre></td></tr></table></figure><p><strong>消费到的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[test-consumer-group,atguigu,1]::OffsetAndMetadata(offset=2, leaderEpoch=Optional[0],</span><br><span class="line"> metadata=, commitTimestamp=1591935656078, expireTimestamp=None)</span><br><span class="line">[test-consumer-group,atguigu,0]::OffsetAndMetadata(offset=1, leaderEpoch=Optional[0], metadata=, commitTimestamp=1591935656078, expireTimestamp=None)</span><br></pre></td></tr></table></figure><h2 id="6-Zookeeper在Kafka中的作用"><a href="#6-Zookeeper在Kafka中的作用" class="headerlink" title="6. Zookeeper在Kafka中的作用"></a>6. Zookeeper在Kafka中的作用</h2><p>​Kafka集群中有一个broker会被选举为Controller，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</p><p>​Controller的管理工作都是依赖于Zookeeper的。</p><p>​       以下为partition的leader选举过程：</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662033484241.png" alt="1662033484241"></p><h2 id="7-Kafka事务（了解就好）"><a href="#7-Kafka事务（了解就好）" class="headerlink" title="7. Kafka事务（了解就好）"></a>7. Kafka事务（了解就好）</h2><p>​Kafka从0.11版本开始引入了事务支持。事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么&#96;全部成功，要么全部失败。</p><p><strong>Producer事务</strong></p><p>​为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。</p><p>​为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><p><strong>Consumer事务（精准一次性消费）</strong></p><p>​上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p><p>​如果想完成Consumer端的精准一次性消费，那么需要kafka消费端将消费过程和提交offset过程做原子绑定。此时我们需要将kafka的offset保存到支持事务的自定义介质（比如mysql）。这部分知识会在后续项目部分涉及。</p><h2 id="8-Producer-API"><a href="#8-Producer-API" class="headerlink" title="8. Producer API"></a>8. Producer API</h2><h3 id="8-1-消息发送流程"><a href="#8-1-消息发送流程" class="headerlink" title="8.1 消息发送流程"></a>8.1 消息发送流程</h3><p>​Kafka的Producer发送消息采用的是<strong>异步发送</strong>的方式。在消息发送的过程中，涉及到了<strong>两个线程——main线程和Sender线程</strong>，以及<strong>一个线程共享变量——RecordAccumulator</strong>。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662041925263.png" alt="1662041925263"></p><p><strong>相关参数：</strong></p><p><strong>batch.size：</strong>只有数据积累到batch.size之后，sender才会发送数据。</p><p><strong>linger.ms：</strong>如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。</p><h3 id="8-2-异步发送API"><a href="#8-2-异步发送API" class="headerlink" title="8.2 异步发送API"></a>8.2 异步发送API</h3><p><strong>导入依赖：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.12.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>需要用到的类：</p><p><strong>KafkaProducer</strong>：需要创建一个生产者对象，用来发送数据</p><p><strong>ProducerConfig</strong>：获取所需的一系列配置参数</p><p><strong>ProducerRecord</strong>：每条数据都要封装成一个ProducerRecord对象</p><p>（1）<strong>不带回调函数的API</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        //kafka集群，broker-list</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        //重试次数</span><br><span class="line">        props.put(&quot;retries&quot;, 1); </span><br><span class="line"></span><br><span class="line">        //批次大小</span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384); </span><br><span class="line"></span><br><span class="line">        //等待时间</span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1); </span><br><span class="line"></span><br><span class="line">        //RecordAccumulator缓冲区大小</span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）<strong>带回调函数的API</strong></p><p>​回调函数会在producer收到ack时调用，为异步调用，该方法有两个参数，分别是RecordMetadata和Exception，如果Exception为null，说明消息发送成功，如果Exception不为null，说明消息发送失败。</p><p>​注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);//kafka集群，broker-list</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;retries&quot;, 1);//重试次数</span><br><span class="line"></span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);//批次大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);//等待时间</span><br><span class="line"></span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);//RecordAccumulator缓冲区大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i)), new Callback() &#123;</span><br><span class="line"></span><br><span class="line">                //回调函数，该方法会在Producer收到ack时调用，为异步调用</span><br><span class="line">                @Override</span><br><span class="line">                public void onCompletion(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line">                    if (exception == null) &#123;</span><br><span class="line">                        System.out.println(&quot;success-&gt;&quot; + metadata.offset());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        exception.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-分区器"><a href="#8-3-分区器" class="headerlink" title="8.3 分区器"></a>8.3 分区器</h3><p><strong>1）</strong>  默认的分区器 DefaultPartitioner</p><p><strong>2）</strong>  自定义分区器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MyPartitioner implements Partitioner &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 计算某条消息要发送到哪个分区</span><br><span class="line">     * @param topic 主题</span><br><span class="line">     * @param key   消息的key</span><br><span class="line">     * @param keyBytes 消息的key序列化后的字节数组</span><br><span class="line">     * @param value 消息的value</span><br><span class="line">     * @param valueBytes   消息的value序列化后的字节数组</span><br><span class="line">     * @param cluster</span><br><span class="line">     * @return</span><br><span class="line">     *</span><br><span class="line">     * 需求: 以atguigu主题为例，2个分区</span><br><span class="line">     *       消息的 value包含&quot;atguigu&quot;的 进入0号分区</span><br><span class="line">     *       其他的消息进入1号分区</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">        String msgValue = value.toString();</span><br><span class="line">        int partition ;</span><br><span class="line">        if(msgValue.contains(&quot;atguigu&quot;))&#123;</span><br><span class="line">            partition = 0;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            partition = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return partition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收尾工作</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void close() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取配置的</span><br><span class="line">     * @param configs</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-同步发送API"><a href="#8-4-同步发送API" class="headerlink" title="8.4 同步发送API"></a>8.4 同步发送API</h3><p>​        同步发送的意思就是，一条消息发送之后，会阻塞当前线程，直至返回ack。</p><p>​由于send方法返回的是一个Future对象，根据Futrue对象的特点，我们也可以实现同步发送的效果，只需在调用Future对象的get方发即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line">import org.apache.kafka.clients.producer.Producer;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line">public class CustomProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);//kafka集群，broker-list</span><br><span class="line"></span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;retries&quot;, 1);//重试次数</span><br><span class="line"></span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);//批次大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);//等待时间</span><br><span class="line"></span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);//RecordAccumulator缓冲区大小</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;first&quot;, Integer.toString(i), Integer.toString(i))).get();</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-Consumer-API"><a href="#9-Consumer-API" class="headerlink" title="9. Consumer API"></a>9. Consumer API</h2><p>​Consumer消费数据时的可靠性是很容易保证的，因为数据在Kafka中是持久化的，故不用担心数据丢失问题。</p><p>​由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。所以offset的维护是Consumer消费数据是必须考虑的问题。</p><h3 id="9-1-自动提交offset"><a href="#9-1-自动提交offset" class="headerlink" title="9.1 自动提交offset"></a>9.1 自动提交offset</h3><p>需要用到的类：</p><p><strong>KafkaConsumer</strong>：需要创建一个消费者对象，用来消费数据</p><p><strong>ConsumerConfig</strong>：获取所需的一系列配置参数</p><p><strong>ConsuemrRecord</strong>：每条数据都要封装成一个ConsumerRecord对象</p><p>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。 </p><p>自动提交offset的相关参数：</p><p><strong>enable.auto.commit：</strong>是否开启自动提交offset功能</p><p><strong>auto.commit.interval.ms：</strong>自动提交offset的时间间隔</p><p><strong>消费者自动提交offset</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class CustomConsumer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);</span><br><span class="line"></span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-重置offset"><a href="#9-2-重置offset" class="headerlink" title="9.2 重置offset"></a>9.2 重置offset</h3><p>auto.offset.rest &#x3D; earliest | latest | none |</p><h3 id="9-3-手动提交offset"><a href="#9-3-手动提交offset" class="headerlink" title="9.3 手动提交offset"></a>9.3 手动提交offset</h3><p>​虽然自动提交offset十分简介便利，但由于其是基于时间提交的，开发人员难以把握offset提交的时机。因此Kafka还提供了手动提交offset的API。</p><p>​手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。两者的相同点是，都会将<strong>本次poll的一批数据最高的偏移量提交</strong>；不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。</p><p><strong>1）同步提交offset</strong></p><p>​由于同步提交offset有失败重试机制，故更加可靠，以下为同步提交offset的示例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class CustomComsumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">//Kafka集群</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;); </span><br><span class="line"></span><br><span class="line">//消费者组，只要group.id相同，就属于同一个消费者组</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;); </span><br><span class="line"></span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;false&quot;);//关闭自动提交offset</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));//消费者订阅主题</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line"></span><br><span class="line">//消费者拉取数据</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100); </span><br><span class="line"></span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//同步提交，当前线程会阻塞直到offset提交成功</span><br><span class="line">            consumer.commitSync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2）异步提交offset</strong></p><p>​虽然同步提交offset更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会收到很大的影响。因此更多的情况下，会选用异步提交offset的方式。</p><p>​以下为异步提交offset的示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.*;</span><br><span class="line">import org.apache.kafka.common.TopicPartition;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CustomConsumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line"></span><br><span class="line">        //Kafka集群</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;); </span><br><span class="line"></span><br><span class="line">        //消费者组，只要group.id相同，就属于同一个消费者组</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;); </span><br><span class="line"></span><br><span class="line">        //关闭自动提交offset</span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;false&quot;);</span><br><span class="line"></span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;first&quot;));//消费者订阅主题</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);//消费者拉取数据</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s%n&quot;, record.offset(), record.key(), record.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//异步提交</span><br><span class="line">            consumer.commitAsync(new OffsetCommitCallback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception) &#123;</span><br><span class="line">                    if (exception != null) &#123;</span><br><span class="line">                        System.err.println(&quot;Commit failed for&quot; + offsets);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）</strong>  <strong>数据漏消费和重复消费分析</strong></p><p>​无论是同步提交还是异步提交offset，都有可能会造成数据的漏消费或者重复消费。先提交offset后消费，有可能造成数据的漏消费；而先消费后提交offset，有可能会造成数据的重复消费。</p><h2 id="10-自定义拦截器"><a href="#10-自定义拦截器" class="headerlink" title="10. 自定义拦截器"></a>10. 自定义拦截器</h2><h3 id="10-1-拦截器原理"><a href="#10-1-拦截器原理" class="headerlink" title="10.1 拦截器原理"></a>10.1 拦截器原理</h3><p>​Producer拦截器(interceptor)是在Kafka 0.10版本被引入的，主要用于实现clients端的定制化控制逻辑。</p><p>​对于producer而言，interceptor使得用户在消息发送前以及producer回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链(interceptor chain)。Intercetpor的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor，其定义的方法包括：</p><p>（1）configure(configs)</p><p>​获取配置信息和初始化数据时调用。</p><p>（2）onSend(ProducerRecord)：</p><p>​该方法封装进KafkaProducer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算。</p><p>（3）onAcknowledgement(RecordMetadata, Exception)：</p><p>​该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。并且通常都是在producer回调逻辑触发之前。onAcknowledgement运行在producer的IO线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率。</p><p>（4）close：</p><p>​关闭interceptor，主要用于执行一些资源清理工作</p><p>​如前所述，interceptor可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。另外倘若指定了多个interceptor，则producer将按照指定顺序调用它们，并仅仅是捕获每个interceptor可能抛出的异常记录到错误日志中而非在向上传递。这在使用过程中要特别留意。</p><h3 id="10-2-拦截器案例"><a href="#10-2-拦截器案例" class="headerlink" title="10.2 拦截器案例"></a>10.2 拦截器案例</h3><p><strong>需求：</strong></p><p>​实现一个简单的双interceptor组成的拦截链。第一个interceptor会在消息发送前将时间戳信息加到消息value的最前部；第二个interceptor会在消息发送后更新成功发送消息数或失败发送消息数。</p><p><strong>案例实操</strong></p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662042928444.png" alt="1662042928444"></p><p>（1）增加时间戳拦截器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka.interceptor;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line">public class TimeInterceptor implements ProducerInterceptor&lt;String, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个新的record，把时间戳写入消息体的最前部</span><br><span class="line">return new ProducerRecord(record.topic(), record.partition(), record.timestamp(), record.key(),</span><br><span class="line">System.currentTimeMillis() + &quot;,&quot; + record.value().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onAcknowledgement(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）统计发送消息成功和发送失败消息数，并在producer关闭时打印这两个计数器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka.interceptor;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line">public class CounterInterceptor implements ProducerInterceptor&lt;String, String&gt;&#123;</span><br><span class="line">    private int errorCounter = 0;</span><br><span class="line">    private int successCounter = 0;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configure(Map&lt;String, ?&gt; configs) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ProducerRecord&lt;String, String&gt; onSend(ProducerRecord&lt;String, String&gt; record) &#123;</span><br><span class="line"> return record;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onAcknowledgement(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line">// 统计成功和失败的次数</span><br><span class="line">        if (exception == null) &#123;</span><br><span class="line">            successCounter++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            errorCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line">        // 保存结果</span><br><span class="line">        System.out.println(&quot;Successful sent: &quot; + successCounter);</span><br><span class="line">        System.out.println(&quot;Failed sent: &quot; + errorCounter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）producer主程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.kafka.interceptor;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line">import org.apache.kafka.clients.producer.Producer;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line">public class InterceptorProducer &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">// 1 设置配置信息</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.put(&quot;bootstrap.servers&quot;, &quot;hadoop102:9092&quot;);</span><br><span class="line">props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line">props.put(&quot;retries&quot;, 3);</span><br><span class="line">props.put(&quot;batch.size&quot;, 16384);</span><br><span class="line">props.put(&quot;linger.ms&quot;, 1);</span><br><span class="line">props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line">props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">// 2 构建拦截链</span><br><span class="line">List&lt;String&gt; interceptors = new ArrayList&lt;&gt;();</span><br><span class="line">interceptors.add(&quot;com.atguigu.kafka.interceptor.TimeInterceptor&quot;); interceptors.add(&quot;com.atguigu.kafka.interceptor.CounterInterceptor&quot;); </span><br><span class="line">props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);</span><br><span class="line"> </span><br><span class="line">String topic = &quot;first&quot;;</span><br><span class="line">Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">// 3 发送消息</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line"></span><br><span class="line">    ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(topic, &quot;message&quot; + i);</span><br><span class="line">    producer.send(record);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 4 一定要关闭producer，这样才会调用interceptor的close方法</span><br><span class="line">producer.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>在kafka上启动消费者，然后运行客户端java程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --from-beginning --topic first</span><br><span class="line"></span><br><span class="line">1501904047034,message0</span><br><span class="line">1501904047225,message1</span><br><span class="line">1501904047230,message2</span><br><span class="line">1501904047234,message3</span><br><span class="line">1501904047236,message4</span><br><span class="line">1501904047240,message5</span><br><span class="line">1501904047243,message6</span><br><span class="line">1501904047246,message7</span><br><span class="line">1501904047249,message8</span><br><span class="line">1501904047252,message9</span><br></pre></td></tr></table></figure><h2 id="11-Flume-和-Kafka的对接"><a href="#11-Flume-和-Kafka的对接" class="headerlink" title="11.Flume 和 Kafka的对接"></a>11.Flume 和 Kafka的对接</h2><ol><li><p>KafkaSource<br> 用于从kafka中读取数据.KafkaSource对于flume来讲是一个source的角色. 对于Kafka来讲，是一个消费者的角色.</p></li><li><p>KafkaSink<br> 用于往Kafka中写数据KafkaSink对于flume来讲是一个sink的角色,对于kafka来讲，是一个生产者的角色. </p></li><li><p>KafkaChannel<br>① 作为一个基本的channel来使用.<br>   xxxSource -&gt; KafkaChannel -&gt; xxxSink</p></li></ol><p>​    ② 支持往kafka中写入数据<br>​       xxxSource -&gt; KafkaChannel </p><p>​    ③ 支持从Kafka中读取数据</p><p>​kafkaChannel -&gt; xxxSink  </p><p><strong>1.Flume-&gt; Kafka:KafkaSink</strong></p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662043816100.png" alt="1662043816100"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Named</span></span><br><span class="line">a1.sources = r1 </span><br><span class="line">a1.channels = c1 </span><br><span class="line">a1.sinks = k1 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 6666 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Channel</span> </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sink</span></span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092</span><br><span class="line">a1.sinks.k1.kafka.topic = flumetopic</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 100</span><br><span class="line">a1.sinks.k1.useFlumeEventFormat = true</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = -1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bind</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c $FLUME_HOME/conf -f $FLUME_HOME/jobs/kafka/netcat-flume-kafka.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><strong>2.Flume-&gt;Kafka : KafkaSink</strong></p><p>需求如下图，按照已有知识分析思路如下图</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662044250870.png" alt="1662044250870"></p><p>简化方法如下（可以通过Kafka的一个功能实现简化操作）：</p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662044394191.png" alt="1662044394191"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Named</span></span><br><span class="line">a1.sources = r1 </span><br><span class="line">a1.channels = c1 </span><br><span class="line">a1.sinks = k1 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 6666 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Channel</span> </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Interceptor</span></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = com.atguigu.kafka.flumeinterceptor.DataValueInterceptor$MyBuilder</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sink</span></span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092</span><br><span class="line">a1.sinks.k1.kafka.topic = topicother</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 100</span><br><span class="line">a1.sinks.k1.useFlumeEventFormat = true</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = -1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bind</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><strong>3.Kafka-&gt;Flume : Kafka Source</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">kafka-flume-logger.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Named</span></span><br><span class="line">a1.sources = r1 </span><br><span class="line">a1.channels = c1 </span><br><span class="line">a1.sinks = k1 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Source</span></span><br><span class="line">a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class="line">a1.sources.r1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092</span><br><span class="line">a1.sources.r1.kafka.topics = first</span><br><span class="line">a1.sources.r1.kafka.consumer.group.id = flume</span><br><span class="line">a1.sources.r1.batchSize = 100</span><br><span class="line">a1.sources.r1.useFlumeEventFormat = false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Channel</span> </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bind</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><strong>4. KafkaChannel -&gt; xxxSink</strong></p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662045060028.png" alt="1662045060028"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">kafkachannel-flume-logger.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Named</span></span><br><span class="line">a1.channels = c1 </span><br><span class="line">a1.sinks = k1 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Source</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Channel</span> </span><br><span class="line">a1.channels.c1.type = org.apache.flume.channel.kafka.KafkaChannel</span><br><span class="line">a1.channels.c1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092</span><br><span class="line">a1.channels.c1.kafka.topic = first </span><br><span class="line">a1.channels.c1.kafka.consumer.group.id = flume</span><br><span class="line">a1.channels.c1.kafka.consumer.auto.offset.reset = latest</span><br><span class="line">a1.channels.c1.parseAsFlumeEvent = false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bind</span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p><strong>5.xxxSource -&gt; KafkaChannel</strong> </p><p><img src="/2022/09/01/Kafka/kafka%E6%A6%82%E8%BF%B0/1662045206789.png" alt="1662045206789"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Named</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 6666 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Channel</span> </span><br><span class="line">a1.channels.c1.type = org.apache.flume.channel.kafka.KafkaChannel</span><br><span class="line">a1.channels.c1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092</span><br><span class="line">a1.channels.c1.kafka.topic = first </span><br><span class="line">a1.channels.c1.parseAsFlumeEvent = false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sink</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bind</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LEO </tag>
            
            <tag> HW </tag>
            
            <tag> offset </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> 分区策略 </tag>
            
            <tag> 粘性分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flume面试题总结</title>
      <link href="/2022/08/31/Flume/flume%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/08/31/Flume/flume%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-你是如何实现Flume数据传输的监控的"><a href="#1-你是如何实现Flume数据传输的监控的" class="headerlink" title="1.你是如何实现Flume数据传输的监控的"></a>1.你是如何实现Flume数据传输的监控的</h2><p>​使用第三方框架Ganglia实时监控Flume。</p><h2 id="2-Flume的Source，Sink，Channel的作用？你们Source是什么类型？"><a href="#2-Flume的Source，Sink，Channel的作用？你们Source是什么类型？" class="headerlink" title="2. Flume的Source，Sink，Channel的作用？你们Source是什么类型？"></a>2. Flume的Source，Sink，Channel的作用？你们Source是什么类型？</h2><p><strong>1）作用</strong></p><p>（1）Source组件是专门用来收集数据的，可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy</p><p>（2）Channel组件对采集到的数据进行缓存，可以存放在Memory或File中。</p><p>（3）Sink组件是用于把数据发送到目的地的组件，目的地包括Hdfs、Logger、avro、thrift、ipc、file、Hbase、solr、自定义。</p><p><strong>2）我公司采用的Source类型为：</strong></p><p>（1）监控后台日志：exec</p><p>（2）监控后台产生日志的端口：netcat</p><h2 id="3-Flume的Channel-Selectors"><a href="#3-Flume的Channel-Selectors" class="headerlink" title="3. Flume的Channel Selectors"></a>3. Flume的Channel Selectors</h2><p><img src="/2022/08/31/Flume/flume%E9%9D%A2%E8%AF%95%E9%A2%98/1661961515838.png" alt="1661961515838"></p><h2 id="4-Flume参数调优"><a href="#4-Flume参数调优" class="headerlink" title="4. Flume参数调优"></a>4. Flume参数调优</h2><p><strong>1）Source</strong></p><p>​增加Source个（使用Tair Dir Source时可增加FileGroups个数）可以增大Source的读取数据的能力。例如：当某一个目录产生的文件过多时需要将这个文件目录拆分成多个文件目录，同时配置好多个Source 以保证Source有足够的能力获取到新产生的数据。</p><p>​batchSize参数决定Source一次批量运输到Channel的event条数，适当调大这个参数可以提高Source搬运Event到Channel时的性能。</p><p><strong>2）Channel</strong> </p><p>​type 选择memory时Channel的性能最好，但是如果Flume进程意外挂掉可能会丢失数据。type选择file时Channel的容错性更好，但是性能上会比memory channel差。</p><p>​使用file Channel时dataDirs配置多个不同盘下的目录可以提高性能。</p><p>​Capacity 参数决定Channel可容纳最大的event条数。transactionCapacity 参数决定每次Source往channel里面写的最大event条数和每次Sink从channel里面读的最大event条数。<strong>transactionCapacity需要大于Source和Sink的batchSize参数。</strong></p><p><strong>3）Sink</strong> </p><p>​增加Sink的个数可以增加Sink消费event的能力。Sink也不是越多越好够用就行，过多的Sink会占用系统资源，造成系统资源不必要的浪费。</p><p>​batchSize参数决定Sink一次批量从Channel读取的event条数，适当调大这个参数可以提高Sink从Channel搬出event的性能。</p><h2 id="5-Flume的事务机制"><a href="#5-Flume的事务机制" class="headerlink" title="5. Flume的事务机制"></a>5. Flume的事务机制</h2><p>​Flume的事务机制（类似数据库的事务机制）：Flume使用两个独立的事务分别负责从Soucrce到Channel，以及从Channel到Sink的事件传递。比如spooling directory source 为文件的每一行创建一个事件，一旦事务中所有的事件全部传递到Channel且提交成功，那么Soucrce就将该文件标记为完成。同理，事务以类似的方式处理从Channel到Sink的传递过程，如果因为某种原因使得事件无法记录，那么事务将会回滚。且所有的事件都会保持到Channel中，等待重新传递。</p><h2 id="6-Flume采集数据会丢失吗"><a href="#6-Flume采集数据会丢失吗" class="headerlink" title="6. Flume采集数据会丢失吗?"></a>6. Flume采集数据会丢失吗?</h2><p>​根据Flume的架构原理，Flume是不可能丢失数据的，其内部有完善的事务机制，Source到Channel是事务性的，Channel到Sink是事务性的，因此这两个环节不会出现数据的丢失，唯一可能丢失数据的情况是Channel采用memoryChannel，agent宕机导致数据丢失，或者Channel存储数据已满，导致Source不再写入，未写入的数据丢失。</p><p>​Flume不会丢失数据，但是有可能造成数据的重复，例如数据已经成功由Sink发出，但是没有接收到响应，Sink会再次发送数据，此时可能会导致数据的重复。</p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flume参数调优 </tag>
            
            <tag> 丢失数据 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flume概述</title>
      <link href="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Flume概述"><a href="#1-Flume概述" class="headerlink" title="1.Flume概述"></a>1.Flume概述</h2><h3 id="1-1-Flume的定义"><a href="#1-1-Flume的定义" class="headerlink" title="1.1 Flume的定义"></a>1.1 Flume的定义</h3><p>​Flume是Cloudera提供的一个高可用的、高可靠的、分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。</p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661944866185.png" alt="1661944866185"></p><p>Flume最主要的作用就是，实时读取服务器本地资源的数据，然后把本地数据写入到HDFS中。</p><h3 id="1-2-Flume基础架构"><a href="#1-2-Flume基础架构" class="headerlink" title="1.2 Flume基础架构"></a>1.2 Flume基础架构</h3><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661944962011.png" alt="1661944962011"></p><p><strong>Agent</strong></p><p>​Agent是一个JVM进程，它以事件的形式将数据从源头送至目的。</p><p>​Agent主要有3个部分组成，Source、Channel、Sink。</p><p><strong>Source</strong></p><p>​Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、taildir 、sequence generator、syslog、http、legacy。</p><p><strong>Sink</strong></p><p>​Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</p><p>​Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、HBase、solr、自定义。</p><p><strong>Channel</strong></p><p>​Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</p><p>​Flume自带两种Channel：Memory Channel和File Channel。</p><p>​Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。</p><p>​File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</p><p><strong>Event</strong></p><p>​传输单元，Flume数据传输的基本单元，以Event的形式将数据从源头送至目的地。Event由<strong>Header</strong>和<strong>Body</strong>两部分组成，Header用来存放该event的一些属性，为K-V结构，Body用来存放该条数据，形式为字节数组。</p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661945150542.png" alt="1661945150542"></p><h2 id="2-Flume入门案例"><a href="#2-Flume入门案例" class="headerlink" title="2.Flume入门案例"></a>2.Flume入门案例</h2><h3 id="2-1-监控端口数据官方案例"><a href="#2-1-监控端口数据官方案例" class="headerlink" title="2.1 监控端口数据官方案例"></a>2.1 监控端口数据官方案例</h3><p><strong>需求：</strong></p><p>​使用Flume监听一个端口，收集该端口数据，并打印到控制台。</p><p><strong>需求分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661945291534.png" alt="1661945291534"></p><ol><li>通过netcat工具向本主机的某一个端口发送数据</li><li>Flume监控本机的该端口，通过Flume的source端来读取数据</li><li>Flume把获取的数据通过Sink端写出到控制台</li></ol><p><strong>实现步骤：</strong></p><p>​创建Flume Agent配置文件 flume-netcat-logger.conf（名字可以随便取，但是一般按照sink、channel、source的类型来命名，比较好辨认）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">添加内容如下：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent   a1表示agent的名称</span></span><br><span class="line">a1.sources = r1      r1：表示a1的Source的名称</span><br><span class="line">a1.sinks = k1        k1：表示a1的Sink的名称</span><br><span class="line">a1.channels = c1     c1：表示a1的Channel的名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = netcat          表示source的类型</span><br><span class="line">a1.sources.r1.bind = localhost       表示source监听的主机</span><br><span class="line">a1.sources.r1.port = 44444           表示source监听的端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger             表示sink的类型</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory               表示channel的类型</span><br><span class="line">a1.channels.c1.capacity = 1000             表示channel的总容量式1000个event</span><br><span class="line">a1.channels.c1.transactionCapacity = 100   表示channel传输的时候每收集到100个event再去提交事务</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1                表示把r1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1                   表示把k1和c1连接起来</span><br></pre></td></tr></table></figure><p><strong>开启flume监听端口</strong></p><p>第一种写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent -c conf/ -n a1 -f job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>​       –conf&#x2F;-c：表示配置文件存储在conf&#x2F;目录</p><p>​       –name&#x2F;-n：表示给agent起名为a1</p><p>​       –conf-file&#x2F;-f：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。</p><p>​       -Dflume.root.logger&#x3D;INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。console代表的意思式打印到控制台</p><p><strong>使用netcat工具向本机的4444端口发送内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 ~]$ nc localhost 44444</span><br><span class="line">hello </span><br><span class="line">atguigu</span><br></pre></td></tr></table></figure><h3 id="2-2-实施监控单个追加文件"><a href="#2-2-实施监控单个追加文件" class="headerlink" title="2.2 实施监控单个追加文件"></a>2.2 实施监控单个追加文件</h3><p><strong>案例需求：</strong></p><p>​实时监控Hive日志，并上传到HDFS中</p><p><strong>需求分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661946573036.png" alt="1661946573036"></p><p><strong>实现步骤：</strong></p><p>编写flume配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a2.sources.r2.type = exec</span><br><span class="line">a2.sources.r2.command = tail -F /opt/module/hive/logs/hive.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.hdfs.path = hdfs://hadoop102:8020/flume/%Y%m%d/%H</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传文件的前缀</span></span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = logs-</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否按照时间滚动文件夹</span></span><br><span class="line">a2.sinks.k2.hdfs.round = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多少时间单位创建一个新的文件夹</span></span><br><span class="line">a2.sinks.k2.hdfs.roundValue = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新定义时间单位</span></span><br><span class="line">a2.sinks.k2.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否使用本地时间戳</span></span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a2.sinks.k2.hdfs.batchSize = 100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置文件类型，可支持压缩</span></span><br><span class="line">a2.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多久生成一个新的文件</span></span><br><span class="line">a2.sinks.k2.hdfs.rollInterval = 60</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置每个文件的滚动大小</span></span><br><span class="line">a2.sinks.k2.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件的滚动与Event数量无关</span></span><br><span class="line">a2.sinks.k2.hdfs.rollCount = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 1000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><p>​对于所有与时间相关的转义序列，Event Header中必须存在以 “timestamp”的key（除非hdfs.useLocalTimeStamp设置为true，此方法会使用TimestampInterceptor自动添加timestamp）。</p><p>​a3.sinks.k3.hdfs.useLocalTimeStamp &#x3D; true</p><p><strong>运行flume:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a2 --conf-file job/flume-file-hdfs.conf</span><br></pre></td></tr></table></figure><h3 id="2-3-实时监控目录下多个新文件"><a href="#2-3-实时监控目录下多个新文件" class="headerlink" title="2.3 实时监控目录下多个新文件"></a>2.3 实时监控目录下多个新文件</h3><p><strong>案例需求：</strong></p><p>​使用Flume监听整个目录的文件，并且上传到HDFS</p><p><strong>需求分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661951520500.png" alt="1661951520500"></p><p><strong>实现步骤：</strong></p><p>编写配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a3.sources.r3.type = spooldir</span><br><span class="line">a3.sources.r3.spoolDir = /opt/module/flume/upload</span><br><span class="line">a3.sources.r3.fileSuffix = .COMPLETED</span><br><span class="line">a3.sources.r3.fileHeader = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">忽略所有以.tmp结尾的文件，不上传</span></span><br><span class="line">a3.sources.r3.ignorePattern = ([^ ]*\.tmp)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a3.sinks.k3.type = hdfs</span><br><span class="line">a3.sinks.k3.hdfs.path = hdfs://hadoop102:8020/flume/upload/%Y%m%d/%H</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传文件的前缀</span></span><br><span class="line">a3.sinks.k3.hdfs.filePrefix = upload-</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否按照时间滚动文件夹</span></span><br><span class="line">a3.sinks.k3.hdfs.round = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多少时间单位创建一个新的文件夹</span></span><br><span class="line">a3.sinks.k3.hdfs.roundValue = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新定义时间单位</span></span><br><span class="line">a3.sinks.k3.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否使用本地时间戳</span></span><br><span class="line">a3.sinks.k3.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a3.sinks.k3.hdfs.batchSize = 100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置文件类型，可支持压缩</span></span><br><span class="line">a3.sinks.k3.hdfs.fileType = DataStream</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多久生成一个新的文件</span></span><br><span class="line">a3.sinks.k3.hdfs.rollInterval = 60</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置每个文件的滚动大小大概是128M</span></span><br><span class="line">a3.sinks.k3.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件的滚动与Event数量无关</span></span><br><span class="line">a3.sinks.k3.hdfs.rollCount = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 1000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a3.sources.r3.channels = c3</span><br><span class="line">a3.sinks.k3.channel = c3</span><br></pre></td></tr></table></figure><h3 id="2-4-实时监控目录下的多个追加文件"><a href="#2-4-实时监控目录下的多个追加文件" class="headerlink" title="2.4 实时监控目录下的多个追加文件"></a>2.4 实时监控目录下的多个追加文件</h3><p>​Exec source适用于监控一个实时追加的文件，不能实现断点续传；Spooldir Source适合用于同步新文件，但不适合对实时追加日志的文件进行监听并同步；而Taildir Source适合用于监听多个实时追加的文件，并且能够实现断点续传。</p><p><strong>案例需求：</strong></p><p>​使用Flume监听整个目录的实时追加文件，并上传至HDFS</p><p><strong>案例分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661951688179.png" alt="1661951688179"></p><p><strong>案例实操：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a3.sources.r3.type = TAILDIR</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定position文件的位置</span></span><br><span class="line">a3.sources.r3.positionFile = /opt/module/flume/tail_dir.json</span><br><span class="line">a3.sources.r3.filegroups = f1 f2</span><br><span class="line">a3.sources.r3.filegroups.f1 = /opt/module/flume/files/.*file.*</span><br><span class="line">a3.sources.r3.filegroups.f2 = /opt/module/flume/files2/.*log.*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a3.sinks.k3.type = hdfs</span><br><span class="line">a3.sinks.k3.hdfs.path = hdfs://hadoop102:8020/flume/upload2/%Y%m%d/%H</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传文件的前缀</span></span><br><span class="line">a3.sinks.k3.hdfs.filePrefix = upload-</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否按照时间滚动文件夹</span></span><br><span class="line">a3.sinks.k3.hdfs.round = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多少时间单位创建一个新的文件夹</span></span><br><span class="line">a3.sinks.k3.hdfs.roundValue = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新定义时间单位</span></span><br><span class="line">a3.sinks.k3.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否使用本地时间戳</span></span><br><span class="line">a3.sinks.k3.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a3.sinks.k3.hdfs.batchSize = 100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置文件类型，可支持压缩</span></span><br><span class="line">a3.sinks.k3.hdfs.fileType = DataStream</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多久生成一个新的文件</span></span><br><span class="line">a3.sinks.k3.hdfs.rollInterval = 60</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置每个文件的滚动大小大概是128M</span></span><br><span class="line">a3.sinks.k3.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件的滚动与Event数量无关</span></span><br><span class="line">a3.sinks.k3.hdfs.rollCount = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 1000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a3.sources.r3.channels = c3</span><br><span class="line">a3.sinks.k3.channel = c3</span><br></pre></td></tr></table></figure><h2 id="3-Flume事务"><a href="#3-Flume事务" class="headerlink" title="3. Flume事务"></a>3. Flume事务</h2><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661951909426.png" alt="1661951909426"></p><p><strong>Flume共包括了两个事务，一个是put，一个是take</strong></p><p><strong>put事务：</strong></p><p>首先把batch data写入临时缓冲区putList，然后检查channel内存队列是否足够合并，如果足够就写入channel，如果内存不足，就回滚数据</p><p><strong>take事务：</strong></p><p>把数据取到缓冲区takeList，并且把数据发送到HDFS，如果数据全部发送成功，清楚临时缓冲区takelist，数据发送过程中如果出现异常，就会把临时缓冲区中的数据归还给channel队列中去。</p><p>这样可能导致写入HDFS中的数据有重复值（重复的event）</p><h2 id="4-Flume-Agent内部原理"><a href="#4-Flume-Agent内部原理" class="headerlink" title="4. Flume Agent内部原理"></a>4. Flume Agent内部原理</h2><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661952301153.png" alt="1661952301153"></p><p><strong>重要组件：</strong></p><p><strong>ChannelSelector</strong></p><p>​ChannelSelector的作用就是选出Event将要被发往哪个Channel。其共有两种类型，分别是Replicating（复制）和Multiplexing（多路复用）。</p><p>​ReplicatingSelector会将同一个Event发往所有的Channel，Multiplexing会根据相应的原则，将不同的Event发往不同的Channel。</p><p><strong>SinkProcessor</strong></p><p>​SinkProcessor共有三种类型，分别是DefaultSinkProcessor、LoadBalancingSinkProcessor和FailoverSinkProcessor</p><p>​DefaultSinkProcessor对应的是单个的Sink，LoadBalancingSinkProcessor和FailoverSinkProcessor对应的是Sink Group，LoadBalancingSinkProcessor可以实现负载均衡的功能，FailoverSinkProcessor可以错误恢复的功能。</p><p><strong>Interceptor</strong></p><p>拦截器，可以筛选过滤event，这个需要使用java来边写一个class，然后放到flume中，后续会将实现方法。</p><h2 id="5-Flume-拓扑结构"><a href="#5-Flume-拓扑结构" class="headerlink" title="5. Flume 拓扑结构"></a>5. Flume 拓扑结构</h2><h3 id="5-1-简单串联"><a href="#5-1-简单串联" class="headerlink" title="5.1 简单串联"></a>5.1 简单串联</h3><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661958560365.png" alt="1661958560365"></p><p>​这种模式是将多个flume顺序连接起来了，从最初的source开始到最终sink传送的目的存储系统。此模式不建议桥接过多的flume数量， flume数量过多不仅会影响传输速率，而且一旦传输过程中某个节点flume宕机，会影响整个传输系统。</p><h3 id="5-2-复制和多路复用"><a href="#5-2-复制和多路复用" class="headerlink" title="5.2 复制和多路复用"></a>5.2 复制和多路复用</h3><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661958581790.png" alt="1661958581790"></p><p>​Flume支持将事件流向一个或者多个目的地。这种模式可以将相同数据复制到多个channel中，或者将不同数据分发到不同的channel中，sink可以选择传送到不同的目的地。</p><p><strong>需求：</strong></p><p>​使用Flume-1监控文件变动，Flume-1将变动内容传递给Flume-2，Flume-2负责存储到HDFS。同时Flume-1将变动内容传递给Flume-3，Flume-3负责输出到Local FileSystem。</p><p><strong>需求分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661958843201.png" alt="1661958843201"></p><p><strong>实际操作：</strong></p><p>这里需要写三个flume配置文件</p><p>第一个flume，用于采集数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将数据流复制给所有channel</span></span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /opt/module/hive/logs/hive.log</span><br><span class="line">a1.sources.r1.shell = /bin/bash -c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sink端的avro是一个数据发送者</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop102 </span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop102</span><br><span class="line">a1.sinks.k2.port = 4142</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><p>把采集来的数据写到HDFS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.sinks = k1</span><br><span class="line">a2.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span>端的avro是一个数据接收服务</span></span><br><span class="line">a2.sources.r1.type = avro</span><br><span class="line">a2.sources.r1.bind = hadoop102</span><br><span class="line">a2.sources.r1.port = 4141</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a2.sinks.k1.type = hdfs</span><br><span class="line">a2.sinks.k1.hdfs.path = hdfs://hadoop102:8020/flume2/%Y%m%d/%H</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传文件的前缀</span></span><br><span class="line">a2.sinks.k1.hdfs.filePrefix = flume2-</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否按照时间滚动文件夹</span></span><br><span class="line">a2.sinks.k1.hdfs.round = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多少时间单位创建一个新的文件夹</span></span><br><span class="line">a2.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新定义时间单位</span></span><br><span class="line">a2.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">是否使用本地时间戳</span></span><br><span class="line">a2.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a2.sinks.k1.hdfs.batchSize = 100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置文件类型，可支持压缩</span></span><br><span class="line">a2.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多久生成一个新的文件</span></span><br><span class="line">a2.sinks.k1.hdfs.rollInterval = 600</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置每个文件的滚动大小大概是128M</span></span><br><span class="line">a2.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件的滚动与Event数量无关</span></span><br><span class="line">a2.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>采集来的数据写到local</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.sinks = k1</span><br><span class="line">a3.channels = c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line">a3.sources.r1.bind = hadoop102</span><br><span class="line">a3.sources.r1.port = 4142</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a3.sinks.k1.type = file_roll</span><br><span class="line">a3.sinks.k1.sink.directory = /opt/module/data/flume3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a3.channels.c2.type = memory</span><br><span class="line">a3.channels.c2.capacity = 1000</span><br><span class="line">a3.channels.c2.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a3.sources.r1.channels = c2</span><br><span class="line">a3.sinks.k1.channel = c2</span><br></pre></td></tr></table></figure><p><strong>启动flume进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a3 --conf-file job/group1/flume-flume-dir.conf</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a2 --conf-file job/group1/flume-flume-hdfs.conf</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a1 --conf-file job/group1/flume-file-flume.conf</span><br></pre></td></tr></table></figure><h3 id="5-3-负载均衡和故障转移"><a href="#5-3-负载均衡和故障转移" class="headerlink" title="5.3 负载均衡和故障转移"></a>5.3 负载均衡和故障转移</h3><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661958717935.png" alt="1661958717935"></p><p>​Flume支持使用将多个sink逻辑上分到一个sink组，sink组配合不同的SinkProcessor可以实现负载均衡和错误恢复的功能。</p><p><strong>案例需求：</strong></p><p>​使用Flume1监控一个端口，其sink组中的sink分别对接Flume2和Flume3，采用FailoverSinkProcessor，实现故障转移的功能。</p><p><strong>需求分析：</strong></p><p>​<img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661959589858.png" alt="1661959589858"></p><p><strong>代码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 10</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 10000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop102</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop102</span><br><span class="line">a1.sinks.k2.port = 4142</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.sinks = k1</span><br><span class="line">a2.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a2.sources.r1.type = avro</span><br><span class="line">a2.sources.r1.bind = hadoop102</span><br><span class="line">a2.sources.r1.port = 4141</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a2.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.sinks = k1</span><br><span class="line">a3.channels = c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line">a3.sources.r1.bind = hadoop102</span><br><span class="line">a3.sources.r1.port = 4142</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a3.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a3.channels.c2.type = memory</span><br><span class="line">a3.channels.c2.capacity = 1000</span><br><span class="line">a3.channels.c2.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a3.sources.r1.channels = c2</span><br><span class="line">a3.sinks.k1.channel = c2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这个故障转移，其实就是设置了多个接收的flume机器，当其中一个坏掉之后，另一个就会代替其工作接着运行（初始的时候会根据权值，来判断哪一个机器正常运行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a3 --conf-file job/group2/flume-flume-console2.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a2 --conf-file job/group2/flume-flume-console1.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name a1 --conf-file job/group2/flume-netcat-flume.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-聚合"><a href="#5-4-聚合" class="headerlink" title="5.4 聚合"></a>5.4 聚合</h3><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661958765075.png" alt="1661958765075"></p><p>​这种模式是我们最常见的，也非常实用，日常web应用通常分布在上百个服务器，大者甚至上千个、上万个服务器。产生的日志，处理起来也非常麻烦。用flume的这种组合方式能很好的解决这一问题，每台服务器部署一个flume采集日志，传送到一个集中收集日志的flume，再由此flume上传到hdfs、hive、hbase等，进行日志分析。</p><p><strong>案例需求：</strong></p><p>​hadoop102上的Flume-1监控文件&#x2F;opt&#x2F;module&#x2F;group.log，</p><p>​hadoop103上的Flume-2监控某一个端口的数据流，</p><p>​Flume-1与Flume-2将数据发送给hadoop104上的Flume-3，Flume-3将最终数据打印到控制台。</p><p><strong>需求分析：</strong></p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661959950484.png" alt="1661959950484"></p><p><strong>代码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /opt/module/group.log</span><br><span class="line">a1.sources.r1.shell = /bin/bash -c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop104</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a2.sources = r1</span><br><span class="line">a2.sinks = k1</span><br><span class="line">a2.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a2.sources.r1.type = netcat</span><br><span class="line">a2.sources.r1.bind = hadoop103</span><br><span class="line">a2.sources.r1.port = 44444</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a2.sinks.k1.type = avro</span><br><span class="line">a2.sinks.k1.hostname = hadoop104</span><br><span class="line">a2.sinks.k1.port = 4141</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a2.channels.c1.type = memory</span><br><span class="line">a2.channels.c1.capacity = 1000</span><br><span class="line">a2.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a2.sources.r1.channels = c1</span><br><span class="line">a2.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a3.sources = r1</span><br><span class="line">a3.sinks = k1</span><br><span class="line">a3.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a3.sources.r1.type = avro</span><br><span class="line">a3.sources.r1.bind = hadoop104</span><br><span class="line">a3.sources.r1.port = 4141</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a3.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the channel</span></span><br><span class="line">a3.channels.c1.type = memory</span><br><span class="line">a3.channels.c1.capacity = 1000</span><br><span class="line">a3.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a3.sources.r1.channels = c1</span><br><span class="line">a3.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-自定义Interceptor"><a href="#6-自定义Interceptor" class="headerlink" title="6. 自定义Interceptor"></a>6. 自定义Interceptor</h2><p><strong>案例需求：</strong></p><p>​使用Flume采集服务器本地日志，需要按照日志类型的不同，将不同种类的日志发往不同的分析系统。</p><p><strong>需求分析：</strong></p><p>​在实际的开发中，一台服务器产生的日志类型可能有很多种，不同类型的日志可能需要发送到不同的分析系统。此时会用到Flume拓扑结构中的Multiplexing结构，Multiplexing的原理是，根据event中Header的某个key的值，将不同的event发送到不同的Channel中，所以我们需要自定义一个Interceptor，为不同类型的event的Header中的key赋予不同的值。</p><p>​在该案例中，我们以端口数据模拟日志，以数字（单个）和字母（单个）模拟不同类型的日志，我们需要自定义interceptor区分数字和字母，将其分别发往不同的分析系统（Channel）。</p><p><img src="/2022/08/31/Flume/flume%E6%A6%82%E8%BF%B0/1661960819628.png" alt="1661960819628"></p><p><strong>代码实现：</strong></p><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flume&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flume-ng-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.flume.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Event <span class="title function_">intercept</span><span class="params">(Event event)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] body = event.getBody();</span><br><span class="line">        <span class="keyword">if</span> (body[<span class="number">0</span>] &lt; <span class="string">&#x27;z&#x27;</span> &amp;&amp; body[<span class="number">0</span>] &gt; <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">            event.getHeaders().put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;letter&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (body[<span class="number">0</span>] &gt; <span class="string">&#x27;0&#x27;</span> &amp;&amp; body[<span class="number">0</span>] &lt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            event.getHeaders().put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Event&gt; <span class="title function_">intercept</span><span class="params">(List&lt;Event&gt; events)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Event event : events) &#123;</span><br><span class="line">            intercept(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>.Builder &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Interceptor <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomInterceptor</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置flume文件</strong></p><p>​为hadoop102上的Flume1配置1个netcat source，1个sink group（2个avro sink），并配置相应的ChannelSelector和interceptor。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = com.atguigu.flume.interceptor.CustomInterceptor$Builder</span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line">a1.sources.r1.selector.header = type</span><br><span class="line">a1.sources.r1.selector.mapping.letter = c1</span><br><span class="line">a1.sources.r1.selector.mapping.number = c2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop103</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type=avro</span><br><span class="line">a1.sinks.k2.hostname = hadoop104</span><br><span class="line">a1.sinks.k2.port = 4242</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure><p>​为hadoop103上的Flume4配置一个avro source和一个logger sink。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = hadoop103</span><br><span class="line">a1.sources.r1.port = 4141</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​为hadoop104上的Flume3配置一个avro source和一个logger sink。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = hadoop104</span><br><span class="line">a1.sources.r1.port = 4242</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：source的Multiplexing需要结合拦截器来使用，需要拦截器给每个event来增加头部值，把头部不同的值分发到不同的channel中去。</p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sink </tag>
            
            <tag> Interceptor </tag>
            
            <tag> Source </tag>
            
            <tag> Channel </tag>
            
            <tag> event </tag>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive概念介绍</title>
      <link href="/2022/08/30/Hive/hive%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/30/Hive/hive%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Hive的几种启动方式"><a href="#1-Hive的几种启动方式" class="headerlink" title="1. Hive的几种启动方式"></a>1. Hive的几种启动方式</h2><h3 id="1-1-命令行模式"><a href="#1-1-命令行模式" class="headerlink" title="1.1 命令行模式"></a>1.1 命令行模式</h3><p>先启动hadoop集群之后，然后就可以直接在命令行启动Hive</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/hive</span><br></pre></td></tr></table></figure><h3 id="1-2-使用元数据服务的方式访问Hive"><a href="#1-2-使用元数据服务的方式访问Hive" class="headerlink" title="1.2 使用元数据服务的方式访问Hive"></a>1.2 使用元数据服务的方式访问Hive</h3><p><strong>1）在hive-site.xml文件中添加如下配置信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定存储元数据要连接的地址 --&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">     &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;thrift://hadoop102:9083&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure><p><strong>2）启动metastore</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop202 hive]$ hive --service metastore</span><br><span class="line">2020-04-24 16:58:08: Starting Hive Metastore Server</span><br></pre></td></tr></table></figure><p>注意: 启动后窗口不能再操作，需打开一个新的shell窗口做别的操作</p><p><strong>3）启动hive</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop202 hive]$ bin/hive</span><br></pre></td></tr></table></figure><p><strong>好奇一个问题：我们为什么要配置这个metastore服务？</strong></p><p>首先，什么是元数据：<a href="https://so.csdn.net/so/search?q=%E5%85%83%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">元数据</a>包含用Hive创建的database、table等的元信息。元数据存储在关系型数据库中。如Derby、MySQL等。</p><p>那么，配置的metastore有什么用：<strong>客户端连接metastore服务，metastore再去连接MySQL数据库来存取元数据。有了metastore服务，就可以有多个客户端同时连接，而且这些客户端不需要知道MySQL数据库的用户名和密码，只需要连接metastore 服务即可。</strong></p><h3 id="1-3-使用JDBC方式来访问Hive"><a href="#1-3-使用JDBC方式来访问Hive" class="headerlink" title="1.3 使用JDBC方式来访问Hive"></a>1.3 使用JDBC方式来访问Hive</h3><ol><li><strong>在hive-site.xml文件中添加如下配置信息</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定hiveserver2连接的host --&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">     &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;hadoop102&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 指定hiveserver2连接的端口号 --&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">     &lt;name&gt;hive.server2.thrift.port&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;10000&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动hiveserver2</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/hive --service hiveserver2</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>启动beeline客户端</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/beeline -u jdbc:hive2://hadoop102:10000 -n atguigu</span><br></pre></td></tr></table></figure><h3 id="1-4-hiveserver2和metastore的联系"><a href="#1-4-hiveserver2和metastore的联系" class="headerlink" title="1.4 hiveserver2和metastore的联系"></a>1.4 hiveserver2和metastore的联系</h3><p>hiveServer2和metaStore其实都是hive本身带的组件，那么两者究竟有什么不同呢？</p><ol><li><p>metaStore：hive的metaStore提供的是一个服务，而这个服务就是将hive的元数据暴露出去，而不是需要通过对hive元数据库mysql的访问才能拿到hive的元数据信息;metastore服务实际上就是一种thrift服务，通过它我们可以获取到hive原数据，并且通过thrift获取原数据的方式，屏蔽了数据库访问需要驱动，url，用户名，密码等等细节</p></li><li><p>hiveServer2: HiveServer2（HS2）是一个服务端接口，使远程客户端可以执行对Hive的查询并返回结果。目前基于Thrift RPC的实现是HiveServer的改进版本，并支持多客户端并发和身份验证, 启动hiveServer2服务后，就可以使用jdbc，odbc，或者thrift的方式连接</p></li></ol><p><strong>总结：</strong></p><ol><li>HiveServer2和MetaStore本质上都是Thrift Service，虽然可以启动在同一个进程内，但不建议这么做。建议是拆成不同的服务进程来启动。</li><li>一般来讲，我们认为HiveServer2是用来提交查询的，也就是用来访问数据的。而MetaStore才是用来访问元数据的。<strong>在我的认知下，其实就是metaStore用来访问元数据，而hiveserver只是在metaStore的上层又添加了一层功能（用来让用户可以使用jdbc等方式连接）</strong></li></ol><h3 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h3><p>1）hive有2种客户端：hive客户端和beeline客户端，beeline客户端是通过hiveserver2服务以JDBC的方式连接hive客户端。<br>2）hive作为服务端有2个后台服务：metastore服务，hiveserver2服务。<br>3）hive连接元数据有2种方式：直接连接和metastore服务连接。<br>4）如果配置了hive.metastore.uris参数，必须启动metastore服务才能连接元数据；如果没有配置可以直接连接元数据。<br>5）hive本身既是客户端，又是服务端。</p><h2 id="2-Hive的数据类型"><a href="#2-Hive的数据类型" class="headerlink" title="2.Hive的数据类型"></a>2.Hive的数据类型</h2><h3 id="2-1Hive的基本数据类型"><a href="#2-1Hive的基本数据类型" class="headerlink" title="2.1Hive的基本数据类型"></a>2.1Hive的基本数据类型</h3><table><thead><tr><th>Hive数据类型</th><th>Java数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td>TINYINT</td><td>byte</td><td>1byte有符号整数</td><td>20</td></tr><tr><td>SMALINT</td><td>short</td><td>2byte有符号整数</td><td>20</td></tr><tr><td>INT</td><td>int</td><td>4byte有符号整数</td><td>20</td></tr><tr><td>BIGINT</td><td>long</td><td>8byte有符号整数</td><td>20</td></tr><tr><td>BOOLEAN</td><td>boolean</td><td>布尔类型，true或者false</td><td>TRUE  FALSE</td></tr><tr><td>FLOAT</td><td>float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td>DOUBLE</td><td>double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td>STRING</td><td>string</td><td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td><td>‘now is the time’   “for all good men”</td></tr><tr><td>TIMESTAMP</td><td></td><td>时间类型</td><td></td></tr><tr><td>BINARY</td><td></td><td>字节数组</td><td></td></tr></tbody></table><p>​其中的string相当于数据库中的varchar类型，改类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。</p><h3 id="2-2-集合数据类型"><a href="#2-2-集合数据类型" class="headerlink" title="2.2 集合数据类型"></a>2.2 集合数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last   STRING},那么第1个元素可以通过字段.first来引用。</td><td>struct()   例如struct&lt;street:string, city:string&gt;</td></tr><tr><td>MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td>map()   例如map&lt;string, int&gt;</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td>Array()   例如array<string></td></tr></tbody></table><p>​Hive有三种复杂数据类型ARRAY、MAP 和STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><p><strong>实例展示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;songsong&quot;,</span><br><span class="line">    &quot;friends&quot;: [&quot;bingbing&quot; , &quot;lili&quot;] ,       //列表Array, </span><br><span class="line">    &quot;children&quot;: &#123;                      //键值Map,</span><br><span class="line">        &quot;xiao song&quot;: 19 ,</span><br><span class="line">        &quot;xiaoxiao song&quot;: 18</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;address&quot;: &#123;                      //结构Struct,</span><br><span class="line">        &quot;street&quot;: &quot;hui long guan&quot; ,</span><br><span class="line">        &quot;city&quot;: &quot;beijing&quot; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Hive创建表格"><a href="#3-Hive创建表格" class="headerlink" title="3.Hive创建表格"></a>3.Hive创建表格</h2><p>建表语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name </span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)] </span><br><span class="line">[COMMENT table_comment] </span><br><span class="line">[PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] </span><br><span class="line">[CLUSTERED BY (col_name, col_name, ...) </span><br><span class="line">[SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] </span><br><span class="line">[ROW FORMAT row_format] </span><br><span class="line">[STORED AS file_format] </span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="line">[AS select_statement]</span><br></pre></td></tr></table></figure><p>（1）CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</p><p>（2）EXTERNAL关键字可以让用户创建一个外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</p><p>（3）COMMENT：为表和列添加注释。</p><p>（4）PARTITIONED BY创建分区表</p><p>（5）CLUSTERED BY创建分桶表</p><p>（6）SORTED BY不常用，对桶中的一个或多个列另外排序</p><p>（7）ROW FORMAT </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]</span><br><span class="line">        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] </span><br><span class="line">   | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</span><br></pre></td></tr></table></figure><p>用户在建表的时候可以自定义SerDe或者使用自带的SerDe。如果没有指定ROW FORMAT 或者ROW FORMAT DELIMITED，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive通过SerDe确定表的具体的列的数据。</p><p>SerDe是Serialize&#x2F;Deserilize的简称， hive使用Serde进行行对象的序列与反序列化。</p><p>（8）STORED AS指定存储文件类型</p><p>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）</p><p>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p><p>（9）LOCATION ：指定表在HDFS上的存储位置(这样其实就是把HDFS中的结构化文件映射到表格中来)，如果在这里没有指定文件路径，那么我们还需要后续指定，或者手动添加数据（一般不常用）。</p><p>（10）AS：后跟查询语句，根据查询结果创建表。</p><p>（11）LIKE允许用户复制现有的表结构，但是不复制数据。</p><h3 id="3-1-内部表"><a href="#3-1-内部表" class="headerlink" title="3.1 内部表"></a>3.1 内部表</h3><p>​默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive会（或多或少地）控制着数据的生命周期。Hive默认情况下会将这些表的数据存储在由配置项hive.metastore.warehouse.dir(例如，&#x2F;user&#x2F;hive&#x2F;warehouse)所定义的目录的子目录下。当我们删除一个管理表时，Hive也会删除这个表中数据。管理表不适合和其他工具共享数据。</p><p>​<strong>通俗的来讲，内部表，顾名思义，Hive内部管理的表格，所以hive删除该表格的时候，数据文件也会相应的删除掉</strong></p><h3 id="3-2-外部表"><a href="#3-2-外部表" class="headerlink" title="3.2 外部表"></a>3.2 外部表</h3><p>​外部表，hive并非认为其含有这份数据，删除这个表格的时候并不会删除数据，但是描述表格信息的元数据信息会被删除掉。</p><p><strong>实例展示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table test(</span><br><span class="line">name string,</span><br><span class="line">friends array&lt;string&gt;,</span><br><span class="line">children map&lt;string, int&gt;,</span><br><span class="line">address struct&lt;street:string, city:string&gt;</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line">collection items terminated by &#x27;_&#x27;</span><br><span class="line">map keys terminated by &#x27;:&#x27;</span><br><span class="line">lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p>字段解释如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row format delimited fields terminated by &#x27;,&#x27;     表示列的分隔符是&#x27;,&#x27;</span><br><span class="line">collection items terminated by &#x27;_&#x27;                表示map和array和struct的分隔符</span><br><span class="line">map keys terminated by &#x27;:&#x27;                        表示map中key和value的分隔符</span><br><span class="line">lines terminated by &#x27;\n&#x27;;                         表示行分隔符</span><br></pre></td></tr></table></figure><h2 id="4-Hive数据导入"><a href="#4-Hive数据导入" class="headerlink" title="4.Hive数据导入"></a>4.Hive数据导入</h2><h3 id="4-1-向表中装载数据（最常用）"><a href="#4-1-向表中装载数据（最常用）" class="headerlink" title="4.1 向表中装载数据（最常用）"></a>4.1 向表中装载数据（最常用）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">hive&gt; </span><span class="language-bash">load data [<span class="built_in">local</span>] inpath <span class="string">&#x27;数据的path&#x27;</span> [overwrite] into table student [partition (partcol1=val1,…)];</span></span><br></pre></td></tr></table></figure><ol><li>local :加上该字段代表从本地加载数据到hive表格，否则从HDFS中加载数据</li><li>overwrite：加上该字段代表覆盖表中已有的数据，否则表示最佳</li><li>partition：表示上传到指定的分区（分区表的概念）</li></ol><h3 id="4-2-通过查询语句向表中插入数据"><a href="#4-2-通过查询语句向表中插入数据" class="headerlink" title="4.2 通过查询语句向表中插入数据"></a>4.2 通过查询语句向表中插入数据</h3><ol><li><strong>单张表查询结果插入</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; insert overwrite table student_par </span><br><span class="line">             select id, name from student ; </span><br></pre></td></tr></table></figure><p>insert into：以追加数据的方式插入到表或分区，原有数据不会删除</p><p>insert overwrite：会覆盖表中已存在的数据</p><p>注意：insert不支持插入部分字段</p><ol start="2"><li><strong>多分区插入模式(分区表)</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; from student</span><br><span class="line">              insert overwrite table student partition(month=&#x27;201707&#x27;)</span><br><span class="line">              select id, name where month=&#x27;201709&#x27;</span><br><span class="line">              insert overwrite table student partition(month=&#x27;201706&#x27;)</span><br><span class="line">              select id, name where month=&#x27;201709&#x27;;</span><br></pre></td></tr></table></figure><h3 id="4-3-创建表格的时候通过location指定加载的数据路径"><a href="#4-3-创建表格的时候通过location指定加载的数据路径" class="headerlink" title="4.3 创建表格的时候通过location指定加载的数据路径"></a>4.3 创建表格的时候通过location指定加载的数据路径</h3><p>​就是在建立表格的之后指定数据路径</p><h3 id="4-4-Import数据到指定Hive表格中"><a href="#4-4-Import数据到指定Hive表格中" class="headerlink" title="4.4 Import数据到指定Hive表格中"></a>4.4 Import数据到指定Hive表格中</h3><p>注意：这里需要先使用export把某个表格到处，然后才能把数据导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; import table student2  from</span><br><span class="line"> &#x27;/user/hive/warehouse/export/student&#x27;;</span><br></pre></td></tr></table></figure><h2 id="5-数据导出"><a href="#5-数据导出" class="headerlink" title="5.数据导出"></a>5.数据导出</h2><ol><li><p><strong>Insert导出</strong></p><p>导出到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; insert overwrite local directory &#x27;/opt/module/hive/datas/export/student&#x27;</span><br><span class="line">            select * from student;</span><br></pre></td></tr></table></figure><p>查询结果格式化后再保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">hive(default)&gt;</span><span class="language-bash">insert overwrite <span class="built_in">local</span> directory <span class="string">&#x27;/opt/module/hive/datas/export/student1&#x27;</span></span></span><br><span class="line">           ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27;             select * from student;</span><br></pre></td></tr></table></figure><p>查询结果保存到HDFS上（其实就是把local去掉就可以）</p></li><li><p><strong>Hadoop命令导出到本地</strong></p><p>其实就是put指令把文件下载下来</p></li><li><p><strong>Hive Shell命令导出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/hive -e &#x27;select * from default.student;&#x27; &gt;</span><br><span class="line"> /opt/module/hive/datas/export/student4.txt;</span><br></pre></td></tr></table></figure></li><li><p>Export导出到HDFS中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">(defahiveult)&gt; </span><span class="language-bash"><span class="built_in">export</span> table default.student to</span></span><br><span class="line"> &#x27;/user/hive/warehouse/export/student&#x27;;</span><br></pre></td></tr></table></figure><p><strong>export和import主要用于两个Hadoop平台集群之间Hive表迁移。</strong></p></li><li><p>Sqoop导出，后续我会再写一个专门的博客来讲述</p></li></ol><h2 id="6-分区表"><a href="#6-分区表" class="headerlink" title="6.分区表"></a>6.分区表</h2><h3 id="6-1-分区表基本操作"><a href="#6-1-分区表基本操作" class="headerlink" title="6.1 分区表基本操作"></a>6.1 分区表基本操作</h3><p>​分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过WHERE子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。</p><p>​一般来说，分区表大部分都是按照时间来划分，把每一天的数据当作一个分区</p><hr><p><strong>创建分区表语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create table dept_partition(</span><br><span class="line">deptno int, dname string, loc string</span><br><span class="line">)</span><br><span class="line">partitioned by (day string)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure><p><strong>注意：分区字段不能是表中已经存在的数据，可以将分区字段看作表的伪列。</strong></p><hr><p><strong>加载数据到分区表中：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#x27;/opt/module/hive/datas/dept_20200401.log&#x27; into table dept_partition partition(day=&#x27;20200401&#x27;);</span><br><span class="line">hive (default)&gt; load data local inpath &#x27;/opt/module/hive/datas/dept_20200402.log&#x27; into table dept_partition partition(day=&#x27;20200402&#x27;);</span><br><span class="line">hive (default)&gt; load data local inpath &#x27;/opt/module/hive/datas/dept_20200403.log&#x27; into table dept_partition partition(day=&#x27;20200403&#x27;);</span><br></pre></td></tr></table></figure><h3 id="6-2-二级分区"><a href="#6-2-二级分区" class="headerlink" title="6.2 二级分区"></a>6.2 二级分区</h3><p><strong>创建表格基本语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create table dept_partition2(</span><br><span class="line">               deptno int, dname string, loc string</span><br><span class="line">               )</span><br><span class="line">               partitioned by (day string, hour string)</span><br><span class="line">               row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure><p><strong>加载数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#x27;/opt/module`/hive/datas/dept_20200401.log&#x27; into table</span><br><span class="line">dept_partition2 partition(day=&#x27;20200401&#x27;, hour=&#x27;12&#x27;);</span><br></pre></td></tr></table></figure><h3 id="6-3-动态分区"><a href="#6-3-动态分区" class="headerlink" title="6.3 动态分区"></a>6.3 动态分区</h3><p>​关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p><p>（1）开启动态分区功能（默认true，开启）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.dynamic.partition=true</span><br></pre></td></tr></table></figure><p>（2）设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.dynamic.partition.mode=nonstrict</span><br></pre></td></tr></table></figure><p>（3）在所有执行MR的节点上，最大一共可以创建多少个动态分区。默认1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions=1000</span><br></pre></td></tr></table></figure><p>（4）在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions.pernode=100</span><br></pre></td></tr></table></figure><p>（5）整个MR Job中，最大可以创建多少个HDFS文件。默认100000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.exec.max.created.files=100000</span><br></pre></td></tr></table></figure><p>（6）当有空分区生成时，是否抛出异常。一般不需要设置。默认false</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.error.on.empty.partition=false</span><br></pre></td></tr></table></figure><p><strong>创建目标分区表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create table dept_partition_dy(id int, name string) partitioned by (loc int) row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure><p><strong>设置动态分区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; insert into table dept_partition_dy partition(loc) select deptno, dname, loc from dept;</span><br></pre></td></tr></table></figure><h2 id="7-分桶表"><a href="#7-分桶表" class="headerlink" title="7.分桶表"></a>7.分桶表</h2><p>​分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</p><p>​分桶是将数据集分解成更容易管理的若干部分的另一个技术。</p><p>​分区针对的是数据的存储路径；分桶针对的是数据文件。</p><p><strong>创建分桶表语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table stu_bucket(id int, name string)</span><br><span class="line">clustered by(id) </span><br><span class="line">into 4 buckets</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure><p><strong>导入数据到分桶表：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data inpath   &#x27;/student.txt&#x27; into table stu_bucket;</span><br></pre></td></tr></table></figure><p><strong>分桶规则：</strong></p><p>Hive的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方 式决定该条记录存放在哪个桶当中</p><p><strong>注意事项：</strong></p><p>（1）reduce的个数设置为-1,让Job自行决定需要用多少个reduce或者将reduce的个数设置为大于等于分桶表的桶数</p><p>（2）从hdfs中load数据到分桶表中，避免本地文件找不到问题</p><p>（3）不要使用本地模式</p><h2 id="8-Hive常用内置函数"><a href="#8-Hive常用内置函数" class="headerlink" title="8. Hive常用内置函数"></a>8. Hive常用内置函数</h2><h3 id="8-1-空字段复制"><a href="#8-1-空字段复制" class="headerlink" title="8.1 空字段复制"></a>8.1 空字段复制</h3><p><strong>函数说明：</strong></p><p>​NVL：给值为NULL的数据赋值，它的格式是NVL( value，default_value)。它的功能是如果value为NULL，则NVL函数返回default_value的值，否则返回value的值，如果两个参数都为NULL ，则返回NULL。</p><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select comm, nvl(comm,mgr) from emp;</span><br><span class="line">OK</span><br><span class="line">comm    _c1</span><br><span class="line">NULL    7902.0</span><br><span class="line">300.0   300.0</span><br><span class="line">500.0   500.0</span><br><span class="line">NULL    7839.0</span><br><span class="line">1400.0  1400.0</span><br><span class="line">NULL    7839.0</span><br><span class="line">NULL    7839.0</span><br><span class="line">NULL    7566.0</span><br><span class="line">NULL    NULL</span><br><span class="line">0.0     0.0</span><br><span class="line">NULL    7788.0</span><br><span class="line">NULL    7698.0</span><br><span class="line">NULL    7566.0</span><br><span class="line">NULL    7782.0</span><br></pre></td></tr></table></figure><h3 id="8-2-CASE-WHEN-ELSE-END"><a href="#8-2-CASE-WHEN-ELSE-END" class="headerlink" title="8.2 CASE WHEN ELSE END"></a>8.2 CASE WHEN ELSE END</h3><p><strong>数据：</strong></p><table><thead><tr><th>name</th><th>dept_id</th><th>sex</th></tr></thead><tbody><tr><td>悟空</td><td>A</td><td>男</td></tr><tr><td>大海</td><td>A</td><td>男</td></tr><tr><td>宋宋</td><td>B</td><td>男</td></tr><tr><td>凤姐</td><td>A</td><td>女</td></tr><tr><td>婷姐</td><td>B</td><td>女</td></tr><tr><td>婷婷</td><td>B</td><td>女</td></tr></tbody></table><p><strong>创建表格：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table emp_sex(</span><br><span class="line">name string, </span><br><span class="line">dept_id string, </span><br><span class="line">sex string) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &#x27;/opt/module/hive/datas/emp_sex.txt&#x27; into table emp_sex;</span><br></pre></td></tr></table></figure><p><strong>查询：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">  dept_id,</span><br><span class="line">  sum(case sex when &#x27;男&#x27; then 1 else 0 end) male_count,</span><br><span class="line">  sum(case sex when &#x27;女&#x27; then 1 else 0 end) female_count</span><br><span class="line">from </span><br><span class="line">  emp_sex</span><br><span class="line">group by</span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure><h3 id="8-3-行转列"><a href="#8-3-行转列" class="headerlink" title="8.3 行转列"></a>8.3 行转列</h3><p><strong>相关函数说明</strong></p><p>​CONCAT(string A&#x2F;col, string B&#x2F;col…)：返回输入字符串连接后的结果，支持任意个输入字符串;</p><p>​CONCAT_WS(separator, str1, str2,…)：它是一个特殊形式的 CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间;</p><p>​注意: CONCAT_WS must be “string or array<string></p><p>​COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。</p><p>数据：</p><table><thead><tr><th>name</th><th>constellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>大海</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>猪八戒</td><td>白羊座</td><td>A</td></tr><tr><td>凤姐</td><td>射手座</td><td>A</td></tr><tr><td>苍老师</td><td>白羊座</td><td>B</td></tr></tbody></table><p><strong>需求：</strong></p><p>把星座和血型一样的人归类到一起。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">射手座,A            大海|凤姐</span><br><span class="line">白羊座,A            孙悟空|猪八戒</span><br><span class="line">白羊座,B            宋宋|苍老师</span><br></pre></td></tr></table></figure><p><strong>创建表格：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table person_info(</span><br><span class="line">name string, </span><br><span class="line">constellation string, </span><br><span class="line">blood_type string) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &quot;/opt/module/hive/datas/person_info.txt&quot; into table person_info;</span><br></pre></td></tr></table></figure><p><strong>查询语句：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT t1.c_b , CONCAT_WS(&quot;|&quot;,collect_set(t1.name))</span><br><span class="line">FROM (</span><br><span class="line">SELECT NAME ,CONCAT_WS(&#x27;,&#x27;,constellation,blood_type) c_b</span><br><span class="line">FROM person_info</span><br><span class="line">)t1 </span><br><span class="line">GROUP BY t1.c_b</span><br></pre></td></tr></table></figure><p>其实行转列或者列转行并不是严格的 非得n行转成1行，要按照函数的应用情况来看</p><h3 id="8-4-列转行"><a href="#8-4-列转行" class="headerlink" title="8.4 列转行"></a>8.4 列转行</h3><p><strong>函数说明：</strong></p><p>EXPLODE(col)：将hive一列中复杂的array或者map结构拆分成多行。</p><p>LATERAL VIEW</p><p>用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias</p><p>解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</p><p><strong>数据准备：</strong></p><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《Lie to me》</td><td>悬疑,警匪,动作,心理,剧情</td></tr><tr><td>《战狼2》</td><td>战争,动作,灾难</td></tr></tbody></table><p><strong>需求：</strong></p><p>将电影分类中的数组数据展开。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">《疑犯追踪》      悬疑</span><br><span class="line">《疑犯追踪》      动作</span><br><span class="line">《疑犯追踪》      科幻</span><br><span class="line">《疑犯追踪》      剧情</span><br><span class="line">《Lie to me》   悬疑</span><br><span class="line">《Lie to me》   警匪</span><br><span class="line">《Lie to me》   动作</span><br><span class="line">《Lie to me》   心理</span><br><span class="line">《Lie to me》   剧情</span><br><span class="line">《战狼2》        战争</span><br><span class="line">《战狼2》        动作</span><br><span class="line">《战狼2》        灾难</span><br></pre></td></tr></table></figure><p><strong>创建表格：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table movie_info(</span><br><span class="line">    movie string, </span><br><span class="line">    category string) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &quot;/opt/module/hive/datas/movie_info.txt&quot; into table movie_info;</span><br></pre></td></tr></table></figure><p><strong>查询语句：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT movie,category_name </span><br><span class="line">FROM movie_info </span><br><span class="line">lateral VIEW</span><br><span class="line">explode(split(category,&quot;,&quot;)) movie_info_tmp  AS category_name ;</span><br></pre></td></tr></table></figure><p>解读：上述经过split函数之后，就成了一个字符串数组，然后我们就可以使用explode函数把这个数组变为多行数据。</p><h3 id="8-5-窗口函数"><a href="#8-5-窗口函数" class="headerlink" title="8.5 窗口函数"></a>8.5 窗口函数</h3><p><strong>相关函数说明</strong></p><p>OVER()：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的改变而变化。</p><p>CURRENT ROW：当前行</p><p>n PRECEDING：往前n行数据</p><p>n FOLLOWING：往后n行数据</p><p>UNBOUNDED：起点，</p><p>​         UNBOUNDED PRECEDING 表示从前面的起点， </p><p>​    UNBOUNDED FOLLOWING表示到后面的终点</p><p>LAG(col,n,default_val)：往前第n行数据</p><p>LEAD(col,n, default_val)：往后第n行数据</p><p>NTILE(n)：把有序窗口的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。注意：n必须为int类型。</p><p><strong>数据准备：name,orderdate,cost</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jack,2017-01-01,10</span><br><span class="line">tony,2017-01-02,15</span><br><span class="line">jack,2017-02-03,23</span><br><span class="line">tony,2017-01-04,29</span><br><span class="line">jack,2017-01-05,46</span><br><span class="line">jack,2017-04-06,42</span><br><span class="line">tony,2017-01-07,50</span><br><span class="line">jack,2017-01-08,55</span><br><span class="line">mart,2017-04-08,62</span><br><span class="line">mart,2017-04-09,68</span><br><span class="line">neil,2017-05-10,12</span><br><span class="line">mart,2017-04-11,75</span><br><span class="line">neil,2017-06-12,80</span><br><span class="line">mart,2017-04-13,94</span><br></pre></td></tr></table></figure><p><strong>需求：</strong></p><p>（1）查询在2017年4月份购买过的顾客及总人数</p><p>（2）查询顾客的购买明细及月购买总额</p><p>（3）上述的场景, 将每个顾客的cost按照日期进行累加</p><p>（4）查询每个顾客上次的购买时间</p><p>（5）查询前20%时间的订单信息</p><p><strong>创建表格：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table business(</span><br><span class="line">name string, </span><br><span class="line">orderdate string,</span><br><span class="line">cost int</span><br><span class="line">) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;</span><br><span class="line">load data local inpath &quot;/opt/module/hive/datas/business.txt&quot; into table business;</span><br></pre></td></tr></table></figure><p><strong>查询命令：</strong></p><ol><li><p>查询在2017年4月份购买过的顾客及总人数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name,count(*) over () </span><br><span class="line">from business </span><br><span class="line">where substring(orderdate,1,7) = &#x27;2017-04&#x27; </span><br><span class="line">group by name;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询顾客的购买明细及月购买总额</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost,sum(cost) over(partition by month(orderdate)) from</span><br><span class="line">business;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将每个顾客的cost按照日期进行累加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost, </span><br><span class="line">sum(cost) over() as sample1,--所有行相加 </span><br><span class="line">sum(cost) over(partition by name) as sample2,--按name分组，组内数据相加 </span><br><span class="line">sum(cost) over(partition by name order by orderdate) as sample3,--按name分组，组内数据累加 </span><br><span class="line">sum(cost) over(partition by name order by orderdate rows between UNBOUNDED PRECEDING and current row ) as sample4 ,--和sample3一样,由起点到当前行的聚合 </span><br><span class="line">sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING and current row) as sample5, --当前行和前面一行做聚合 </span><br><span class="line">sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING AND 1 FOLLOWING ) as sample6,--当前行和前边一行及后面一行 </span><br><span class="line">sum(cost) over(partition by name order by orderdate rows between current row and UNBOUNDED FOLLOWING ) as sample7 --当前行及后面所有行 </span><br><span class="line">from business;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看顾客上次的购买时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost, </span><br><span class="line">lag(orderdate,1,&#x27;1900-01-01&#x27;) over(partition by name order by orderdate ) as time1, lag(orderdate,2) over (partition by name order by orderdate) as time2 </span><br><span class="line">from business;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询前20%时间的订单信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from (</span><br><span class="line">    select name,orderdate,cost, ntile(5) over(order by orderdate) sorted</span><br><span class="line">    from business</span><br><span class="line">) t</span><br><span class="line">where sorted = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>over(): 会为每条数据都开启一个窗口. 默认的窗口大小就是当前数据集的大小.<br>over(partition by ….) : 会按照指定的字段进行分区， 将分区字段的值相同的数据划分到相同的区。<br>                          每个区中的每条数据都会开启一个窗口.每条数据的窗口大小默认为当前分区数据集的大小.<br>over(order by ….) : 会在窗口中按照指定的字段对数据进行排序.<br>                      会为每条数据都开启一个窗口,默认的窗口大小为从数据集开头（起始行）开始到当前行.  </p><p>over(partition by …. order by ….) :会按照指定的字段进行分区， 将分区字段的值相同的数据划分到相同的区,<br>                                       在每个区中会按照指定的字段进行排序.<br>                                       会为每条数据都开启一个窗口,默认的窗口大小为当前分区中从数据集开始到当前行.                                            over(partition by … order by … rows between … and ….) : 指定每条数据的窗口大小.</p><h3 id="8-6-Rank"><a href="#8-6-Rank" class="headerlink" title="8.6 Rank"></a>8.6 Rank</h3><p><strong>函数说明：</strong></p><p>RANK() 排序相同时会重复，总数不会变</p><p>DENSE_RANK() 排序相同时会重复，总数会减少</p><p>ROW_NUMBER() 会根据顺序计算</p><p><strong>数据准备：</strong></p><table><thead><tr><th>name</th><th>subject</th><th>score</th></tr></thead><tbody><tr><td>孙悟空</td><td>语文</td><td>87</td></tr><tr><td>孙悟空</td><td>数学</td><td>95</td></tr><tr><td>孙悟空</td><td>英语</td><td>68</td></tr><tr><td>大海</td><td>语文</td><td>94</td></tr><tr><td>大海</td><td>数学</td><td>56</td></tr><tr><td>大海</td><td>英语</td><td>84</td></tr><tr><td>宋宋</td><td>语文</td><td>64</td></tr><tr><td>宋宋</td><td>数学</td><td>86</td></tr><tr><td>宋宋</td><td>英语</td><td>84</td></tr><tr><td>婷婷</td><td>语文</td><td>65</td></tr><tr><td>婷婷</td><td>数学</td><td>85</td></tr><tr><td>婷婷</td><td>英语</td><td>78</td></tr></tbody></table><p><strong>需求：</strong></p><p>计算每门学科成绩排名</p><p><strong>创建表格：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table score(</span><br><span class="line">name string,</span><br><span class="line">subject string, </span><br><span class="line">score int) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &#x27;/opt/module/hive/datas/score.txt&#x27; into table score;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查询语句：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">select name,</span><br><span class="line">subject,</span><br><span class="line">score,</span><br><span class="line">rank() over(partition by subject order by score desc) rp,</span><br><span class="line">dense_rank() over(partition by subject order by score desc) drp,</span><br><span class="line">row_number() over(partition by subject order by score desc) rmp</span><br><span class="line">from score;</span><br><span class="line"></span><br><span class="line">name    subject score   rp      drp     rmp</span><br><span class="line">孙悟空  数学    95      1       1       1</span><br><span class="line">宋宋    数学    86      2       2       2</span><br><span class="line">婷婷    数学    85      3       3       3</span><br><span class="line">大海    数学    56      4       4       4</span><br><span class="line">宋宋    英语    84      1       1       1</span><br><span class="line">大海    英语    84      1       1       2</span><br><span class="line">婷婷    英语    78      3       2       3</span><br><span class="line">孙悟空  英语    68      4       3       4</span><br><span class="line">大海    语文    94      1       1       1</span><br><span class="line">孙悟空  语文    87      2       2       2</span><br><span class="line">婷婷    语文    65      3       3       3</span><br><span class="line">宋宋    语文    64      4       4       4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-7-其它常用函数"><a href="#8-7-其它常用函数" class="headerlink" title="8.7 其它常用函数"></a>8.7 其它常用函数</h3><h4 id="8-7-1-常用日期函数"><a href="#8-7-1-常用日期函数" class="headerlink" title="8.7.1 常用日期函数"></a>8.7.1 常用日期函数</h4><ol><li>unix_timestamp:返回当前或指定时间的时间戳<br>select unix_timestamp();<br>select unix_timestamp(“2020-10-28”,’yyyy-MM-dd’);</li><li>from_unixtime：将时间戳转为日期格式<br>select from_unixtime(1603843200);</li><li>current_date：当前日期<br>select current_date;</li><li>current_timestamp：当前的日期加时间<br>select current_timestamp;</li><li>to_date：抽取日期部分<br>select to_date(‘2020-10-28 12:12:12’);</li><li>year：获取年<br>select year(‘2020-10-28 12:12:12’);</li><li>month：获取月<br>select month(‘2020-10-28 12:12:12’);</li><li>day：获取日<br>select day(‘2020-10-28 12:12:12’);</li><li>hour：获取时<br>select hour(‘2020-10-28 12:13:14’);</li><li>minute：获取分<br>select minute(‘2020-10-28 12:13:14’);</li><li>second：获取秒<br>select second(‘2020-10-28 12:13:14’);</li><li>weekofyear：当前时间是一年中的第几周<br>select weekofyear(‘2020-10-28 12:12:12’);</li><li>dayofmonth：当前时间是一个月中的第几天<br>select dayofmonth(‘2020-10-28 12:12:12’);</li><li>months_between： 两个日期间的月份<br>select months_between(‘2020-04-01’,’2020-10-28’);</li><li>add_months：日期加减月<br>select add_months(‘2020-10-28’,-3);</li><li>datediff：两个日期相差的天数<br>select datediff(‘2020-11-04’,’2020-10-28’);</li><li>date_add：日期加天数<br>select date_add(‘2020-10-28’,4);</li><li>date_sub：日期减天数<br>select date_sub(‘2020-10-28’,-4);</li><li>last_day：日期的当月的最后一天<br>select last_day(‘2020-02-30’);</li><li>date_format(): 格式化日期<br>select date_format(‘2020-10-28 12:12:12’,’yyyy&#x2F;MM&#x2F;dd HH:mm:ss’);</li></ol><h4 id="8-7-2-常用取整函数"><a href="#8-7-2-常用取整函数" class="headerlink" title="8.7.2 常用取整函数"></a>8.7.2 常用取整函数</h4><ol start="21"><li>round： 四舍五入<br>select round(3.14);<br>select round(3.54);</li><li>ceil：  向上取整<br>select ceil(3.14);<br>select ceil(3.54);</li></ol><p>floor： 向下取整</p><ol start="23"><li>select floor(3.14);<br>select floor(3.54);</li></ol><h4 id="8-7-3-常用字符串操作函数"><a href="#8-7-3-常用字符串操作函数" class="headerlink" title="8.7.3 常用字符串操作函数"></a>8.7.3 常用字符串操作函数</h4><ol start="24"><li>upper： 转大写<br>select upper(‘low’);</li><li>lower： 转小写<br>select lower(‘low’);</li><li>length： 长度<br>select length(“atguigu”);</li><li>trim：  前后去空格<br>select trim(“ atguigu “);</li><li>lpad： 向左补齐，到指定长度<br>select lpad(‘atguigu’,9,’g’);</li><li>rpad：  向右补齐，到指定长度<br>select rpad(‘atguigu’,9,’g’);</li><li>regexp_replace：使用正则表达式匹配目标字符串，匹配成功后替换！<br>SELECT regexp_replace(‘2020&#x2F;10&#x2F;25’, ‘&#x2F;‘, ‘-‘);</li></ol><h4 id="8-7-4-集合操作"><a href="#8-7-4-集合操作" class="headerlink" title="8.7.4 集合操作"></a>8.7.4 集合操作</h4><ol start="31"><li>size： 集合中元素的个数<br>select size(friends) from test3;</li><li>map_keys： 返回map中的key<br>select map_keys(children) from test3;</li><li>map_values: 返回map中的value<br>select map_values(children) from test3;</li><li>array_contains: 判断array中是否包含某个元素<br>select array_contains(friends,’bingbing’) from test3;</li><li>sort_array： 将array中的元素排序<br>select sort_array(friends) from test3;</li></ol><h3 id="8-8-自定义UDF函数"><a href="#8-8-自定义UDF函数" class="headerlink" title="8.8 自定义UDF函数"></a>8.8 自定义UDF函数</h3><p><strong>需求：</strong></p><p>自定义一个UDF实现计算给定字符串的长度，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">hive(default)&gt; </span><span class="language-bash">select my_len(<span class="string">&quot;abcd&quot;</span>);</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure><p><strong>实现类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义UDF函数，需要继承GenericUDF类</span></span><br><span class="line"><span class="comment"> * 需求: 计算指定字符串的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStringLength</span> <span class="keyword">extends</span> <span class="title class_">GenericUDF</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arguments 输入参数类型的鉴别器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值类型的鉴别器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UDFArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ObjectInspector <span class="title function_">initialize</span><span class="params">(ObjectInspector[] arguments)</span> <span class="keyword">throws</span> UDFArgumentException &#123;</span><br><span class="line">        <span class="comment">// 判断输入参数的个数</span></span><br><span class="line">        <span class="keyword">if</span>(arguments.length !=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UDFArgumentLengthException</span>(<span class="string">&quot;Input Args Length Error!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断输入参数的类型</span></span><br><span class="line">        <span class="keyword">if</span>(!arguments[<span class="number">0</span>].getCategory().equals(ObjectInspector.Category.PRIMITIVE))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UDFArgumentTypeException</span>(<span class="number">0</span>,<span class="string">&quot;Input Args Type Error!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//函数本身返回值为int，需要返回int类型的鉴别器对象</span></span><br><span class="line">        <span class="keyword">return</span> PrimitiveObjectInspectorFactory.javaIntObjectInspector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数的逻辑处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arguments 输入的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HiveException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">evaluate</span><span class="params">(DeferredObject[] arguments)</span> <span class="keyword">throws</span> HiveException &#123;</span><br><span class="line">       <span class="keyword">if</span>(arguments[<span class="number">0</span>].get() == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> arguments[<span class="number">0</span>].get().toString().length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDisplayString</span><span class="params">(String[] children)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打成jar包上传到服务器&#x2F;opt&#x2F;module&#x2F;hive&#x2F;datas&#x2F;myudf.jar</strong></p><p><strong>将jar包添加到hive的classpath</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; add jar /opt/module/hive/datas/myudf.jar;</span><br></pre></td></tr></table></figure><p><strong>创建临时函数与开发好的javaclass关联</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create temporary function my_len as &quot;com.atguigu.hive.MyStringLength&quot;;</span><br></pre></td></tr></table></figure><p><strong>即可在hql中使用自定义的函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select ename,my_len(ename) ename_len from emp;</span><br></pre></td></tr></table></figure><h3 id="8-9-自定义UDTF函数"><a href="#8-9-自定义UDTF函数" class="headerlink" title="8.9 自定义UDTF函数"></a>8.9 自定义UDTF函数</h3><p><strong>需求：</strong></p><p>自定义一个UDTF实现将一个任意分割符的字符串切割成独立的单词，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">hive(default)&gt; </span><span class="language-bash">select myudtf(<span class="string">&quot;hello,world,hadoop,hive&quot;</span>, <span class="string">&quot;,&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hadoop</span><br><span class="line">hive</span><br></pre></td></tr></table></figure><p><strong>代码实现：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.udtf;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.hive.ql.exec.UDFArgumentException;</span><br><span class="line">import org.apache.hadoop.hive.ql.metadata.HiveException;</span><br><span class="line">import org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;</span><br><span class="line">import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line">import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class="line">import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;</span><br><span class="line">import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class MyUDTF extends GenericUDTF &#123;</span><br><span class="line"></span><br><span class="line">    private ArrayList&lt;String&gt; outList = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public StructObjectInspector initialize(StructObjectInspector argOIs) throws UDFArgumentException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //1.定义输出数据的列名和类型</span><br><span class="line">        List&lt;String&gt; fieldNames = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;ObjectInspector&gt; fieldOIs = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //2.添加输出数据的列名和类型</span><br><span class="line">        fieldNames.add(&quot;lineToWord&quot;);</span><br><span class="line">        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);</span><br><span class="line"></span><br><span class="line">        return ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void process(Object[] args) throws HiveException &#123;</span><br><span class="line">        </span><br><span class="line">        //1.获取原始数据</span><br><span class="line">        String arg = args[0].toString();</span><br><span class="line"></span><br><span class="line">        //2.获取数据传入的第二个参数，此处为分隔符</span><br><span class="line">        String splitKey = args[1].toString();</span><br><span class="line"></span><br><span class="line">        //3.将原始数据按照传入的分隔符进行切分</span><br><span class="line">        String[] fields = arg.split(splitKey);</span><br><span class="line"></span><br><span class="line">        //4.遍历切分后的结果，并写出</span><br><span class="line">        for (String field : fields) &#123;</span><br><span class="line"></span><br><span class="line">            //集合为复用的，首先清空集合</span><br><span class="line">            outList.clear();</span><br><span class="line"></span><br><span class="line">            //将每一个单词添加至集合</span><br><span class="line">            outList.add(field);</span><br><span class="line"></span><br><span class="line">            //将集合内容写出</span><br><span class="line">            forward(outList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() throws HiveException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打成jar包上传到服务器&#x2F;opt&#x2F;module&#x2F;hive&#x2F;data&#x2F;myudtf.jar</strong></p><p><strong>将jar包添加到hive的classpath下</strong></p><p><strong>创建临时函数与开发好的javaclass关联</strong></p><p><strong>使用自定义的函数</strong></p><h2 id="9-文件存储格式"><a href="#9-文件存储格式" class="headerlink" title="9.文件存储格式"></a>9.文件存储格式</h2><p>​Hive支持的存储数据的格式主要有：TEXTFILE 、SEQUENCEFILE、ORC、PARQUET。</p><h3 id="9-1列式存储和行式存储"><a href="#9-1列式存储和行式存储" class="headerlink" title="9.1列式存储和行式存储"></a>9.1列式存储和行式存储</h3><p><img src="/2022/08/30/Hive/hive%E6%A6%82%E8%BF%B0/1661938785375.png" alt="1661938785375"></p><p>​如图所示左边为逻辑表，右边第一个为行式存储，第二个为列式存储。</p><ol><li><p><strong>行存储的特点</strong></p><p>​查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p></li><li><p><strong>列存储的特点</strong></p><p>​因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。</p></li></ol><p>​<strong>TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；</strong></p><p>​<strong>ORC和PARQUET是基于列式存储的。</strong></p><h3 id="9-2-textFile格式"><a href="#9-2-textFile格式" class="headerlink" title="9.2 textFile格式"></a>9.2 textFile格式</h3><p>​默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合Gzip、Bzip2使用，但使用Gzip这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</p><h3 id="9-3-Orc格式"><a href="#9-3-Orc格式" class="headerlink" title="9.3 Orc格式"></a>9.3 Orc格式</h3><p>​Orc (Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式。</p><p>​如下图所示可以看到每个Orc文件由1个或多个stripe组成，每个stripe一般为HDFS的块大小，每一个stripe包含多条记录，这些记录按照列进行独立存储，对应到Parquet中的row group的概念。每个Stripe里有三部分组成，分别是Index Data，Row Data，Stripe Footer：</p><p><img src="/2022/08/30/Hive/hive%E6%A6%82%E8%BF%B0/1661939117144.png" alt="1661939117144"></p><p>​1）Index Data：一个轻量级的index，默认是每隔1W行做一个索引。这里做的索引应该只是记录某行的各字段在Row Data中的offset。</p><p>​2）Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个Stream来存储。</p><p>​3）Stripe Footer：存的是各个Stream的类型，长度等信息。</p><p>​每个文件有一个File Footer，这里面存的是每个Stripe的行数，每个Column的数据类型信息等；每个文件的尾部是一个PostScript，这里面记录了整个文件的压缩类型以及FileFooter的长度信息等。在读取文件时，会seek到文件尾部读PostScript，从里面解析到File Footer长度，再读FileFooter，从里面解析到各个Stripe信息，再读各个Stripe，即从后往前读。</p><h3 id="9-4-Parquet格式"><a href="#9-4-Parquet格式" class="headerlink" title="9.4 Parquet格式"></a>9.4 Parquet格式</h3><p>​Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，因此Parquet格式文件是自解析的。</p><p>（1）行组(Row Group)：每一个行组包含一定的行数，在一个HDFS文件中至少存储一个行组，类似于orc的stripe的概念。</p><p>（2）列块(Column Chunk)：在一个行组中每一列保存在一个列块中，行组中的所有列连续的存储在这个行组文件中。一个列块中的值都是相同类型的，不同的列块可能使用不同的算法进行压缩。</p><p>（3）页(Page)：每一个列块划分为多个页，一个页是最小的编码的单位，在同一个列块的不同页可能使用不同的编码方式。</p><p>​通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把每一个行组由一个Mapper任务处理，增大任务执行并行度。Parquet文件的格式。</p><p><img src="/2022/08/30/Hive/hive%E6%A6%82%E8%BF%B0/1661939577441.png" alt="1661939577441"></p><p>​上图展示了一个Parquet文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的Magic<br>Code，用于校验它是否是一个Parquet文件，Footer length记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的Schema信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：数据页、字典页和索引页。数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页。</p><h3 id="9-5存储方式和压缩总结"><a href="#9-5存储方式和压缩总结" class="headerlink" title="9.5存储方式和压缩总结"></a>9.5存储方式和压缩总结</h3><p>​在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy，lzo。</p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UDF </tag>
            
            <tag> UDTF </tag>
            
            <tag> 分区表 </tag>
            
            <tag> 分桶表 </tag>
            
            <tag> 开窗函数 </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Zookeeper的选举机制"><a href="#1-Zookeeper的选举机制" class="headerlink" title="1.Zookeeper的选举机制"></a>1.Zookeeper的选举机制</h2><p>（1）半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</p><p>（2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</p><p>（3）以一个简单的例子来说明整个选举的过程。</p><p>​假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么。</p><p><img src="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/1661691467670.png" alt="1661691467670"></p><p>（1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；</p><p>（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</p><p>（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</p><p>（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；</p><p>（5）服务器5启动，同4一样当小弟。</p><h2 id="2-监听器原理"><a href="#2-监听器原理" class="headerlink" title="2.监听器原理"></a>2.监听器原理</h2><p><img src="/2022/08/28/Zookeper/%E6%9C%AA%E5%91%BD%E5%90%8D/1661691749227.png" alt="1661691749227"></p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> 选举 </tag>
            
            <tag> 监听机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录</title>
      <link href="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>免密登录原理：</p><p><img src="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/1661657310766.png" alt="1661657310766"></p><ol><li><p>生成公钥和私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>把公钥拷贝到需要免密登录的机器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop102</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop103</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-copy-id hadoop104</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>known_hosts</th><th>记录ssh访问过计算机的公钥(public   key)</th></tr></thead><tbody><tr><td>id_rsa</td><td>生成的私钥</td></tr><tr><td>id_rsa.pub</td><td>生成的公钥</td></tr><tr><td>authorized_keys</td><td>存放授权过的无密登录服务器公钥</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 离线数仓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH免密登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备一台模板机</title>
      <link href="/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E6%A8%A1%E6%9D%BF%E6%9C%BA/"/>
      <url>/2022/08/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E6%A8%A1%E6%9D%BF%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>本博客用于记录如何准备一台模板虚拟机</p><ol><li><p><strong>安装Linux系统</strong></p><p>其实安装Linux虚拟机还是比较简单的，但是有几个细节总是容易忘记，因此记录一下。</p><p>主要记不住的点在于手动分磁盘</p><ol><li>添加分区&#x2F;boot ,引导分区，建议1GB，修改设备类型为标准分区，文件系统为ext4</li><li>添加分区swap，这部分其实就是把一部分磁盘当作内存的备用空间，当内存不够用的时候，把这部分空间作为内存空间来使用，这部分空间可以设置为2GB，设备类型是标准分区，文件系统是swap</li><li>最后一个分区就是&#x2F; ，把剩余的磁盘全部分配，设备类型选择标准分区，文件系统是ext4</li></ol><p>其它部分就大致按照默认选项来就可以</p></li><li><p><strong>安装必要的环境，为安装Hadoop做准备</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# yum install -y epel-release</span><br><span class="line">[root@hadoop100 ~]# yum install -y psmisc nc net-tools rsync vim lrzsz ntp libzstd openssl-static tree iotop git</span><br></pre></td></tr></table></figure></li><li><p><strong>修改静态IP，教程在之前博客有讲到过</strong></p></li><li><p><strong>关闭防火墙，关闭防火墙开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# systemctl stop firewalld</span><br><span class="line">[root@hadoop100 ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p><strong>创建新用户，并修改此用户密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# useradd atguigu</span><br><span class="line">[root@hadoop100 ~]# passwd atguigu</span><br></pre></td></tr></table></figure></li><li><p><strong>配置该用户具有root权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# vim /etc/sudoers</span><br></pre></td></tr></table></figure><p> 修改&#x2F;etc&#x2F;sudoers文件，找到下面一行（91行），在root下面添加一行，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">atguigu   ALL=(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure></li><li><p><strong>在&#x2F;opt目录下创建文件夹，并修改所属主和所属组</strong></p><p>（1）在&#x2F;opt目录下创建module、software文件夹</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# mkdir /opt/module</span><br><span class="line">[root@hadoop100 ~]# mkdir /opt/software</span><br></pre></td></tr></table></figure><p>   （2）修改module、software文件夹的所有者和所属组均为atguigu用户 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# chown atguigu:atguigu /opt/module </span><br><span class="line">[root@hadoop100 ~]# chown atguigu:atguigu /opt/software</span><br></pre></td></tr></table></figure><p>   （3）查看module、software文件夹的所有者和所属组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# cd /opt/</span><br><span class="line">[root@hadoop100 opt]# ll</span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月  28 17:18 module</span><br><span class="line">drwxr-xr-x. 2 root    root    4096 9月   7 2017 rh</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月  28 17:18 software</span><br></pre></td></tr></table></figure><ol start="8"><li><strong>卸载虚拟机自带的open JDK</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</span><br></pre></td></tr></table></figure><p>模板机子创建好了之后，我们就可以直接克隆虚拟机，克隆后只需要改静态IP以及主机名就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 离线数仓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离线数仓 </tag>
            
            <tag> 手动分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop各种概念介绍</title>
      <link href="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Hadoop的优势是什么？"><a href="#1-Hadoop的优势是什么？" class="headerlink" title="1.Hadoop的优势是什么？"></a>1.Hadoop的优势是什么？</h2><ol><li>高可靠性：Hadoop底层会维度多个数据副本，即使Hadoop某个存储出现故障，也不会导致数据的丢失</li><li>高扩展性：在集群之间分配任务数据，可以十分方便的扩展数以千计的节点</li><li>高效性：在MR的思想下，Hadoop处理问题的策略是并行的，可以加快任务处理的速度</li><li>高容错性：能够自动把失败的任务重新分配</li></ol><h2 id="2-Hadoop1版本和Hadoop2版本的区别？"><a href="#2-Hadoop1版本和Hadoop2版本的区别？" class="headerlink" title="2.Hadoop1版本和Hadoop2版本的区别？"></a>2.Hadoop1版本和Hadoop2版本的区别？</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661652672746.png" alt="1661652672746"></p><p>在Hadoop1版本的时候，计算和资源调度都是由MR来实现，耦合性太高，在Hadoop2版本增加了Yarn资源调度模块，MR仅仅负责计算</p><h2 id="3-HDFS架构简述？"><a href="#3-HDFS架构简述？" class="headerlink" title="3.HDFS架构简述？"></a>3.HDFS架构简述？</h2><ol><li>NameNode：存储文件的元数据信息，如文件名，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表，还有每个文件所在的块列表和块所在的DateNode等等</li><li>DataNode: 在本地文件系统存储文件快数据，以及块数据的校验和</li><li>Secondary NameNode：每隔一段时间就会对NameNode元数据进行备份，但是是冷备份，治标不治本。</li></ol><h2 id="4-Yarn架构简述？"><a href="#4-Yarn架构简述？" class="headerlink" title="4.Yarn架构简述？"></a>4.Yarn架构简述？</h2><ol><li>ResourceManager: 处理客户端请求、监控NodeManager、启动或者监控ApplicationMaster、资源的分配与调度</li><li>NodeManager: 管理单个节点上的资源、处理来自ResourceManager的命令、处理来自ApplicationMaster的命令</li><li>ApplicationMaster：负责数据的切分、为应用程序申请资源并分配给内部的任务、任务的监控与容错</li><li>Container：他是YARN的资源抽象，封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等等</li></ol><h2 id="5-为什么HDFS文件块设置为128MB？"><a href="#5-为什么HDFS文件块设置为128MB？" class="headerlink" title="5.为什么HDFS文件块设置为128MB？"></a>5.为什么HDFS文件块设置为128MB？</h2><p><a href="https://so.csdn.net/so/search?q=HDFS&spm=1001.2101.3001.7020">HDFS</a>中的文件在物理上是分块存储（<code>Block</code>），块的大小可以通过配置参数(<code>dfs.blocksize</code>）来规定，默认大小在Hadoop2.x版本中是128M，老版本中是64M。</p><p>默认为128M的原因，基于最佳传输损耗理论！</p><p>不论对磁盘的文件进行读还是写，都需要先进行寻址！</p><p>最佳传输损耗理论：在一次传输中，寻址时间占用总传输时间的1%时，本次传输的损耗最小，为最佳性价比传输！<br>目前硬件的发展条件，普通磁盘写的速率大概为100M&#x2F;S, 寻址时间一般为10ms!</p><p><code>10ms / 1% = 1s</code><br><code>1s * 100M/S=100M</code></p><p>块在传输时，<code>每64K还需要校验一次</code>，因此块大小，必须为<code>2的n次方</code>，最接近100M的就是128M！</p><p><strong>为什么块的大小不能设置太小，也不能设置太大？</strong></p><ol><li><p>如果块设置过大，</p><p> 一方面，从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；</p><p> 另一方面，mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。</p></li><li><p>如果块设置过小，</p><p>一方面存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；</p><p>另一方面文件块过小，寻址时间增大，导致程序一直在找block的开始位置。</p></li></ol><p>因而，块适当设置大一些，减少寻址时间，那么传输一个由多个块组成的文件的时间主要取决于磁盘的传输速率。</p><h2 id="6-HDFS的写流程"><a href="#6-HDFS的写流程" class="headerlink" title="6.HDFS的写流程"></a>6.HDFS的写流程</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661661770326.png" alt="1661661770326"></p><ol><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</li><li>NameNode返回是否可以上传。</li><li>客户端请求第一个 Block上传到哪几个DataNode服务器上。</li><li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li><li>dn1、dn2、dn3逐级应答客户端。</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li></ol><h3 id="6-1-节点距离计算？"><a href="#6-1-节点距离计算？" class="headerlink" title="6.1 节点距离计算？"></a>6.1 节点距离计算？</h3><p>在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据。那么这个最近距离怎么计算呢？</p><p>节点距离：两个节点到达最近的共同祖先的距离总和。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661661934358.png" alt="1661661934358"></p><h3 id="6-2Hadoop副本节点选择策略"><a href="#6-2Hadoop副本节点选择策略" class="headerlink" title="6.2Hadoop副本节点选择策略"></a>6.2Hadoop副本节点选择策略</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661662094057.png" alt="1661662094057"></p><h2 id="7-HDFS读数据流程"><a href="#7-HDFS读数据流程" class="headerlink" title="7.HDFS读数据流程"></a>7.HDFS读数据流程</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661662132533.png" alt="1661662132533"></p><ol><li>客户端通过DistributedFileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li></ol><h2 id="8-NameNode和SecondaryNameNode"><a href="#8-NameNode和SecondaryNameNode" class="headerlink" title="8.NameNode和SecondaryNameNode"></a>8.NameNode和SecondaryNameNode</h2><h3 id="8-1-NN和2NN的工作机制"><a href="#8-1-NN和2NN的工作机制" class="headerlink" title="8.1 NN和2NN的工作机制"></a>8.1 NN和2NN的工作机制</h3><p>​思考：NameNode中的元数据存储在哪里？</p><p>​首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。</p><p>​这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</p><p>​但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，专门用于FsImage和Edits的合并。</p><hr><p><strong>NameNode工作机制</strong></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661669014177.png" alt="1661669014177"></p><p><strong>第一阶段：NameNode启动</strong></p><ol><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</li><li>客户端对元数据进行增删改的请求。</li><li>NameNode记录操作日志，更新滚动日志。</li><li>NameNode在内存中对元数据进行增删改。</li></ol><p><strong>第二阶段：SecondaryNameNode</strong></p><ol><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果。</li><li>Secondary NameNode请求执行CheckPoint。</li><li>NameNode滚动正在写的Edits日志。</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode。</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</li><li>生成新的镜像文件fsimage.chkpoint。</li><li>拷贝fsimage.chkpoint到NameNode。</li><li>NameNode将fsimage.chkpoint重新命名成fsimage。</li></ol><p><strong>NN和2NN的工作机制详解：</strong></p><p>Fsimage：NameNode内存中元数据序列化后形成的文件。</p><p>Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</p><p>​NameNode启动时，先滚动Edits并生成一个空的edits.inprogress，然后加载Edits和Fsimage到内存中，此时NameNode内存就持有最新的元数据信息。Client开始对NameNode发送元数据的增删改的请求，这些请求的操作首先会被记录到edits.inprogress中（查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息），如果此时NameNode挂掉，重启后会从Edits中读取元数据的信息。然后，NameNode会在内存中执行元数据的增删改的操作。</p><p>​由于Edits中记录的操作会越来越多，Edits文件会越来越大，导致NameNode在启动加载Edits时会很慢，所以需要对Edits和Fsimage进行合并（所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage）。SecondaryNameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。</p><p>​SecondaryNameNode首先会询问NameNode是否需要CheckPoint（触发CheckPoint需要满足两个条件中的任意一个，定时时间到和Edits中数据写满了）。直接带回NameNode是否检查结果。SecondaryNameNode执行CheckPoint操作，首先会让NameNode滚动Edits并生成一个空的edits.inprogress，滚动Edits的目的是给Edits打个标记，以后所有新的操作都写入edits.inprogress，其他未合并的Edits和Fsimage会拷贝到SecondaryNameNode的本地，然后将拷贝的Edits和Fsimage加载到内存中进行合并，生成fsimage.chkpoint，然后将fsimage.chkpoint拷贝给NameNode，重命名为Fsimage后替换掉原来的Fsimage。NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在Fsimage中。</p><h3 id="8-2CheckPoint时间设置"><a href="#8-2CheckPoint时间设置" class="headerlink" title="8.2CheckPoint时间设置"></a>8.2CheckPoint时间设置</h3><ol><li>通常情况下，SecondaryNameNode每隔一小时执行一次。</li><li>一分钟检查一次操作次数，当操作次数达到1百万时，SecondaryNameNode执行一次。</li></ol><h3 id="8-3集群的安全模式"><a href="#8-3集群的安全模式" class="headerlink" title="8.3集群的安全模式"></a>8.3集群的安全模式</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661670551060.png" alt="1661670551060"></p><h2 id="9-DataNode"><a href="#9-DataNode" class="headerlink" title="9.DataNode"></a>9.DataNode</h2><h3 id="9-1DataNode工作机制"><a href="#9-1DataNode工作机制" class="headerlink" title="9.1DataNode工作机制"></a>9.1DataNode工作机制</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661670644724.png" alt="1661670644724"></p><ol><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳。</li><li>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。</li><li>集群运行中可以安全加入和退出一些机器。</li></ol><h3 id="9-2DataNode检测数据完整性"><a href="#9-2DataNode检测数据完整性" class="headerlink" title="9.2DataNode检测数据完整性"></a>9.2DataNode检测数据完整性</h3><p>（1）当DataNode读取Block的时候，它会计算CheckSum。</p><p>（2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</p><p>（3）Client读取其他DataNode上的Block。</p><p>（4）常见的校验算法 crc（32），md5（128），sha1（160）</p><p>（5）DataNode在其文件创建后周期验证CheckSum。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661671111412.png" alt="1661671111412"></p><h3 id="9-3DataNode掉线死亡时间的设置"><a href="#9-3DataNode掉线死亡时间的设置" class="headerlink" title="9.3DataNode掉线死亡时间的设置"></a>9.3DataNode掉线死亡时间的设置</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661671219667.png" alt="1661671219667"></p><p>​需要注意的是hdfs-site.xml 配置文件中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.heartbeat.recheck-interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;300000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.heartbeat.interval&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="10-描述一下手写MR程序的大概流程和规范？"><a href="#10-描述一下手写MR程序的大概流程和规范？" class="headerlink" title="10.描述一下手写MR程序的大概流程和规范？"></a>10.描述一下手写MR程序的大概流程和规范？</h2><p>​首先，从MapReduce程序的结构划分可以分为三部分，第一是 程序的执行入口通常简称为驱动类，驱动类主要编写MR作业的提交流程以及自定义的一些配置项。第二是 Map阶段的核心类需要自定并且继承Hadoop提供的Mapper类，重写Mapper类中的map方法，在map方法中遍写自己的业务逻辑代码将数据处理后利用context 上下文对象的写出落盘。第三是 Reduce阶段的核心类同时也需要继承Hadoop提供的Reducer类，并重写reduce 方法，在reduce方法中编写自己的业务逻辑代码，处理完数据后也是通过context上下文对象将数据写出，这也就是最终的结果文件。</p><h2 id="11-如何实现Hadoop中的序列化，以及和Java序列化的区别"><a href="#11-如何实现Hadoop中的序列化，以及和Java序列化的区别" class="headerlink" title="11.如何实现Hadoop中的序列化，以及和Java序列化的区别"></a>11.如何实现Hadoop中的序列化，以及和Java序列化的区别</h2><p>​首先序列化是把内存中的Java对象转化成二进制字节码，反序列化是将二进制字节码转化成Java对象，通常我们在对Java对象进行磁盘持久化写入或者将Java对象作为数据进行网络传输的时候需要进行序列化，相反如果要将J数据从磁盘读出并转化成Java对象需要进行反序列化。实现Hadoop中的序列化需要让JavaBean对象实现Writable接口，并重写write() 方法和readFields()方法，其中write()方法是序列化方法，readFields()方法是反序列化方法。</p><p>​Hadoop序列化和Java序列化的区别在于，Java序列化更重量级，Java序列化的后的结果不仅仅生成二进制字节码文件，同时还会针对当前Java对象生成对应的检验信息以及集成体系结构，这样的话 无形中我们需要维护更多的数据，但是Hadoop序列化不会产生除了Java对象内部属性外的任何信息，整体内容更加简洁紧凑，读写速度相应也会提升很多，这也符合了大数据的处理背景。</p><h2 id="12-描述一下MR程序的执行逻辑"><a href="#12-描述一下MR程序的执行逻辑" class="headerlink" title="12.描述一下MR程序的执行逻辑"></a>12.描述一下MR程序的执行逻辑</h2><p>​简单的描述，MR程序执行先从InputFormat类说起，由InputFormat负责数据读入，并在内部实现切片，每一个切片的数据对应生成一个MapTask任务，MapTask中按照文件的行逐行数据进行处理，每一行数据会调用一次我们自定义的Mapper类的map方法，map方法内部实现具体的业务逻辑，处理完数据会通过context对象将数据写出到磁盘（此处会经历Shuffle过程），接下来ReduceTask会开始执行，首先ReduceTask会将MapTask处理完的数据结果拷贝过来，每一组相同key的values会会调用一次我们自定的Reducer类的reduce方法，当数据处理完成后，会通过context对象将数据结果写出到磁盘上。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675103915.png" alt="1661675103915"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675627909.png" alt="1661675627909"></p><p>上面的流程是整个MapReduce最全工作流程，但是Shuffle过程只是从第7步开始到第16步结束，具体Shuffle过程详解，如下：</p><p>（1）MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中</p><p>（2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</p><p>（3）多个溢出文件会被合并成大的溢出文件</p><p>（4）在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</p><p>（5）ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据</p><p>（6）ReduceTask会抓取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）</p><p>（7）合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</p><p><strong>注意：</strong></p><p>（1）Shuffle中的缓冲区大小会影响到MapReduce程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度就越快。</p><p>（2）缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb默认100M</p><h2 id="13-描述一下切片逻辑"><a href="#13-描述一下切片逻辑" class="headerlink" title="13.描述一下切片逻辑"></a>13.描述一下切片逻辑</h2><p>​MR中的切片是发生在数据读入的阶段中，所以我们要关注InputFormat的实现，通过追溯源码，在InputFormat这个抽象类中有一个getSplits(),这个方法就是我们实现切片的具体逻辑。首先我们先关注两个变量，分别是 minSize 和 maxSize，通过对源码的跟踪默认情况 minSize &#x3D; 1，maxSize &#x3D; Long.MAX_VALUE，源码中声明了一个集合List<InputSplit> splits &#x3D; new ArrayList<InputSplit>();，用于装载将来的切片对象并返回。接下来我们根据提交的job信息获取到当前要进行切片的文件详情，首先判断点前文件是否可以进行切分，这一步主要考虑到一些不支持切分的压缩文件时不能进行切片操作，否则就破坏了数据的完整性，如果当前文件可以切片的话，那么接下来就要计算切片的大小，计算切片大小一共需要三个因子，分别是minSize 、maxSize 、blocksize ，最后通过Math.max(minSize, Math.min(maxSize, blockSize)); 计算逻辑获取到切片大小，默认情况切片大小和数据库块大小一致，如果我们想改变切片大小可以通过修改一下两个配置参数实现 mapreduce.input.fileinputformat.split.minsize mapreduce.input.fileinputformat.split.maxsize，</p><p>如果把切片大小调大改mapreduce.input.fileinputformat.split.minsize<br>如果把切片大小调小改mapreduce.input.fileinputformat.split.maxsize。</p><p>​当我们可以获取到切片大小后就可以继续往下执行，在最终完成切片之前还有一个关键判断，就是判断剩余文件是否要继续进行切片，如果剩余文件&#x2F;切片大小&gt;1.1 那就继续切片，否则就不会再进行切片，这个规则考虑的情况就就是让将来的切片尽可能资源使用均衡，不至于很小的文件内容也开启一个MapTask。到此整个切片规则就表述完毕了！</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661674494603.png" alt="1661674494603"></p><h2 id="14-CombineTextInputFormat切片机制"><a href="#14-CombineTextInputFormat切片机制" class="headerlink" title="14.CombineTextInputFormat切片机制"></a>14.CombineTextInputFormat切片机制</h2><p>​框架默认的TextInputFormat切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。</p><p>​CombineTextInputFormat用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask处理。</p><p>​CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);&#x2F;&#x2F; 4m</p><p>​注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661674832817.png" alt="1661674832817"></p><p>​将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</p><p>​例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。</p><h2 id="15-MR中的shuffle机制"><a href="#15-MR中的shuffle机制" class="headerlink" title="15.MR中的shuffle机制"></a>15.MR中的shuffle机制</h2><h3 id="15-1概述"><a href="#15-1概述" class="headerlink" title="15.1概述"></a>15.1概述</h3><p>​Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661675886296.png" alt="1661675886296"></p><h3 id="15-2Partion分区"><a href="#15-2Partion分区" class="headerlink" title="15.2Partion分区"></a>15.2Partion分区</h3><p>默认的分区是根据key的hashcode对于ReduceTask的数量取余得到的，用户没办法指定key在哪一个分区</p><p><strong>自定义Partition步骤：</strong></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676742763.png" alt="1661676742763"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676800867.png" alt="1661676800867"></p><h3 id="15-3WritableComparable排序"><a href="#15-3WritableComparable排序" class="headerlink" title="15.3WritableComparable排序"></a>15.3WritableComparable排序</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676891089.png" alt="1661676891089"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676953729.png" alt="1661676953729"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661676989320.png" alt="1661676989320"></p><p><strong>自定义排序WritableComparable原理分析</strong></p><p>bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序。</p><h3 id="15-3Combiner"><a href="#15-3Combiner" class="headerlink" title="15.3Combiner"></a>15.3Combiner</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677337910.png" alt="1661677337910"></p><h2 id="16-MapTask的工作机制"><a href="#16-MapTask的工作机制" class="headerlink" title="16.MapTask的工作机制"></a>16.MapTask的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677599289.png" alt="1661677599289"></p><p>​（1）Read阶段：MapTask通过InputFormat获得的RecordReader，从输入InputSplit中解析出一个个key&#x2F;value。</p><p>​       （2）Map阶段：该节点主要是将解析出的key&#x2F;value交给用户编写map()函数处理，并产生一系列新的key&#x2F;value。</p><p>​       （3）Collect收集阶段：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key&#x2F;value分区（调用Partitioner），并写入一个环形内存缓冲区中。</p><p>​       （4）Spill阶段：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p><p>​       溢写阶段详情：</p><p>​       步骤1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序。</p><p>​       步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output&#x2F;spillN.out（N表示当前溢写次数）中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>​       步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output&#x2F;spillN.out.index中。</p><p>​       （5）Merge阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p><p>​       当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output&#x2F;file.out中，同时生成相应的索引文件output&#x2F;file.out.index。</p><p>​       在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并mapreduce.task.io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。</p><p>​       让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</p><h2 id="17-ReduceTask的工作机制"><a href="#17-ReduceTask的工作机制" class="headerlink" title="17.ReduceTask的工作机制"></a>17.ReduceTask的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677648908.png" alt="1661677648908"></p><p>​       （1）Copy阶段：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</p><p>​       （2）Merge阶段：在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。</p><p>​       （3）Sort阶段：按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可。</p><p>​       （4）Reduce阶段：reduce()函数将计算结果写到HDFS上。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661677707796.png" alt="1661677707796"></p><h2 id="18-Map-Join-和Reduce-Join"><a href="#18-Map-Join-和Reduce-Join" class="headerlink" title="18.Map Join 和Reduce Join"></a>18.Map Join 和Reduce Join</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661678941793.png" alt="1661678941793"></p><p>​Map Join适用于一张表十分小、一张表很大的场景。</p><h2 id="19-Yarn的工作机制"><a href="#19-Yarn的工作机制" class="headerlink" title="19.Yarn的工作机制"></a>19.Yarn的工作机制</h2><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679074675.png" alt="1661679074675"></p><p>​（1）MR程序提交到客户端所在的节点。</p><p>​       （2）YarnRunner向ResourceManager申请一个Application。</p><p>​       （3）RM将该应用程序的资源路径返回给YarnRunner。</p><p>​       （4）该程序将运行所需资源提交到HDFS上。</p><p>​       （5）程序资源提交完毕后，申请运行mrAppMaster。</p><p>​       （6）RM将用户的请求初始化成一个Task。</p><p>​       （7）其中一个NodeManager领取到Task任务。</p><p>​       （8）该NodeManager创建容器Container，并产生MRAppmaster。</p><p>​       （9）Container从HDFS上拷贝资源到本地。</p><p>​       （10）MRAppmaster向RM 申请运行MapTask资源。</p><p>​       （11）RM将运行MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器。</p><p>​       （12）MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</p><p>​（13）MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</p><p>​       （14）ReduceTask向MapTask获取相应分区的数据。</p><p>​       （15）程序运行完毕后，MR会向RM申请注销自己。</p><hr><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679214814.png" alt="1661679214814"></p><p>作业提交全过程详解</p><p>（1）作业提交</p><p>第1步：Client调用job.waitForCompletion方法，向整个集群提交MapReduce作业。</p><p>第2步：Client向RM申请一个作业id。</p><p>第3步：RM给Client返回该job资源的提交路径和作业id。</p><p>第4步：Client提交jar包、切片信息和配置文件到指定的资源提交路径。</p><p>第5步：Client提交完资源后，向RM申请运行MrAppMaster。</p><p>（2）作业初始化</p><p>第6步：当RM收到Client的请求后，将该job添加到容量调度器中。</p><p>第7步：某一个空闲的NM领取到该Job。</p><p>第8步：该NM创建Container，并产生MRAppmaster。</p><p>第9步：下载Client提交的资源到本地。</p><p>（3）任务分配</p><p>第10步：MrAppMaster向RM申请运行多个MapTask任务资源。</p><p>第11步：RM将运行MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器。</p><p>（4）任务运行</p><p>第12步：MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</p><p>第13步：MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</p><p>第14步：ReduceTask向MapTask获取相应分区的数据。</p><p>第15步：程序运行完毕后，MR会向RM申请注销自己。</p><p>（5）进度和状态更新</p><p>YARN中的任务将其进度和状态(包括counter)返回给应用管理器, 客户端每秒(通过mapreduce.client.progressmonitor.pollinterval设置)向应用管理器请求进度更新, 展示给用户。</p><p>（6）作业完成</p><p>除了向应用管理器请求作业进度外, 客户端每5秒都会通过调用waitForCompletion()来检查作业是否完成。时间间隔可以通过mapreduce.client.completion.pollinterval来设置。作业完成之后, 应用管理器和Container会清理工作状态。作业的信息会被作业历史服务器存储以备之后用户核查。</p><h2 id="20-Hadoop中的作业调度器"><a href="#20-Hadoop中的作业调度器" class="headerlink" title="20.Hadoop中的作业调度器"></a>20.Hadoop中的作业调度器</h2><p>​目前，Hadoop作业调度器主要有三种：FIFO、Capacity Scheduler和Fair Scheduler。Hadoop3.1.3默认的资源调度器是Capacity Scheduler。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679354061.png" alt="1661679354061"></p><p>​Hadoop最初设计目的是支持大数据批处理作业，如日志挖掘、Web索引等作业，</p><p>​为此，Hadoop仅提供了一个非常简单的调度机制：FIFO，即先来先服务，在该调度机制下，所有作业被统一提交到一个队列中，Hadoop按照提交顺序依次运行这些作业。</p><p>​但随着Hadoop的普及，单个Hadoop集群的用户量越来越大，不同用户提交的应用程序往往具有不同的服务质量要求，典型的应用有以下几种：</p><p>​批处理作业：这种作业往往耗时较长，对时间完成一般没有严格要求，如数据挖掘、机器学习等方面的应用程序。</p><p>​交互式作业：这种作业期望能及时返回结果，如SQL查询（Hive）等。</p><p>​生产性作业：这种作业要求有一定量的资源保证，如统计值计算、垃圾数据分析等。</p><p>​此外，这些应用程序对硬件资源需求量也是不同的，如过滤、统计类作业一般为CPU密集型作业，而数据挖掘、机器学习作业一般为I&#x2F;O密集型作业。因此，简单的FIFO调度策略不仅不能满足多样化需求，也不能充分利用硬件资源。</p><hr><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661679393543.png" alt="1661679393543"></p><p>​Capacity Scheduler Capacity Scheduler 是Yahoo开发的多用户调度器，它以队列为单位划分资源，每个队列可设定一定比例的资源最低保证和使用上限，同时，每个用户也可设定一定的资源使用上限以防止资源滥用。而当一个队列的资源有剩余时，可暂时将剩余资源共享给其他队列。</p><p>​总之，Capacity Scheduler 主要有以下几个特点：</p><p>​①容量保证。管理员可为每个队列设置资源最低保证和资源使用上限，而所有提交到该队列的应用程序共享这些资源。</p><p>​②灵活性，如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用程序提交，则其他队列借调的资源会归还给该队列。这种资源灵活分配的方式可明显提高资源利用率。</p><p>​③多重租赁。支持多用户共享集群和多应用程序同时运行。为防止单个应用程序、用户或者队列独占集群中的资源，管理员可为之增加多重约束（比如单个应用程序同时运行的任务数等）。</p><p>​④安全保证。每个队列有严格的ACL列表规定它的访问用户，每个用户可指定哪些用户允许查看自己应用程序的运行状态或者控制应用程序（比如杀死应用程序）。此外，管理员可指定队列管理员和集群系统管理员。</p><p>​⑤动态更新配置文件。管理员可根据需要动态修改各种配置参数，以实现在线集群管理。</p><h2 id="21-Hadoop的数据压缩"><a href="#21-Hadoop的数据压缩" class="headerlink" title="21.Hadoop的数据压缩"></a>21.Hadoop的数据压缩</h2><h3 id="21-1概述"><a href="#21-1概述" class="headerlink" title="21.1概述"></a>21.1概述</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686071085.png" alt="1661686071085"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686077793.png" alt="1661686077793"></p><h3 id="21-2MR支持的压缩编码"><a href="#21-2MR支持的压缩编码" class="headerlink" title="21.2MR支持的压缩编码"></a>21.2MR支持的压缩编码</h3><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>是，直接使用</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p>为了支持多种压缩&#x2F;解压缩算法，Hadoop引入了编码&#x2F;解码器，如下表所示。</p><table><thead><tr><th>压缩格式</th><th>对应的编码&#x2F;解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较</p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB&#x2F;s</td><td>58MB&#x2F;s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB&#x2F;s</td><td>9.5MB&#x2F;s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB&#x2F;s</td><td>74.6MB&#x2F;s</td></tr></tbody></table><h3 id="21-3压缩方式的选择"><a href="#21-3压缩方式的选择" class="headerlink" title="21.3压缩方式的选择"></a>21.3压缩方式的选择</h3><h4 id="21-3-1Gzip压缩"><a href="#21-3-1Gzip压缩" class="headerlink" title="21.3.1Gzip压缩"></a>21.3.1Gzip压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686251985.png" alt="1661686251985"></p><h4 id="21-3-2Bzip2压缩"><a href="#21-3-2Bzip2压缩" class="headerlink" title="21.3.2Bzip2压缩"></a>21.3.2Bzip2压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686270207.png" alt="1661686270207"></p><h4 id="21-3-3Lzo压缩"><a href="#21-3-3Lzo压缩" class="headerlink" title="21.3.3Lzo压缩"></a>21.3.3Lzo压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686290319.png" alt="1661686290319"></p><h4 id="21-3-4-Snappy压缩"><a href="#21-3-4-Snappy压缩" class="headerlink" title="21.3.4 Snappy压缩"></a>21.3.4 Snappy压缩</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686312779.png" alt="1661686312779"></p><h3 id="21-4压缩位置选择"><a href="#21-4压缩位置选择" class="headerlink" title="21.4压缩位置选择"></a>21.4压缩位置选择</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686358694.png" alt="1661686358694"></p><h3 id="21-5压缩参数配置"><a href="#21-5压缩参数配置" class="headerlink" title="21.5压缩参数配置"></a>21.5压缩参数配置</h3><p>​要在Hadoop中启用压缩，可以配置如下参数：</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686428791.png" alt="1661686428791"></p><h2 id="22-Hadoop企业优化"><a href="#22-Hadoop企业优化" class="headerlink" title="22.Hadoop企业优化"></a>22.Hadoop企业优化</h2><h3 id="22-1MapReduce跑的慢的原因"><a href="#22-1MapReduce跑的慢的原因" class="headerlink" title="22.1MapReduce跑的慢的原因"></a>22.1MapReduce跑的慢的原因</h3><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686500161.png" alt="1661686500161"></p><h3 id="22-2MapReduce优化方法"><a href="#22-2MapReduce优化方法" class="headerlink" title="22.2MapReduce优化方法"></a>22.2MapReduce优化方法</h3><p>​MapReduce优化方法主要从六个方面考虑：数据输入、Map阶段、Reduce阶段、IO传输、数据倾斜问题和常用的调优参数。</p><h4 id="22-2-1数据输入"><a href="#22-2-1数据输入" class="headerlink" title="22.2.1数据输入"></a>22.2.1数据输入</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686594807.png" alt="1661686594807"></p><h4 id="22-2-2Map阶段"><a href="#22-2-2Map阶段" class="headerlink" title="22.2.2Map阶段"></a>22.2.2Map阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686606515.png" alt="1661686606515"></p><h4 id="22-2-3-Reduce阶段"><a href="#22-2-3-Reduce阶段" class="headerlink" title="22.2.3 Reduce阶段"></a>22.2.3 Reduce阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686621134.png" alt="1661686621134"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686630210.png" alt="1661686630210"></p><h4 id="22-2-4IO阶段"><a href="#22-2-4IO阶段" class="headerlink" title="22.2.4IO阶段"></a>22.2.4IO阶段</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686637490.png" alt="1661686637490"></p><h4 id="22-2-5数据倾斜问题"><a href="#22-2-5数据倾斜问题" class="headerlink" title="22.2.5数据倾斜问题"></a>22.2.5数据倾斜问题</h4><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686653447.png" alt="1661686653447"></p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661686661689.png" alt="1661686661689"></p><h3 id="22-3常用的调优参数"><a href="#22-3常用的调优参数" class="headerlink" title="22.3常用的调优参数"></a>22.3常用的调优参数</h3><p>（1）以下参数是在用户自己的MR应用程序中配置就可以生效（mapred-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.memory.mb</td><td>一个MapTask可使用的资源上限（单位:MB），默认为1024。如果MapTask实际使用的资源量超过该值，则会被强制杀死。</td></tr><tr><td>mapreduce.reduce.memory.mb</td><td>一个ReduceTask可使用的资源上限（单位:MB），默认为1024。如果ReduceTask实际使用的资源量超过该值，则会被强制杀死。</td></tr><tr><td>mapreduce.map.cpu.vcores</td><td>每个MapTask可使用的最多cpu core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.cpu.vcores</td><td>每个ReduceTask可使用的最多cpu   core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.shuffle.parallelcopies</td><td>每个Reduce去Map中取数据的并行数。默认值是5</td></tr><tr><td>mapreduce.reduce.shuffle.merge.percent</td><td>Buffer中的数据达到多少比例开始写入磁盘。默认值0.66</td></tr><tr><td>mapreduce.reduce.shuffle.input.buffer.percent</td><td>Buffer大小占Reduce可用内存的比例。默认值0.7</td></tr><tr><td>mapreduce.reduce.input.buffer.percent</td><td>指定多少比例的内存用来存放Buffer中的数据，默认值是0.0</td></tr></tbody></table><p>（2）应该在YARN启动之前就配置在服务器的配置文件中才能生效（yarn-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>yarn.scheduler.minimum-allocation-mb</td><td>给应用程序Container分配的最小内存，默认值：1024</td></tr><tr><td>yarn.scheduler.maximum-allocation-mb</td><td>给应用程序Container分配的最大内存，默认值：8192</td></tr><tr><td>yarn.scheduler.minimum-allocation-vcores</td><td>每个Container申请的最小CPU核数，默认值：1</td></tr><tr><td>yarn.scheduler.maximum-allocation-vcores</td><td>每个Container申请的最大CPU核数，默认值：32</td></tr><tr><td>yarn.nodemanager.resource.memory-mb</td><td>给Containers分配的最大物理内存，默认值：8192</td></tr></tbody></table><p>（3）Shuffle性能优化的关键参数，应在YARN启动之前就配置好（mapred-default.xml）</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.task.io.sort.mb</td><td>Shuffle的环形缓冲区大小，默认100m</td></tr><tr><td>mapreduce.map.sort.spill.percent</td><td>环形缓冲区溢出的阈值，默认80%</td></tr></tbody></table><p>容错相关配置</p><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.maxattempts</td><td>每个Map Task最大重试次数，一旦重试次数超过该值，则认为Map Task运行失败，默认值：4。</td></tr><tr><td>mapreduce.reduce.maxattempts</td><td>每个Reduce Task最大重试次数，一旦重试次数超过该值，则认为Map Task运行失败，默认值：4。</td></tr><tr><td>mapreduce.task.timeout</td><td>Task超时时间，经常需要设置的一个参数，该参数表达的意思为：如果一个Task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该Task处于Block状态，可能是卡住了，也许永远会卡住，为了防止因为用户程序永远Block住不退出，则强制设置了一个该超时时间（单位毫秒），默认是600000（10分钟）。如果你的程序对每条输入数据的处理时间过长（比如会访问数据库，通过网络拉取数据等），建议将该参数调大，该参数过小常出现的错误提示是：“AttemptID:attempt_14267829456721_123456_m_000224_0 Timed out after   300 secsContainer killed by the ApplicationMaster.”。</td></tr></tbody></table><h3 id="22-4Hadoop小文件优化方法"><a href="#22-4Hadoop小文件优化方法" class="headerlink" title="22.4Hadoop小文件优化方法"></a>22.4Hadoop小文件优化方法</h3><h4 id="22-4-1Hadoop小文件弊端"><a href="#22-4-1Hadoop小文件弊端" class="headerlink" title="22.4.1Hadoop小文件弊端"></a>22.4.1Hadoop小文件弊端</h4><p>​HDFS上每个文件都要在NameNode上创建对应的元数据，这个元数据的大小约为150byte，这样当小文件比较多的时候，就会产生很多的元数据文件，一方面会大量占用NameNode的内存空间，另一方面就是元数据文件过多，使得寻址索引速度变慢。</p><p>​小文件过多，在进行MR计算时，会生成过多切片，需要启动过多的MapTask。每个MapTask处理的数据量小，导致MapTask的处理时间比启动时间还小，白白消耗资源。</p><h4 id="22-4-2Hadoop小文件解决方法"><a href="#22-4-2Hadoop小文件解决方法" class="headerlink" title="22.4.2Hadoop小文件解决方法"></a>22.4.2Hadoop小文件解决方法</h4><ol><li><pre><code>  小文件优化的方向：</code></pre></li></ol><p>（1）在数据采集的时候，就将小文件或小批数据合成大文件再上传HDFS。</p><p>（2）在业务处理之前，在HDFS上使用MapReduce程序对小文件进行合并。</p><p>（3）在MapReduce处理时，可采用CombineTextInputFormat提高效率。</p><p>（4）开启uber模式，实现jvm重用</p><ol start="2"><li><pre><code>  Hadoop Archive</code></pre></li></ol><p>是一个高效的将小文件放入HDFS块中的文件存档工具，能够将多个小文件打包成一个HAR文件，从而达到减少NameNode的内存使用</p><ol start="3"><li><pre><code>  SequenceFile</code></pre></li></ol><p>SequenceFile是由一系列的二进制k&#x2F;v组成，如果为key为文件名，value为文件内容，可将大批小文件合并成一个大文件</p><ol start="4"><li><pre><code>  CombineTextInputFormat</code></pre></li></ol><p>CombineTextInputFormat用于将多个小文件在切片过程中生成一个单独的切片或者少量的切片。 </p><ol start="5"><li><pre><code>  开启uber模式，实现jvm重用。默认情况下，每个Task任务都需要启动一个jvm来运行，如果Task任务计算的数据量很小，我们可以让同一个Job的多个Task运行在一个Jvm中，不必为每个Task都开启一个Jvm.</code></pre></li></ol><p>开启uber模式，在mapred-site.xml中添加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  开启uber模式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.enable&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的mapTask数量，可向下修改  --&gt; </span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxmaps&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;9&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的reduce数量，可向下修改 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxreduces&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- uber模式中最大的输入数据量，默认使用dfs.blocksize 的值，可向下修改 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.job.ubertask.maxbytes&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="23-Hadoop3-x的新特性"><a href="#23-Hadoop3-x的新特性" class="headerlink" title="23.Hadoop3.x的新特性"></a>23.Hadoop3.x的新特性</h2><h3 id="23-1多NN的HA架构"><a href="#23-1多NN的HA架构" class="headerlink" title="23.1多NN的HA架构"></a>23.1多NN的HA架构</h3><p>​ HDFS NameNode高可用性的初始实现为单个活动NameNode和单个备用NameNode，将edits复制到三个JournalNode。该体系结构能够容忍系统中一个NN或一个JN的故障。</p><p>​但是，某些部署需要更高程度的容错能力。Hadoop3.x允许用户运行多个备用NameNode。例如，通过配置三个NameNode和五个JournalNode，群集能够容忍两个节点而不是一个节点的故障。</p><h3 id="23-2纠删码"><a href="#23-2纠删码" class="headerlink" title="23.2纠删码"></a>23.2纠删码</h3><pre><code> HDFS中的默认3副本方案在存储空间和其他资源（例如，网络带宽）中具有200％的开销。但是，对于I / O活动相对较低暖和冷数据集，在正常操作期间很少访问其他块副本，但仍会消耗与第一个副本相同的资源量。</code></pre><p>​ 纠删码（Erasure Coding）能够在不到50% 的数据冗余情况下提供和3副本相同的容错能力，因此，使用纠删码作为副本机制的改进是自然而然的。</p><p>​查看集群支持的纠删码策略：hdfs ec -listPolicies</p><h2 id="24-Hadoop-HA高可用"><a href="#24-Hadoop-HA高可用" class="headerlink" title="24.Hadoop HA高可用"></a>24.Hadoop HA高可用</h2><h3 id="24-1概述"><a href="#24-1概述" class="headerlink" title="24.1概述"></a>24.1概述</h3><p>（1）所谓HA（High Availablity），即高可用（7*24小时不中断服务）。</p><p>（2）实现高可用最关键的策略是消除单点故障。HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA。</p><p>（3）Hadoop2.0之前，在HDFS集群中NameNode存在单点故障（SPOF）。</p><p>（4）NameNode主要在以下两个方面影响HDFS集群</p><p>​Ø  NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启</p><p>​Ø  NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</p><p>​</p><p>​HDFS HA功能通过配置Active&#x2F;Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</p><h3 id="24-2工作原理"><a href="#24-2工作原理" class="headerlink" title="24.2工作原理"></a>24.2工作原理</h3><p>1）元数据管理方式需要改变</p><p>​内存中各自保存一份元数据；</p><p>​Edits日志只有Active状态的NameNode节点可以做写操作；</p><p>​所有的NameNode都可以读取Edits；</p><p>​共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）；</p><p>2）需要一个状态管理功能模块</p><p>​实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</p><p>3）必须保证两个NameNode之间能够ssh无密码登录</p><p>4）隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务</p><h3 id="24-3HDFS-HA自动故障转移工作机制"><a href="#24-3HDFS-HA自动故障转移工作机制" class="headerlink" title="24.3HDFS-HA自动故障转移工作机制"></a>24.3HDFS-HA自动故障转移工作机制</h3><p>自动故障转移为HDFS部署增加了两个新组件：ZooKeeper和ZKFailoverController（ZKFC）进程，如图3-20所示。ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。HA的自动故障转移依赖于ZooKeeper的以下功能：</p><p><strong>1．故障检测</strong></p><p>集群中的每个NameNode在ZooKeeper中维护了一个会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。</p><p><strong>2．现役NameNode选择</strong></p><p>ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode。</p><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><p><strong>1）健康监测</strong></p><p>ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</p><p><strong>2）ZooKeeper会话管理</strong></p><p>当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。</p><p><strong>3）基于ZooKeeper的选择</strong></p><p>如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。</p><p><img src="/2022/08/28/Hadoop/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/1661687659347.png" alt="1661687659347"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MR </tag>
            
            <tag> HDFS </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell的一些基本用法</title>
      <link href="/2022/08/27/shell/shell/"/>
      <url>/2022/08/27/shell/shell/</url>
      
        <content type="html"><![CDATA[<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><h3 id="1-1基本规则"><a href="#1-1基本规则" class="headerlink" title="1.1基本规则"></a>1.1基本规则</h3><p>（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p><p>（2）等号两侧不能有空格</p><p>（3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。</p><p>（4）变量的值如果有空格，需要使用双引号或单引号括起来。</p><h3 id="1-2特殊变量"><a href="#1-2特殊变量" class="headerlink" title="1.2特殊变量"></a>1.2特殊变量</h3><h4 id="1-2-1-n"><a href="#1-2-1-n" class="headerlink" title="1.2.1$n"></a>1.2.1$n</h4><p>$n   （功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch parameter.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class="line">./parameter.sh  cls   xz</span><br></pre></td></tr></table></figure><h4 id="1-2-2"><a href="#1-2-2" class="headerlink" title="1.2.2 $#"></a>1.2.2 $#</h4><p>$#      （功能描述：获取所有输入参数个数，常用于循环）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line">echo $#</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class="line">parameter.sh cls xz </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="1-2-3-、"><a href="#1-2-3-、" class="headerlink" title="1.2.3 $* 、$@"></a>1.2.3 $* 、$@</h4><p>$*   （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p>$@  （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p><p> *<em>注意：如果想让$<em>和$@ 体现区别必须用双引号括起来才生效</em></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line">echo $#</span><br><span class="line">echo $*</span><br><span class="line">echo $@</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3</span><br><span class="line">parameter.sh  1   2</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>$*和$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数。</p><p>当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数。</p><h4 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2.4 $?"></a>1.2.4 $?</h4><p>$？  （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ ./helloworld.sh </span><br><span class="line">hello world</span><br><span class="line">[atguigu@hadoop101 datas]$ echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="2-条件判断"><a href="#2-条件判断" class="headerlink" title="2.条件判断"></a>2.条件判断</h2><p>（1）两个整数之间比较</p><p>&#x3D;&#x3D; 字符串比较</p><p>-lt 小于（less than）                  -le 小于等于（less equal）</p><p>-eq 等于（equal）                     -gt 大于（greater than）</p><p>-ge 大于等于（greater equal）   -ne 不等于（Not equal）</p><p>（2）按照文件权限进行判断</p><p>-r 有读的权限（read）              -w 有写的权限（write）</p><p>-x 有执行的权限（execute）</p><p>（3）按照文件类型进行判断</p><p>-f 文件存在并且是一个常规的文件（file）</p><p>-e 文件存在（existence）          -d 文件存在并是一个目录（directory）</p><h2 id="3-流程判断"><a href="#3-流程判断" class="headerlink" title="3.流程判断"></a>3.流程判断</h2><h3 id="3-1if判断"><a href="#3-1if判断" class="headerlink" title="3.1if判断"></a>3.1if判断</h3><p>输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch if.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim if.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $1 -eq &quot;1&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;banzhang zhen shuai&quot;</span><br><span class="line">elif [ $1 -eq &quot;2&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;cls zhen mei&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 if.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ ./if.sh 1</span><br><span class="line">banzhang zhen shuai</span><br></pre></td></tr></table></figure><h3 id="3-2-case语句"><a href="#3-2-case语句" class="headerlink" title="3.2 case语句"></a>3.2 case语句</h3><p>输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出renyao。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch case.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim case.sh</span><br><span class="line"></span><br><span class="line">!/bin/bash</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;banzhang&quot;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;cls&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">        echo &quot;renyao&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 case.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ ./case.sh 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="3-3-for循环"><a href="#3-3-for循环" class="headerlink" title="3.3 for循环"></a>3.3 for循环</h3><p>从1加到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!bin/bash</span></span><br><span class="line"></span><br><span class="line">s=0</span><br><span class="line">for((i=0;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">s=$[$s+$i]</span><br><span class="line">done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch for2.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim for2.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印数字</span></span><br><span class="line"></span><br><span class="line">for i in $*</span><br><span class="line">    do</span><br><span class="line">      echo &quot;ban zhang love $i &quot;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 for2.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ bash for2.sh cls xz bd</span><br><span class="line">ban zhang love cls</span><br><span class="line">ban zhang love xz</span><br><span class="line">ban zhang love bd</span><br></pre></td></tr></table></figure><h3 id="3-4-while循环"><a href="#3-4-while循环" class="headerlink" title="3.4 while循环"></a>3.4 while循环</h3><p>从1加到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch while.sh</span><br><span class="line">[atguigu@hadoop101 datas]$ vim while.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">s=0</span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">        s=$[$s+$i]</span><br><span class="line">        i=$[$i+1]</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $s</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 while.sh </span><br><span class="line">[atguigu@hadoop101 datas]$ ./while.sh </span><br><span class="line">5050</span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1-basename"><a href="#4-1-basename" class="headerlink" title="4.1 basename"></a>4.1 basename</h3><p>该函数的作用就是用来获取某一个路径下文件的名字，其实就是把最后一个&#x2F;字符后的字符串显示出来。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt </span><br><span class="line">banzhang.txt</span><br><span class="line">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt</span><br><span class="line">banzhang</span><br></pre></td></tr></table></figure><h3 id="4-2-dirname"><a href="#4-2-dirname" class="headerlink" title="4.2 dirname"></a>4.2 dirname</h3><p>  dirname 文件绝对路径       （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt </span><br><span class="line">/home/atguigu</span><br></pre></td></tr></table></figure><h2 id="5-shell工具"><a href="#5-shell工具" class="headerlink" title="5.shell工具"></a>5.shell工具</h2><h3 id="5-1-cut"><a href="#5-1-cut" class="headerlink" title="5.1 cut"></a>5.1 cut</h3><p>​cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><p>cut [选项参数]  filename</p><p>说明：默认分隔符是制表符</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>列号，提取第几列</td></tr><tr><td>-d</td><td>分隔符，按照指定分隔符分割列</td></tr><tr><td>-c</td><td>指定具体的字符</td></tr></tbody></table><p>（1）数据准备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch cut.txt</span><br><span class="line">[atguigu@hadoop101 datas]$ vim cut.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo  wo</span><br><span class="line">lai  lai</span><br><span class="line">le  le</span><br></pre></td></tr></table></figure><p>（2）切割cut.txt第一列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cut -d &quot; &quot; -f 1 cut.txt </span><br><span class="line">dong</span><br><span class="line">guan</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br></pre></td></tr></table></figure><p>（3）切割cut.txt第二、三列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cut -d &quot; &quot; -f 2,3 cut.txt </span><br><span class="line">shen</span><br><span class="line">zhen</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br></pre></td></tr></table></figure><p>（4）在cut.txt文件中切割出guan</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ cat cut.txt | grep &quot;guan&quot; | cut -d &quot; &quot; -f 1</span><br><span class="line"></span><br><span class="line">guan</span><br></pre></td></tr></table></figure><p>（5）选取系统PATH变量值，第2个“：”开始后的所有路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ echo $PATH</span><br><span class="line">/usr/lib64/qt3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br><span class="line">[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 2-</span><br><span class="line">/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br></pre></td></tr></table></figure><h3 id="5-2-awk"><a href="#5-2-awk" class="headerlink" title="5.2 awk"></a>5.2 awk</h3><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><p>awk [选项参数] ‘pattern1{action1}  pattern2{action2}…’ filename</p><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>action：在找到匹配内容时所执行的一系列命令</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件折分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><p>（1）数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ sudo cp /etc/passwd ./</span><br></pre></td></tr></table></figure><p>（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $7&#125;&#x27; passwd </span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>（3）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd </span><br><span class="line"></span><br><span class="line">root,/bin/bash</span><br></pre></td></tr></table></figure><p>注意：只有匹配了pattern的行才会执行action</p><p>（4）只显示&#x2F;etc&#x2F;passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加”dahaige，&#x2F;bin&#x2F;zuishuai”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class="line">user, shell</span><br><span class="line">root,/bin/bash</span><br><span class="line">bin,/sbin/nologin</span><br><span class="line">atguigu,/bin/bash</span><br><span class="line">dahaige,/bin/zuishuai</span><br></pre></td></tr></table></figure><p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p><p>（5）将passwd文件中的用户id增加数值1并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -v i=1 -F: &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读的记录数（行数）</td></tr><tr><td>NF</td><td>浏览记录的域的个数（切割后，列的个数）</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk -F: &#x27;&#123;print &quot;filename:&quot;  FILENAME &quot;, linenumber:&quot; NR  &quot;,columns:&quot; NF&#125;&#x27; passwd </span><br><span class="line">filename:passwd, linenumber:1,columns:7</span><br><span class="line">filename:passwd, linenumber:2,columns:7</span><br><span class="line">filename:passwd, linenumber:3,columns:7</span><br></pre></td></tr></table></figure><p>查询cut.txt中空行所在的行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ awk &#x27;/^$/&#123;print NR&#125;&#x27; cut.txt </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="5-3-sort"><a href="#5-3-sort" class="headerlink" title="5.3 sort"></a>5.3 sort</h3><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p>（1）数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ touch sort.sh</span><br><span class="line">[atguigu@hadoop102 datas]$ vim sort.sh </span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">xz:50:2.3</span><br><span class="line">cls:10:3.5</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><p>（2）按照“：”分割后的第三列倒序排序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh </span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">cls:10:3.5</span><br><span class="line">xz:50:2.3</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><h2 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6.正则表达式"></a>6.正则表达式</h2><p><strong>^</strong></p><p>该字符匹配一行的开头，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep ^a</span><br></pre></td></tr></table></figure><p>会匹配所以以a开头的行</p><p><strong>$</strong></p><p>该字符匹配一行的结束，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep t$</span><br></pre></td></tr></table></figure><p>会匹配出所有以t结尾的行</p><p><strong>^$同时出现代表匹配空行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | grep -v &quot;^$&quot;  //这句话表示过滤test.txt文件内容中的所有空格并输出其他内容</span><br></pre></td></tr></table></figure><p><strong>.</strong></p><p>该字符匹配一个任意的字符，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep r..t</span><br></pre></td></tr></table></figure><p>会匹配包含rabt,rbbt,rxdt,root等的所有行</p><p><strong>*</strong></p><p>* 不单独使用，他和左边第一个字符连用，表示匹配上一个字符0次或多次，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep ro*t</span><br></pre></td></tr></table></figure><p>会匹配rt, rot, root, rooot, roooot等所有行</p><p>.*代表任意字符串</p><p><strong>[]</strong></p><p>[ ] 表示匹配某个范围内的一个字符，例如</p><p>[6,8]——匹配6或者8</p><p>[a-z]——匹配一个a-z之间的字符</p><p>[a-z]*—–匹配任意字母字符串</p><p>[a-c, e-f]-匹配a-c或者e-f之间的任意字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 datas]$ cat /etc/passwd | grep r[a,b,c]*t</span><br></pre></td></tr></table></figure><p>会匹配rat, rbt, rabt, rbact等等所有行</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
            <tag> awk </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-帮助指令"><a href="#1-帮助指令" class="headerlink" title="1.帮助指令"></a>1.帮助指令</h2><h3 id="1-1-man-获得帮助信息"><a href="#1-1-man-获得帮助信息" class="headerlink" title="1.1 man 获得帮助信息"></a>1.1 man 获得帮助信息</h3><p><strong>基本用法</strong></p><p>man [命令或者配置文件]</p><p><strong>显示说明</strong></p><table><thead><tr><th>信息</th><th>功能</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的深入讨论</td></tr><tr><td>EXAMPLES</td><td>怎样使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题（通常是手册页）</td></tr></tbody></table><p><strong>实例操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="1-2-help获得shell内置命令的帮助信息"><a href="#1-2-help获得shell内置命令的帮助信息" class="headerlink" title="1.2 help获得shell内置命令的帮助信息"></a>1.2 help获得shell内置命令的帮助信息</h3><p><strong>基本语法</strong></p><p>help  命令</p><h3 id="1-3-常用快捷键"><a href="#1-3-常用快捷键" class="headerlink" title="1.3 常用快捷键"></a>1.3 常用快捷键</h3><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏；彻底清屏是：reset</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr><tr><td>ctrl +alt</td><td>linux和Windows之间切换</td></tr></tbody></table><h2 id="2-文件目录类"><a href="#2-文件目录类" class="headerlink" title="2.文件目录类"></a>2.文件目录类</h2><p>自己熟悉的一些指令就不再整理，记录一些自己没有掌握的指令</p><h3 id="2-1more-文件内容分屏查看器"><a href="#2-1more-文件内容分屏查看器" class="headerlink" title="2.1more 文件内容分屏查看器"></a>2.1more 文件内容分屏查看器</h3><p>​more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明。</p><p><strong>基本用法</strong></p><p>more 要查看的文件</p><p><strong>操作说明</strong></p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>&#x3D;</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h3 id="2-2-less-分屏显示文件内容"><a href="#2-2-less-分屏显示文件内容" class="headerlink" title="2.2 less 分屏显示文件内容"></a>2.2 less 分屏显示文件内容</h3><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p><strong>基本用法</strong></p><p>less 要查看的文件</p><p><strong>操作用法</strong></p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻动一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>&#x2F;字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr><tr><td>q</td><td>离开 less 这个程序；</td></tr></tbody></table><h3 id="2-3-gt-输出重定向和-gt-gt-追加"><a href="#2-3-gt-输出重定向和-gt-gt-追加" class="headerlink" title="2.3 &gt; 输出重定向和 &gt;&gt; 追加"></a>2.3 &gt; 输出重定向和 &gt;&gt; 追加</h3><p><strong>基本语法:</strong></p><ol><li>ls -l &gt; 文件   （功能描述：把查询出来的列表内容写入到文件中去，覆盖写）</li><li>ls -al  &gt;&gt; 文件   （功能描述：把查询出来的列表内容写入到文件中去，追加写）</li><li>cat 文件1 &gt; 文件2     （功能描述：将文件1的内容覆盖到文件2）</li></ol><h3 id="2-4-history-查看以及执行过的历史命令"><a href="#2-4-history-查看以及执行过的历史命令" class="headerlink" title="2.4 history 查看以及执行过的历史命令"></a>2.4 history 查看以及执行过的历史命令</h3><p><strong>基本语法</strong>:</p><p>history</p><h2 id="3-时间日期类"><a href="#3-时间日期类" class="headerlink" title="3.时间日期类"></a>3.时间日期类</h2><h3 id="3-1date显示当前时间"><a href="#3-1date显示当前时间" class="headerlink" title="3.1date显示当前时间"></a>3.1date显示当前时间</h3><p><strong>基本用法：</strong></p><ul><li>date                                                       （功能描述：显示当前时间）</li><li>date +%Y                                               （功能描述：显示当前年份）</li><li>date +%m                                              （功能描述：显示当前月份）</li><li>date +%d                                               （功能描述：显示当前是哪一天）</li><li>date “+%Y-%m-%d %H:%M:%S”         （功能描述：显示年月日时分秒）</li></ul><h3 id="3-2date显示非当前时间"><a href="#3-2date显示非当前时间" class="headerlink" title="3.2date显示非当前时间"></a>3.2date显示非当前时间</h3><p><strong>基本用法：</strong></p><ul><li>date -d ‘1 days ago’               （功能描述：显示前一天时间）</li><li>date -d ‘-1 days ago’               （功能描述：显示后一天时间）</li></ul><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661590484981.png" alt="1661590484981"></p><h3 id="3-3date设置系统时间"><a href="#3-3date设置系统时间" class="headerlink" title="3.3date设置系统时间"></a>3.3date设置系统时间</h3><p><strong>基本用法：</strong> </p><p>date -s 字符串时间</p><h3 id="3-4-cal查看日历"><a href="#3-4-cal查看日历" class="headerlink" title="3.4 cal查看日历"></a>3.4 cal查看日历</h3><p>基本用法：</p><ul><li>cal</li><li>cal   时间</li></ul><h2 id="4-用户管理命令"><a href="#4-用户管理命令" class="headerlink" title="4.用户管理命令"></a>4.用户管理命令</h2><h3 id="4-1-useradd添加新用户"><a href="#4-1-useradd添加新用户" class="headerlink" title="4.1 useradd添加新用户"></a>4.1 useradd添加新用户</h3><p><strong>基本用法：</strong></p><ul><li>useradd 用户名                   （功能描述：添加新用户）</li><li>useradd -g 组名 用户名      （功能描述：添加新用户到某个组）</li></ul><h3 id="4-2-passwd设置用户密码"><a href="#4-2-passwd设置用户密码" class="headerlink" title="4.2 passwd设置用户密码"></a>4.2 passwd设置用户密码</h3><p><strong>基本用法：</strong></p><p>​passwd 用户名     （功能描述：设置用户密码）</p><h3 id="4-3-su-切换用户"><a href="#4-3-su-切换用户" class="headerlink" title="4.3 su 切换用户"></a>4.3 su 切换用户</h3><p><strong>基本用法</strong></p><ul><li>su 用户名称   （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量）</li><li>su - 用户名称       （功能描述：切换到用户并获得该用户的环境变量及执行权限）</li></ul><h3 id="4-4userdel删除用户"><a href="#4-4userdel删除用户" class="headerlink" title="4.4userdel删除用户"></a>4.4userdel删除用户</h3><p><strong>基本用法</strong></p><ul><li>userdel  用户名         （功能描述：删除用户但保存用户主目录）</li><li>userdel -r 用户名       （功能描述：用户和用户主目录，都删除）</li></ul><h3 id="4-5-who-查看登录用户信息"><a href="#4-5-who-查看登录用户信息" class="headerlink" title="4.5 who 查看登录用户信息"></a>4.5 who 查看登录用户信息</h3><p><strong>基本用法</strong></p><ul><li>whoami                （功能描述：显示自身用户名称）</li><li>who am i             （功能描述：显示登录用户的用户名以及登陆时间）</li></ul><h3 id="4-6-sudo-设置普通用户具有root权限"><a href="#4-6-sudo-设置普通用户具有root权限" class="headerlink" title="4.6 sudo 设置普通用户具有root权限"></a>4.6 sudo 设置普通用户具有root权限</h3><p>（1）修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;sudoers 文件，找到下面一行(91行)，在root下面添加一行，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root       ALL=(ALL)     ALL</span><br><span class="line">用户名   ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>或者配置成采用sudo命令时，不需要输入密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root       ALL=(ALL)     ALL</span><br><span class="line">用户名   ALL=(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>修改完毕，现在可以用此用户登录，然后用命令 sudo ，即可获得root权限进行</p><h2 id="5-用户组管理命令"><a href="#5-用户组管理命令" class="headerlink" title="5.用户组管理命令"></a>5.用户组管理命令</h2><p>​每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，</p><p>​如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>​用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><h3 id="5-1groupdel删除组"><a href="#5-1groupdel删除组" class="headerlink" title="5.1groupdel删除组"></a>5.1groupdel删除组</h3><p><strong>基本用法</strong></p><p>​groupdel 组名</p><h3 id="5-2-groupadd增加组"><a href="#5-2-groupadd增加组" class="headerlink" title="5.2 groupadd增加组"></a>5.2 groupadd增加组</h3><p><strong>基本用法</strong></p><p>​groupadd组名</p><h3 id="5-3-groupmod-修改组"><a href="#5-3-groupmod-修改组" class="headerlink" title="5.3 groupmod 修改组"></a>5.3 groupmod 修改组</h3><p><strong>基本用法：</strong></p><p>​groupmod -n 新组名 老组名</p><h2 id="6-文件权限类"><a href="#6-文件权限类" class="headerlink" title="6.文件权限类"></a>6.文件权限类</h2><h3 id="6-1文件属性"><a href="#6-1文件属性" class="headerlink" title="6.1文件属性"></a>6.1文件属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在Linux中我们可以使用ll或者ls -l命令来显示一个文件的属性以及文件所属的用户和组。</p><p><strong>从左到右的10个字符表示，如下所示</strong></p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661591332772.png" alt="1661591332772"></p><p>（1）0首位表示类型</p><p>​在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>​<strong>- 代表文件</strong></p><p>​ <strong>d 代表目录</strong></p><p>​ <strong>l 链接文档(link file)；</strong></p><p>（2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p><p>（3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p><p>（4）第7-9位确定其他用户拥有该文件的权限 —Other</p><p><strong>rxw作用文件和目录的不同解释</strong></p><p>（1）作用到文件：</p><p>​[ r ]代表可读(read): 可以读取，查看</p><p>​[ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</p><p>​[ x ]代表可执行(execute):可以被系统执行</p><p>（2）作用到目录：</p><p>​[ r ]代表可读(read): 可以读取，ls查看目录内容</p><p>​[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>​[ x ]代表可执行(execute):可以进入该目录</p><h3 id="6-2chmod改变权限"><a href="#6-2chmod改变权限" class="headerlink" title="6.2chmod改变权限"></a>6.2chmod改变权限</h3><p>有两种改变权限的方式</p><p><strong>第一种:</strong></p><p>​chown  [{ugoa}{+-&#x3D;}{rwx}] 文件或目录</p><p>​u 就是当前用户 g是当前用户组  o是其它用户 a是所有</p><p>​使用案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x houge.txt</span><br></pre></td></tr></table></figure><p><strong>第二种（较为常用）：</strong></p><p>​例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 777 a.txt</span><br></pre></td></tr></table></figure><p>​r&#x3D;4 w&#x3D;2 x&#x3D;1        rwx&#x3D;4+2+1&#x3D;7</p><p>​上述这个777代表用户组 用户 其它用户对于该文件都有读、写、执行权限</p><h3 id="6-3-chown改变所有者"><a href="#6-3-chown改变所有者" class="headerlink" title="6.3 chown改变所有者"></a>6.3 chown改变所有者</h3><p><strong>基本用法：</strong></p><p>​chown [选项] [最终用户] [文件或目录]            （功能描述：改变文件或者目录的所有者）</p><p><strong>选项说明：</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><h3 id="6-4-chgrp改变用户所属组"><a href="#6-4-chgrp改变用户所属组" class="headerlink" title="6.4 chgrp改变用户所属组"></a>6.4 chgrp改变用户所属组</h3><p><strong>基本用法：</strong></p><p>​chgrp [最终用户组] [文件或目录]      （功能描述：改变文件或者目录的所属组）</p><h2 id="7-搜索查找类"><a href="#7-搜索查找类" class="headerlink" title="7.搜索查找类"></a>7.搜索查找类</h2><h3 id="7-1find查找问而建或目录"><a href="#7-1find查找问而建或目录" class="headerlink" title="7.1find查找问而建或目录"></a>7.1find查找问而建或目录</h3><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p><p><strong>基本用法</strong></p><p>​find [搜索范围] [选项]</p><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件,单位为:    <strong>b</strong> —— 块（512字节）   <strong>c</strong> —— 字节   <strong>w</strong> —— 字（2字节）   <strong>k</strong> —— 千字节   <strong>M</strong> —— 兆字节   <strong>G</strong> —— 吉字节</td></tr></tbody></table><p><strong>案例实操</strong></p><p>按文件大小：在&#x2F;home目录下查找大于200m的文件（+n 大于  -n小于   n等于）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -size +204800</span><br></pre></td></tr></table></figure><h3 id="7-2-grep-过滤查找以及“-”管道符"><a href="#7-2-grep-过滤查找以及“-”管道符" class="headerlink" title="7.2 grep 过滤查找以及“|”管道符"></a>7.2 grep 过滤查找以及“|”管道符</h3><p>​管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p><p><strong>基本语法</strong></p><p>​grep 选项 查找内容 源文件</p><h2 id="8-压缩和解压类"><a href="#8-压缩和解压类" class="headerlink" title="8.压缩和解压类"></a>8.压缩和解压类</h2><h3 id="8-1gzip-x2F-gunzip压缩"><a href="#8-1gzip-x2F-gunzip压缩" class="headerlink" title="8.1gzip&#x2F;gunzip压缩"></a>8.1gzip&#x2F;gunzip压缩</h3><p><strong>基本用法</strong></p><ul><li>gzip 文件             （功能描述：压缩文件，只能将文件压缩为*.gz文件）</li><li>gunzip 文件.gz     （功能描述：解压缩文件命令）</li></ul><p><strong>详细说明</strong></p><p>（1）只能压缩文件不能压缩目录</p><p>（2）不保留原来的文件</p><p>（3）同时多个文件会产生多个压缩包</p><h3 id="8-2-zip-x2F-unzip压缩"><a href="#8-2-zip-x2F-unzip压缩" class="headerlink" title="8.2 zip&#x2F;unzip压缩"></a>8.2 zip&#x2F;unzip压缩</h3><p><strong>基本用法</strong></p><ul><li>zip  [选项] XXX.zip  将要压缩的内容           （功能描述：压缩文件和目录的命令）</li><li>unzip [选项] XXX.zip                                      （功能描述：解压缩文件）</li></ul><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip选项</th><th>功能</th></tr></thead><tbody><tr><td>-d&lt;目录&gt;</td><td>指定解压后文件的存放目录</td></tr></tbody></table><h3 id="8-3-tar打包"><a href="#8-3-tar打包" class="headerlink" title="8.3 tar打包"></a>8.3 tar打包</h3><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p><strong>案例实操</strong></p><p>（1）压缩多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 opt]# tar -zcvf houma.tar.gz houge.txt bailongma.txt </span><br><span class="line">houge.txt</span><br><span class="line">bailongma.txt</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houma.tar.gz houge.txt bailongma.txt </span><br></pre></td></tr></table></figure><p>（2）压缩目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zcvf xiyou.tar.gz xiyou/</span><br><span class="line">xiyou/</span><br><span class="line">xiyou/mingjie/</span><br><span class="line">xiyou/dssz/</span><br><span class="line">xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure><p>（3）解压到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf xiyou.tar.gz -C /opt</span><br><span class="line">[root@hadoop101 ~]# ll /opt/</span><br></pre></td></tr></table></figure><h2 id="9-磁盘分区类"><a href="#9-磁盘分区类" class="headerlink" title="9.磁盘分区类"></a>9.磁盘分区类</h2><h3 id="9-1df-查看磁盘空间使用情况"><a href="#9-1df-查看磁盘空间使用情况" class="headerlink" title="9.1df 查看磁盘空间使用情况"></a>9.1df 查看磁盘空间使用情况</h3><p><strong>常用指令</strong></p><p>df -h</p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661594172359.png" alt="1661594172359"></p><h3 id="9-2fdisk查看分区"><a href="#9-2fdisk查看分区" class="headerlink" title="9.2fdisk查看分区"></a>9.2fdisk查看分区</h3><p>fdisk -l                  （功能描述：查看磁盘分区详情）</p><p><img src="/2022/08/27/Linux/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/1661594255981.png" alt="1661594255981"></p><h3 id="9-3-mount-x2F-umount-挂载-x2F-卸载"><a href="#9-3-mount-x2F-umount-挂载-x2F-卸载" class="headerlink" title="9.3 mount&#x2F;umount 挂载&#x2F;卸载"></a>9.3 mount&#x2F;umount 挂载&#x2F;卸载</h3><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。</p><p>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p><h2 id="10-进程线程类"><a href="#10-进程线程类" class="headerlink" title="10.进程线程类"></a>10.进程线程类</h2><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><h3 id="10-1-ps查看当前系统进程状态"><a href="#10-1-ps查看当前系统进程状态" class="headerlink" title="10.1 ps查看当前系统进程状态"></a>10.1 ps查看当前系统进程状态</h3><p>基本指令</p><ul><li>ps -aux | grep xxx          （功能描述：查看系统中所有进程）</li><li>ps -ef | grep xxx           （功能描述：可以查看子父进程之间的关系）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>选择所有进程</td></tr><tr><td>-u</td><td>显示所有用户的所有进程</td></tr><tr><td>-x</td><td>显示没有终端的进程</td></tr></tbody></table><h3 id="10-2-kill终止进程"><a href="#10-2-kill终止进程" class="headerlink" title="10.2 kill终止进程"></a>10.2 kill终止进程</h3><ul><li>kill  [选项] 进程号            （功能描述：通过进程号杀死进程）</li><li>killall 进程名称                  （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table><h3 id="10-3-pstree-查看进程树"><a href="#10-3-pstree-查看进程树" class="headerlink" title="10.3 pstree 查看进程树"></a>10.3 pstree 查看进程树</h3><p>pstree [选项]</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>显示进程的PID</td></tr><tr><td>-u</td><td>显示进程的所属用户</td></tr></tbody></table><h3 id="10-4-top查看系统健康状态"><a href="#10-4-top查看系统健康状态" class="headerlink" title="10.4 top查看系统健康状态"></a>10.4 top查看系统健康状态</h3><p>top [选项]</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令：</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程。</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态。</td></tr></tbody></table><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 atguigu]# top -d 1</span><br><span class="line">[root@hadoop101 atguigu]# top -i</span><br><span class="line">[root@hadoop101 atguigu]# top -p 2575</span><br></pre></td></tr></table></figure><p>执行上述命令后，可以按P、M、N对查询出的进程结果进行排序。</p><h3 id="10-5-netstat-显示网络统计信息和端口占用情况"><a href="#10-5-netstat-显示网络统计信息和端口占用情况" class="headerlink" title="10.5 netstat 显示网络统计信息和端口占用情况"></a>10.5 netstat 显示网络统计信息和端口占用情况</h3><ul><li>netstat -anp | grep 进程号     （功能描述：查看该进程网络信息）</li><li>netstat –nlp | grep 端口号     （功能描述：查看网络端口号占用情况）</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出有在listen（监听）的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><h2 id="11-RPM"><a href="#11-RPM" class="headerlink" title="11.RPM"></a>11.RPM</h2><h3 id="11-1RPM概述"><a href="#11-1RPM概述" class="headerlink" title="11.1RPM概述"></a>11.1RPM概述</h3><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe</p><p> 是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</p><p>RPM包的名称格式</p><p>Apache-1.3.23-11.i386.rpm</p><p>-        “apache” 软件名称</p><p>-        “1.3.23-11”软件的版本号，主版本和此版本</p><p>-        “i386”是软件所运行的硬件平台，Intel 32位处理器的统称</p><p>-        “rpm”文件扩展名，代表RPM包</p><h3 id="11-2RPM查询命令（rpm-qa）"><a href="#11-2RPM查询命令（rpm-qa）" class="headerlink" title="11.2RPM查询命令（rpm -qa）"></a>11.2RPM查询命令（rpm -qa）</h3><p>rpm -qa                        （功能描述：查询所安装的所有rpm软件包）</p><p>由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包</p><h3 id="11-3RPM卸载命令（rpm-e）"><a href="#11-3RPM卸载命令（rpm-e）" class="headerlink" title="11.3RPM卸载命令（rpm -e）"></a>11.3RPM卸载命令（rpm -e）</h3><p>（1）rpm -e RPM软件包   </p><p>（2） rpm -e –nodeps 软件包  </p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table><h3 id="11-4RPM安装命令（rpm-ivh）"><a href="#11-4RPM安装命令（rpm-ivh）" class="headerlink" title="11.4RPM安装命令（rpm -ivh）"></a>11.4RPM安装命令（rpm -ivh）</h3><p>rpm -ivh RPM包全名</p><table><thead><tr><th>-i</th><th>-i&#x3D;install，安装</th></tr></thead><tbody><tr><td>-v</td><td>-v&#x3D;verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h&#x3D;hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置以及系统管理操作</title>
      <link href="/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-修改静态IP地址"><a href="#1-修改静态IP地址" class="headerlink" title="1.修改静态IP地址"></a>1.修改静态IP地址</h2><p>查看IP配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="/2022/08/27/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/1661588159742.png" alt="1661588159742"></p><p>修改完配置文件之后执行service network restart 重启网络然后就修改成功</p><h2 id="2-修改主机名称"><a href="#2-修改主机名称" class="headerlink" title="2.修改主机名称"></a>2.修改主机名称</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><p>修改完成之后需要重启电脑才能生效</p><h2 id="3-修改hosts映射文件"><a href="#3-修改hosts映射文件" class="headerlink" title="3.修改hosts映射文件"></a>3.修改hosts映射文件</h2><h3 id="3-1修改Linux的映射文件"><a href="#3-1修改Linux的映射文件" class="headerlink" title="3.1修改Linux的映射文件"></a>3.1修改Linux的映射文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加如下内容即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.100 hadoop100</span><br><span class="line">192.168.2.101 hadoop101</span><br><span class="line">192.168.2.102 hadoop102</span><br><span class="line">192.168.2.103 hadoop103</span><br><span class="line">192.168.2.104 hadoop104</span><br><span class="line">192.168.2.105 hadoop105</span><br></pre></td></tr></table></figure><h3 id="3-2修改Windows的主机映射文件"><a href="#3-2修改Windows的主机映射文件" class="headerlink" title="3.2修改Windows的主机映射文件"></a>3.2修改Windows的主机映射文件</h3><p>（1）进入C:\Windows\System32\drivers\etc路径</p><p>（2）拷贝hosts文件到桌面</p><p>（3）打开桌面hosts文件并添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.100 hadoop100</span><br><span class="line">192.168.2.101 hadoop101</span><br><span class="line">192.168.2.102 hadoop102</span><br><span class="line">192.168.2.103 hadoop103</span><br><span class="line">192.168.2.104 hadoop104</span><br><span class="line">192.168.2.105 hadoop105</span><br></pre></td></tr></table></figure><p>（4）将桌面hosts文件覆盖C:\Windows\System32\drivers\etc路径hosts文件</p><h2 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4.关闭防火墙"></a>4.关闭防火墙</h2><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start|stop|restart|status  服务名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable service_name  （功能描述：关掉指定服务的自动启动）</span><br><span class="line">systemctl enable service_name   （功能描述：开启指定服务的自动启动）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 静态IP </tag>
            
            <tag> 修改windos主机映射 </tag>
            
            <tag> 关闭防火墙 </tag>
            
            <tag> systemctl指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-VIM编辑器是什么"><a href="#1-VIM编辑器是什么" class="headerlink" title="1.VIM编辑器是什么"></a>1.VIM编辑器是什么</h2><p>VI是Unix操作系统和类Unix操作系统中最通用的文本编辑器。</p><p>VIM编辑器是从VI发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。VIM与VI编辑器完全兼容。</p><h2 id="2-VIM编辑器的三种模式的切换"><a href="#2-VIM编辑器的三种模式的切换" class="headerlink" title="2.VIM编辑器的三种模式的切换"></a>2.VIM编辑器的三种模式的切换</h2><p><img src="/2022/08/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/1661585762482.png" alt="1661585762482"></p><p>主要包括三种模式：一般模式、编辑模式、命令模式</p><p>一般模式就是进入一个文件的状态，然后我们可以按i、a、o进入编辑模式，在编辑模式下可以操作文件内容，然后使用ESC进入一般模式，一般模式下使用：可以进入命令模式，在命令模式下我们可以对文件进行保存更改等</p><h2 id="3-一般模式下常用命令"><a href="#3-一般模式下常用命令" class="headerlink" title="3.一般模式下常用命令"></a>3.一般模式下常用命令</h2><p>以vi打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，<br>你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数据。</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td>p</td><td>箭头移动到目的行粘贴</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td>x</td><td>剪切一个字母，相当于del</td></tr><tr><td>X</td><td>剪切一个字母，相当于Backspace</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>shift+6（^）</td><td>移动到行头</td></tr><tr><td>shift+4 （$）</td><td>移动到行尾</td></tr><tr><td>1+shift+g</td><td>移动到页头，数字</td></tr><tr><td>shift+g</td><td>移动到页尾</td></tr><tr><td>数字+shift+g</td><td>移动到目标行</td></tr></tbody></table><h2 id="4-编辑模式"><a href="#4-编辑模式" class="headerlink" title="4.编辑模式"></a>4.编辑模式</h2><p>在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要等到你按下『i, I, o, O, a, A』等任何一个字母之后才会进入编辑模式。</p><p>注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。</p><h2 id="5-指令模式"><a href="#5-指令模式" class="headerlink" title="5.指令模式"></a>5.指令模式</h2><p>在一般模式当中，输入『 : &#x2F; ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。</p><p>在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>&#x2F;要查找的词</td><td>n 查找下一个，N 往上查找</td></tr><tr><td>:noh</td><td>取消高亮显示</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>:%s&#x2F;old&#x2F;new&#x2F;g</td><td>替换内容   &#x2F;g就是把找到的老的字符全部匹配成新的字符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VIM </tag>
            
            <tag> VI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>在Linux中万物皆是文件</p><p>其目录结构如下图所示：</p><p><img src="/2022/08/27/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/1661584969351.png" alt="1661584969351"></p><p>其目录结构简介如下：</p><ul><li><p>&#x2F;bin</p><p>是Binary的缩写，这个目录下存放着最经常使用的命令</p></li><li><p>&#x2F;sbin</p><p>s 就是Super User的意思，这里存放的是系统管理员所使用的系统管理程序</p></li><li><p>&#x2F;home</p><p>存放普通用户的主目录，在Linux中每一个用户都有自己的一个目录，一般这个目录名就是此用户的账号名字</p></li><li><p>&#x2F;root</p><p>该目录就是系统管理员，也称为超级权限者的用户主目录</p></li><li><p>&#x2F;etc</p><p>所有的系统管理所需要的配置文件和子目录</p></li><li><p>&#x2F;usr</p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files文件夹</p></li><li><p>&#x2F;boot</p><p>这里存放的是启动Linux的一些核心文件，包括一些连接文件以及镜像文件，自己的安装不要放在此目录下</p></li><li><p>&#x2F;mnt</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载到&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里面的内容了</p></li><li><p>&#x2F;opt</p><p>这是给主机额外安装软件所摆放的目录，比如你安装一个MySQL数据库就可以放到这个目录下。这个目录是一些大型软件的安装目录，或者是一些服务程序的安装目录 。</p></li><li><p>&#x2F;var</p><p>这个目录存放着不断扩充的东西，我们习惯把那些经常被修改的目录放到这个目录下面，包括各种文件日志</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux中的文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接池</title>
      <link href="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库连接池"><a href="#1-数据库连接池" class="headerlink" title="1.数据库连接池"></a>1.数据库连接池</h2><h3 id="1-1数据库连接池的必要性"><a href="#1-1数据库连接池的必要性" class="headerlink" title="1.1数据库连接池的必要性"></a>1.1数据库连接池的必要性</h3><p>不使用数据库连接池存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证IP地址，用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>.若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li>对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而<strong>未能关闭</strong>，将会导致<strong>数据库系统中的内存泄漏</strong>，最终将导致重启数据库。</li><li>这种开发不能控制被创建的<strong>连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接<strong>过多</strong>，也可能导致<strong>内存泄漏，服务器崩溃</strong>。</li></ul><p>为解决传统开发中的数据库连接问题，可以采用<strong>数据库连接池技术（<strong><strong>connection pool</strong></strong>）</strong>。</p><p>​    <strong>数据库连接池的基本思想</strong>就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。数据库连接池负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572039707.png" alt="1661572039707"></p><p>数据库连接池技术的优点：</p><ul><li><p><strong>资源重用：</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p></li><li><p><strong>更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p></li><li><p><strong>新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p></li><li><p><strong>统一的连接管理，避免数据库连接泄露</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="1-2Druid数据源"><a href="#1-2Druid数据源" class="headerlink" title="1.2Druid数据源"></a>1.2Druid数据源</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，据说是目前最好的连接池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDruid</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">         <span class="comment">//测试获取超过最大连接数的连接数量（连接关闭、未关闭的情况）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2.ThreadLocal"></a>2.ThreadLocal</h2><p>JDK 1.2的版本中就提供java.lang.ThreadLocal，为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。</p><p>ThreadLocal用于保存某个线程共享变量，原因是在Java中，每一个线程对象中都有一个ThreadLocalMap&lt;ThreadLocal, Object&gt;，其key就是一个ThreadLocal，而Object即为该线程的共享变量。而这个map是通过ThreadLocal的set和get方法操作的。对于同一个static ThreadLocal，不同线程只能从中get，set，remove自己的变量，而不会影响其他线程的变量。</p><p>1、ThreadLocal.get: 获取ThreadLocal中当前线程共享变量的值。</p><p>2、ThreadLocal.set: 设置ThreadLocal中当前线程共享变量的值。</p><p>3、ThreadLocal.remove: 移除ThreadLocal中当前线程共享变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 从当前线程中获取数字</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (num == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//随机产生一个</span></span><br><span class="line">num = rand.nextInt(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 将数字与当前线程绑定</span></span><br><span class="line">threadLocal.set(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeNumber</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取当前线程中的数字</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (num != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 将数字从当前线程中移除</span></span><br><span class="line">threadLocal.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadLocal</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyRunnable</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;B--&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Tools.getNumber());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">Tools.removeNumber();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">a:<span class="number">3</span></span><br><span class="line">B--:<span class="number">53</span></span><br><span class="line">remove后</span><br><span class="line">a:<span class="number">9</span></span><br><span class="line">remove后</span><br><span class="line">B--:<span class="number">40</span></span><br><span class="line">a:<span class="number">9</span></span><br><span class="line">B--:<span class="number">40</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现ThreadLocal用于保存每一个线程共享变量，只要不删除remove，那么该值在该线程的生命周期中一直存在。</p><p>最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等。</p><h2 id="3-封装JDBCTools"><a href="#3-封装JDBCTools" class="headerlink" title="3.封装JDBCTools"></a>3.封装JDBCTools</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取连接或释放连接的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTools</span> &#123;</span><br><span class="line"><span class="comment">// 1、数据源,即连接池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、ThreadLocal对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1、读取druip.properties文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、连接连接池</span></span><br><span class="line">dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创 建 线 程 池</span></span><br><span class="line">threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 从当前线程中获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (connection == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 从连接池中获取一个连接</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = dataSource.getConnection();</span><br><span class="line"><span class="comment">// 将连接与当前线程绑定</span></span><br><span class="line">threadLocal.set(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放连接的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">releaseConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取当前线程中的连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line"><span class="comment">// 将已经关闭的连接从当前线程中移除</span></span><br><span class="line">threadLocal.remove();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-封装VasicDAOImpl"><a href="#4-封装VasicDAOImpl" class="headerlink" title="4.封装VasicDAOImpl"></a>4.封装VasicDAOImpl</h2><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息</p><p>作用：为了实现功能的模块化，更有利于代码的维护和升级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAOImpl</span> &#123;</span><br><span class="line"><span class="comment">//适用于insert,update,delete语句</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql,Object... args)</span> &#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line"><span class="comment">//2、创建PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、设置？的值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;<span class="comment">//数组的下标从0开始</span></span><br><span class="line">pst.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//？的序号从1开始</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、执行更新sql</span></span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//5、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">JdbcUtils.free();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T可能代表Department，Employee等各种Javabean的对象</span></span><br><span class="line"><span class="comment">//clazz是决定你查询的结果是Department，Employee类型中的那个对象</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ArrayList&lt;T&gt; <span class="title function_">getBeanList</span><span class="params">(Class&lt;T&gt; clazz, String sql,Object... args)</span>&#123;</span><br><span class="line"><span class="comment">//1、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、设置？的值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;<span class="comment">//数组的下标从0开始</span></span><br><span class="line">pst.setObject(i+<span class="number">1</span>, args[i]);<span class="comment">//？的序号从1开始</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结果集的元数据对象，该对象有对结果集的数据进行描述的相关信息</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsm</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//(1)获取结果集的列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> rsm.getColumnCount();</span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"><span class="comment">//5、把ResultSet结果集中的数据封装到一个一个JavaBean对象中，并且存到list中</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//循环一次，代表一行，一行就是一个JavaBean对象</span></span><br><span class="line"><span class="comment">//(2)创建一个JavaBean的对象</span></span><br><span class="line"><span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有几列，就代表有几个属性</span></span><br><span class="line"><span class="comment">//为obj的每一个属性赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"><span class="comment">//通过反射设置属性的值</span></span><br><span class="line"><span class="comment">//(3)从结果集的元数据对象中获取第几列的字段名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> rsm.getColumnLabel(i+<span class="number">1</span>);<span class="comment">//mysql的序号从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)获取属性对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnName);<span class="comment">//根据字段名称，获取属性对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(5)设置属性可以被访问</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(6)设置属性的值</span></span><br><span class="line">field.set(obj, rs.getObject(i+<span class="number">1</span>));<span class="comment">//从结果集中获取第i+1的值，赋值给该属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7、返回结果</span></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">JdbcUtils.free();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; type,String sql, Object... params)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getBeanList(type,sql,params).get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Employee的增删改查"><a href="#5-Employee的增删改查" class="headerlink" title="5.Employee的增删改查"></a>5.Employee的增删改查</h2><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572607708.png" alt="1661572607708"></p><p>通过给列取别名的方式，来告知数据库的列名与其对应实体的属性名</p><p><img src="/2022/08/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/%E8%BF%9E%E6%8E%A5%E6%B1%A0/1661572638458.png" alt="1661572638458"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//查询对象</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//查询集合</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_t values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_t set username=? where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setInt(<span class="number">2</span>, user.getId());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">user.setId(id);</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">list.add(user);</span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_t values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_t set username=? where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">psmt.setInt(<span class="number">2</span>, user.getId());</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate();</span><br><span class="line">System.out.println(count);</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findOne</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t where id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">psmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">user.setId(id);</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCTools.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_t&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.executeQuery();</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">user.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">list.add(user);</span><br><span class="line">&#125;</span><br><span class="line">psmt.close();</span><br><span class="line">JDBCTools.releaseConnection();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployeeDAOImpl</span> &#123;</span><br><span class="line"><span class="type">EmployeeDAOImpl</span> <span class="variable">ed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeDAOImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"> List&lt;Employee&gt; all = ed.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span> (Employee employee : all) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库连接池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JDBC </tag>
            
            <tag> Durid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/08/27/JDBC/learingJDBC/"/>
      <url>/2022/08/27/JDBC/learingJDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1什么是JDBC"><a href="#1-1什么是JDBC" class="headerlink" title="1.1什么是JDBC"></a>1.1什么是JDBC</h3><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统（DBMS）、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源</p><p>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</p><p>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p><p>如果没有JDBC，那么Java程序访问数据库时是这样的：</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661565904830.png" alt="1661565904830"></p><p>那么有了JDBC之后</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661566276625.png" alt="1661566276625"></p><p><strong>结论：</strong></p><p>JDBC是SUN公司（Oracle公司甲骨文）提供一套用于数据库操作的接口API，Java程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p><h2 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="2.获取数据库连接"></a>2.获取数据库连接</h2><h3 id="2-1引入JDBC驱动"><a href="#2-1引入JDBC驱动" class="headerlink" title="2.1引入JDBC驱动"></a>2.1引入JDBC驱动</h3><p>有两种方式，一种就是从网络上下载jar包，然后把jar包添加到项目的类路径下，这种方法不推荐使用</p><p>另外一种就是使用Maven统一管理</p><p><img src="/2022/08/27/JDBC/learingJDBC/1661566446813.png" alt="1661566446813"></p><h3 id="2-2-加载并注册驱动"><a href="#2-2-加载并注册驱动" class="headerlink" title="2.2 加载并注册驱动"></a>2.2 加载并注册驱动</h3><p><strong>1.Class.forName（）</strong></p><p>这种方式其实就是通过反射来加载与注册驱动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.自动注册</strong></p><p>即不需要我们自己写代码，帮我们自动实现，不过这个有版本的要求，但目前我们使用的大部分都已经支持</p><h3 id="2-3获取数据库连接"><a href="#2-3获取数据库连接" class="headerlink" title="2.3获取数据库连接"></a>2.3获取数据库连接</h3><p>可以通过 DriverManager 类建立到数据库的连接Connection：</p><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><p>jdbc:&lt;子协议&gt;:&lt;子名称&gt;</p><ul><li>协议：JDBC URL中的协议总是jdbc </li><li>子协议：子协议用于标识一个数据库驱动程序，就比如mysql</li><li>子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息</li></ul><p> <img src="/2022/08/27/JDBC/learingJDBC/1661566791612.png" alt="1661566791612"></p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://192.168.213.102:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure><h3 id="2-4-操作或访问数据库"><a href="#2-4-操作或访问数据库" class="headerlink" title="2.4 操作或访问数据库"></a>2.4 操作或访问数据库</h3><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。</p><p>其实一个数据库连接就是一个Socket连接。</p><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，然后可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p>对于statement一般使用两个函数，一个是executeUpdate、一个是executeQuery，第一个函数用来执行更新操作，结果返回一个数字，如果这个数字大于0，那么代表执行成功，一旦数字不大于0，那么代表执行失败，第二个函数用于执行查询操作，返回值类型是ResultSet对象。</p><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商实现</p><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过ResultSet 对象的next() 方法移动到下一行</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line">    <span class="comment">//取这一行的单元格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(id+<span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-释放资源"><a href="#2-5-释放资源" class="headerlink" title="2.5 释放资源"></a>2.5 释放资源</h3><p>Connection、Statement、ResultSet都是应用程序和数据库服务器的连接资源，使用后一定要关闭，可以在finally中关闭</p><h3 id="2-6-增删改查代码示例"><a href="#2-6-增删改查代码示例" class="headerlink" title="2.6 增删改查代码示例"></a>2.6 增删改查代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 网络编程：tcp</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 服务器端：</span></span><br><span class="line"><span class="comment"> * 1、ServerSocket server = new ServerSocket(3306);</span></span><br><span class="line"><span class="comment"> * 2、Socket socket = server.accept();</span></span><br><span class="line"><span class="comment"> * 3、InputStream input = socket.getInputStream();//接收sql，客户端传过来的</span></span><br><span class="line"><span class="comment"> * 4、在服务器执行sql</span></span><br><span class="line"><span class="comment"> * 5、把结果给客户端</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 客户端：</span></span><br><span class="line"><span class="comment"> * 1、Socket socket = new Socket(服务器的IP地址，3306);</span></span><br><span class="line"><span class="comment"> * 2、传sql</span></span><br><span class="line"><span class="comment"> * 3、OutputStream out = socket.getOutputStream();</span></span><br><span class="line"><span class="comment"> * 4、out.write(sql);</span></span><br><span class="line"><span class="comment"> * 5、接收结果</span></span><br><span class="line"><span class="comment"> * 6、断开连接  out.close();socket.close();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStatement</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">             <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(&#x27;财务部&#x27;,&#x27;负责发钱工作&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE t_department SET description = &#x27;负责发工资、社保、公积金工作&#x27; WHERE dname =&#x27;财务部&#x27;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM t_department WHERE did =6&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);<span class="comment">//把insert,update,delete都用这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_department&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line"><span class="comment">//取这一行的单元格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(id+<span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect2</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT did,dname FROM t_department&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//select语句用query方法</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//是否有下一行</span></span><br><span class="line"><span class="comment">//取这一行的单元格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;did&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">System.out.println(id+<span class="string">&quot;\t&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-PreparedStatement"><a href="#3-PreparedStatement" class="headerlink" title="3.PreparedStatement"></a>3.PreparedStatement</h2><h3 id="3-1Statement的不足"><a href="#3-1Statement的不足" class="headerlink" title="3.1Statement的不足"></a>3.1Statement的不足</h3><h4 id="3-1-1-SQL拼接问题"><a href="#3-1-1-SQL拼接问题" class="headerlink" title="3.1.1 SQL拼接问题"></a>3.1.1 SQL拼接问题</h4><p>简单来说就是当sql语句拼接的时候设计字符串的拼接操作，操作十分繁琐</p><p><strong>下面使用一个登录的场景来说明这个弊端</strong></p><p>引用自<a href="https://blog.csdn.net/pison007/article/details/113485127">(69条消息) Statement操作sql语句的弊端_pison007的博客-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">get</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//获取基本的配置信息</span></span><br><span class="line">InputStream input=StatementCase.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">Properties pro=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(input);</span><br><span class="line">String url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">String user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">String password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String driverClass=pro.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载驱动类</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection con=DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">Statement statement=con.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(sql);</span><br><span class="line">User login_user=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">String username=rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password1=rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">login_user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">login_user.setUsername(username);</span><br><span class="line">login_user.setPassword(password1); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> login_user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用户输入用户名和密码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;用户名:&quot;</span>);</span><br><span class="line">String user=scanner.next();</span><br><span class="line">System.out.print(<span class="string">&quot;密码:&quot;</span>);</span><br><span class="line">String password=scanner.next();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">&quot;select username,password from userinfo where  username=&#x27;&quot;</span>+user+<span class="string">&quot;&#x27; and password= &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">User result=get(sql);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="literal">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前为止看起来都一切良好，这个时候问题来了，我必须把变量名user,password放进我的sql语句中去。也就是这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from userinfo where  username=<span class="string">&#x27;变量user&#x27;</span>  and  password= <span class="string">&#x27;变量password&#x27;</span></span><br></pre></td></tr></table></figure><p>由于在java中执行的SQL语句必须以字符串的形式书写，那么就涉及到字符串的拼接,就会变成这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select username,password from userinfo where  username=&#x27;&quot;</span>+user+<span class="string">&quot;&#x27; and password= &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>上述代码的可读性会非常差，而且SQL注入问题是最不能接收的。</p><h4 id="3-1-2-SQL注入问题"><a href="#3-1-2-SQL注入问题" class="headerlink" title="3.1.2 SQL注入问题"></a>3.1.2 SQL注入问题</h4><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令，从而利用系统的 SQL 引擎完成恶意行为的做法。对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement 取代 Statement 就可以了。</p><p>用一个比较简单的例子来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库获取账号和密码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;XXXX&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入用户名: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">un</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入密 码: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pw</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 下面代码存在 sql 注入问题</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &#x27;&quot;</span> + un</span><br><span class="line">                    + <span class="string">&quot;&#x27; and password = &#x27;&quot;</span> + pw + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 下面这个代码的含义为: 将sql语句给DBMS, DBMS进行编译</span></span><br><span class="line">            <span class="comment">// 是先提交后编译, 所以如果用户提供了非法信息, 就导致了 sql 语句含义被扭曲</span></span><br><span class="line">            <span class="comment">// 从而出现不符合用户需求的情况</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/27/JDBC/learingJDBC/1661570625202.png" alt="1661570625202"></p><p>当我输入用户名为 “xxx”  密码为 “XXX’ or ‘1’ &#x3D; ‘1” 时, 也可以显示登录成功, 但是根据上面显示, 数据库中显然没有这个账户和密码. </p><p>根据这一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &#x27;&quot;</span> + un + <span class="string">&quot;&#x27; and password = &#x27;&quot;</span> + pw + <span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p> 我们还原一下 sql 语句, 拼接后的 sql 语句为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span> <span class="type">and</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span> or <span class="string">&#x27;1&#x27;</span> = <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>那么PreparedStatement是如何解决这个SQL注入问题的呢？</p><p><strong>他会预先对 sql 语句的框架进行编译, 然后再给 sql 语句进行传值.</strong></p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = ? and password = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 下面一行执行完, DBMS会将框架先编译好</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><h3 id="2-PreparedStatement"><a href="#2-PreparedStatement" class="headerlink" title="2.PreparedStatement"></a>2.PreparedStatement</h3><p>可以通过调用 Connection 对象的 preparedStatement(<strong>String sql</strong>) 方法获取 PreparedStatement 对象</p><p>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</p><ul><li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li><li>ResultSet executeQuery()执行查询，并返回该查询生成的 ResultSet 对象。</li><li>int executeUpdate()：执行更新，包括增、删、该</li></ul><p>演示代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * PreparedStatement：是Statement子接口</span></span><br><span class="line"><span class="comment"> * 1、SQL不需要拼接</span></span><br><span class="line"><span class="comment"> * 2、SQL不会出现注入</span></span><br><span class="line"><span class="comment"> * 3、可以处理Blob类型的数据</span></span><br><span class="line"><span class="comment"> * tinyblob：255字节以内</span></span><br><span class="line"><span class="comment"> * blob：65K以内</span></span><br><span class="line"><span class="comment"> * mediumblob:16M以内</span></span><br><span class="line"><span class="comment"> * longblob：4G以内</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如果还是报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数：</span></span><br><span class="line"><span class="comment"> * max_allowed_packet=16M</span></span><br><span class="line"><span class="comment"> * 注意：修改了my.ini文件，一定要重新启动服务</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPreparedStatement</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入手机号码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入性别：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪资：&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入部门编号：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">did</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、编写带？的SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_employee (ename,tel,gender,salary,did) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、准备一个PreparedStatement：预编译sql</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">// 对带？的sql进行预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、把?用具体的值进行代替</span></span><br><span class="line">pst.setString(<span class="number">1</span>, name);</span><br><span class="line">pst.setString(<span class="number">2</span>, tel);</span><br><span class="line">pst.setString(<span class="number">3</span>, gender);</span><br><span class="line">pst.setDouble(<span class="number">4</span>, salary);</span><br><span class="line">pst.setInt(<span class="number">5</span>, did);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、编写带?的sql</span></span><br><span class="line"><span class="comment">//孙红雷  &#x27; or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT eid,ename,tel,gender,salary FROM t_employee WHERE ename = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、把带？的sql语句进行预编译</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、把？用具体的变量的赋值</span></span><br><span class="line">pst.setString(<span class="number">1</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;eid&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(id + <span class="string">&quot;\t&quot;</span> + ename + <span class="string">&quot;\t&quot;</span> + tel + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBlob</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请指定照片的路径：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接数据库</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 INSERT INTO `user` VALUES(NULL,用户名,密码,照片)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `user` (username,`password`,head_picture)VALUES(?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、准备一个PreparedStatement：预编译sql</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">// 对带？的sql进行预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、对？进行设置</span></span><br><span class="line">pst.setString(<span class="number">1</span>, username);</span><br><span class="line">pst.setString(<span class="number">2</span>, pwd);</span><br><span class="line">pst.setBlob(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(photoPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">System.out.println(len &gt; <span class="number">0</span> ? <span class="string">&quot;添加成功&quot;</span> : <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、释放资源</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-PreparedStatement-和Statement的对比"><a href="#3-PreparedStatement-和Statement的对比" class="headerlink" title="3.PreparedStatement 和Statement的对比"></a>3.PreparedStatement 和Statement的对比</h3><ul><li><p>代码的可读性和可维护性. Statement的sql拼接是个难题。</p></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li><li><p>PreparedStatement 可以处理Blob类型的数据</p></li><li><p>PreparedStatement 能最大可能提高性能：<strong>（Oracle和PostgreSQL8是这样，但是对于MySQL不一定比Statement高）</strong></p><p>​DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</p></li></ul><h3 id="4-批处理"><a href="#4-批处理" class="headerlink" title="4.批处理"></a>4.批处理</h3><p>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。</p><p>JDBC的批量处理语句包括下面两个方法：</p><ul><li>addBatch()：添加需要批量处理的SQL语句或参数</li><li>executeBatch()：执行批量处理语句；</li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><p>注意：</p><p><strong>JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数?rewriteBatchedStatements&#x3D;true</strong></p><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.preparedstatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBatch</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch();</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">        st.setString(<span class="number">1</span>, <span class="string">&quot;测试部门&quot;</span> + i);</span><br><span class="line">        st.setString(<span class="number">2</span>, <span class="string">&quot;测试部门描述&quot;</span>  + i);</span><br><span class="line">        </span><br><span class="line">        st.addBatch(); <span class="comment">//加入batch</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st.executeBatch(); <span class="comment">//执行一批sql语句</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JDBC </tag>
            
            <tag> statement </tag>
            
            <tag> preparedStatement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字字符串转换成IP地址</title>
      <link href="/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>现在有一个只包含数字的字符串，将该字符串转化成IP地址的形式，返回所有可能的情况。</p><p>例如：</p><p>给出的字符串为”25525522135”,</p><p>返回[“255.255.22.135”, “255.255.221.35”]. (顺序没有关系)</p><p>数据范围：字符串长度 0 \le n \le 120≤<em>n</em>≤12</p><p>要求：空间复杂度 O(n!)<em>O</em>(<em>n</em>!),时间复杂度 O(n!)<em>O</em>(<em>n</em>!)</p><p>注意：ip地址是由四段数字组成的数字序列，格式如 “x.x.x.x”，其中 x 的范围应当是 [0,255]。</p><p><strong>示例1</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;25525522135&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;255.255.22.135&quot;,&quot;255.255.221.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;1111&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;1.1.1.1&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;000256&quot;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[]&quot;</span><br></pre></td></tr></table></figure><hr><p><strong>本题思路：</strong></p><p>本题目采用递归+回溯算法解决。</p><p><strong>递归我们需要确定递归函数的几个参数</strong></p><p>首先两个变量是确定的，一个是保存最后结果的list数组，一个是原始字符串，其它变量需要我们自行设计，我又使用了两个变量，一个用来判断我们目前是在取ip地址的第几个数字，一个用来判断我们目前使用到了字符串的哪一个下标。</p><p><strong>递归还需要判断递归结束条件</strong>，IP地址的规律我们需要清楚，最大是三个数字不能超过255，如果只有一个数字，那么可以为0，如果是2个或者三个数字，那么第一个数字不能为0，因此我们对于每一个IP地址的数字使用一次for循环，for循环最多3次，代表最多加入3个数字，每一次加上一个数字之后，我们需要判断此时的数字是否满足那几个条件，满足，那么我们就接着当时的情况接着取遍历，如果不满足，那么直接continue。</p><p>因此最后的递归结束条件就是当我们已经取了四次IP地址三位数字了，如果四次以后，index并没有把原始字符串取完，那么就结束此次结果，如果取完了，证明四次IP地址都满足条件，因此加入结果数组，最终把数组返回即可得到最后的结果。</p><p>下面是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s string字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">nums</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//用于回溯的变量</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title function_">restoreIpAddresses</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//结果数组</span></span><br><span class="line">        dfs(res,s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(ArrayList&lt;String&gt; res,String s, <span class="type">int</span> ipNumber, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ipNumber==<span class="number">4</span>)&#123; <span class="comment">// 一旦为4，证明已经判断过4次IP地址</span></span><br><span class="line">            <span class="keyword">if</span>(index!=s.length())&#123; <span class="comment">// 看看原始字符串有没有取完</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(nums); <span class="comment">//取完了就把此次情况加入结果数组</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//构建一个临时变量用来存储一次IP地址的情况</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i&lt;index+<span class="number">3</span> &amp;&amp;i&lt;s.length();i++)&#123; <span class="comment">//for循环，一个IP地址的一次最多取三个数组</span></span><br><span class="line">                cur += s.charAt(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(cur);</span><br><span class="line">                <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> nums; <span class="comment">//临时变量用来存储nums，用于回溯</span></span><br><span class="line">                <span class="keyword">if</span>(number&lt;=<span class="number">255</span> &amp;&amp; (cur.length()==<span class="number">1</span> || cur.charAt(<span class="number">0</span>)!=<span class="string">&#x27;0&#x27;</span>))&#123; <span class="comment">//判断条件</span></span><br><span class="line">                    <span class="keyword">if</span>(ipNumber!=<span class="number">3</span>)&#123; <span class="comment">//判断是不是最后一次</span></span><br><span class="line">                        nums+=cur+<span class="string">&quot;.&quot;</span>; </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        nums+=cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dfs(res,s,ipNumber+<span class="number">1</span>,i+<span class="number">1</span>); <span class="comment">//接着递归</span></span><br><span class="line">                    nums = temp; <span class="comment">// 回溯</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/26/%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BAIP%E5%9C%B0%E5%9D%80/%E6%9C%AA%E5%91%BD%E5%90%8D/1661517343582.png" alt="hello"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> top100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/08/17/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">zhuanHuan</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">strNuber</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + number;</span><br><span class="line">        <span class="type">char</span>[] numberChar = strNuber.toCharArray();</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;numberChar.length;i++)&#123;</span><br><span class="line">            s.push(numberChar[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">geWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> geWei;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;shiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">baiWei</span> <span class="operator">=</span> s.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;baiWei;i++)&#123;</span><br><span class="line">                res.append(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res.reverse();</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> learing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
